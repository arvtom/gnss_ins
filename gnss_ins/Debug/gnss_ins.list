
gnss_ins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d83c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800da20  0800da20  0001da20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfe8  0800dfe8  000230c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfe8  0800dfe8  0001dfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dff0  0800dff0  000230c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff0  0800dff0  0001dff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000030c0  20000000  0800dff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005414  200030c0  080110b8  000230c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200084d4  080110b8  000284d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000230c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0bf  00000000  00000000  000230f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036bf  00000000  00000000  000411af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00044870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00045a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025711  00000000  00000000  00046b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001303a  00000000  00000000  0006c241  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000def5b  00000000  00000000  0007f27b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e1d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad8  00000000  00000000  0015e254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200030c0 	.word	0x200030c0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800da04 	.word	0x0800da04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200030c4 	.word	0x200030c4
 800021c:	0800da04 	.word	0x0800da04

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA_Init+0x38>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_DMA_Init+0x38>)
 8000fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x38>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200d      	movs	r0, #13
 8000ffc:	f002 fb89 	bl	8003712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001000:	200d      	movs	r0, #13
 8001002:	f002 fba2 	bl	800374a <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	00000000 	.word	0x00000000

08001018 <gnss_parse_GNRMC>:
#include "gnss.h"

//$GNRMC,185823.40,A,4808.7402374,N,01133.9324760,E,0.00,112.64,130117,3.00,E,A*14

void gnss_parse_GNRMC(uint8_t buf[], uint16_t buf_size)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
	uint16_t i = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	83fb      	strh	r3, [r7, #30]
    uint32_t time = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
    uint32_t latitude = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    uint32_t longitude = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]

    while(i < buf_size - 71)
 8001034:	e196      	b.n	8001364 <gnss_parse_GNRMC+0x34c>
    {
        if(buf[i] == '$' && buf[i+1] == 'G' && buf[i+2] == 'N' &&
 8001036:	8bfb      	ldrh	r3, [r7, #30]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b24      	cmp	r3, #36	; 0x24
 8001040:	f040 818d 	bne.w	800135e <gnss_parse_GNRMC+0x346>
 8001044:	8bfb      	ldrh	r3, [r7, #30]
 8001046:	3301      	adds	r3, #1
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b47      	cmp	r3, #71	; 0x47
 8001050:	f040 8185 	bne.w	800135e <gnss_parse_GNRMC+0x346>
 8001054:	8bfb      	ldrh	r3, [r7, #30]
 8001056:	3302      	adds	r3, #2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b4e      	cmp	r3, #78	; 0x4e
 8001060:	f040 817d 	bne.w	800135e <gnss_parse_GNRMC+0x346>
        		buf[i+3] == 'R' && buf[i+4] == 'M' && buf[i+5] == 'C')
 8001064:	8bfb      	ldrh	r3, [r7, #30]
 8001066:	3303      	adds	r3, #3
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
        if(buf[i] == '$' && buf[i+1] == 'G' && buf[i+2] == 'N' &&
 800106e:	2b52      	cmp	r3, #82	; 0x52
 8001070:	f040 8175 	bne.w	800135e <gnss_parse_GNRMC+0x346>
        		buf[i+3] == 'R' && buf[i+4] == 'M' && buf[i+5] == 'C')
 8001074:	8bfb      	ldrh	r3, [r7, #30]
 8001076:	3304      	adds	r3, #4
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b4d      	cmp	r3, #77	; 0x4d
 8001080:	f040 816d 	bne.w	800135e <gnss_parse_GNRMC+0x346>
 8001084:	8bfb      	ldrh	r3, [r7, #30]
 8001086:	3305      	adds	r3, #5
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b43      	cmp	r3, #67	; 0x43
 8001090:	f040 8165 	bne.w	800135e <gnss_parse_GNRMC+0x346>
        {

			time = (uint32_t)strtod(&buf[i+7],0);
 8001094:	8bfb      	ldrh	r3, [r7, #30]
 8001096:	3307      	adds	r3, #7
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 ff6e 	bl	8008f80 <strtod>
 80010a4:	ec54 3b10 	vmov	r3, r4, d0
 80010a8:	4618      	mov	r0, r3
 80010aa:	4621      	mov	r1, r4
 80010ac:	f7ff fda4 	bl	8000bf8 <__aeabi_d2uiz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]

			g.gnss.time_h = time/10000;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	4ab4      	ldr	r2, [pc, #720]	; (8001388 <gnss_parse_GNRMC+0x370>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	0b5b      	lsrs	r3, r3, #13
 80010be:	b2d9      	uxtb	r1, r3
 80010c0:	4ab2      	ldr	r2, [pc, #712]	; (800138c <gnss_parse_GNRMC+0x374>)
 80010c2:	f243 33fe 	movw	r3, #13310	; 0x33fe
 80010c6:	4413      	add	r3, r2
 80010c8:	460a      	mov	r2, r1
 80010ca:	701a      	strb	r2, [r3, #0]
			g.gnss.time_m = time/100%100;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	4ab0      	ldr	r2, [pc, #704]	; (8001390 <gnss_parse_GNRMC+0x378>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	095a      	lsrs	r2, r3, #5
 80010d6:	4bae      	ldr	r3, [pc, #696]	; (8001390 <gnss_parse_GNRMC+0x378>)
 80010d8:	fba3 1302 	umull	r1, r3, r3, r2
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	2164      	movs	r1, #100	; 0x64
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b2d9      	uxtb	r1, r3
 80010e8:	4aa8      	ldr	r2, [pc, #672]	; (800138c <gnss_parse_GNRMC+0x374>)
 80010ea:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80010ee:	4413      	add	r3, r2
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
			g.gnss.time_s = time%100;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4ba6      	ldr	r3, [pc, #664]	; (8001390 <gnss_parse_GNRMC+0x378>)
 80010f8:	fba3 1302 	umull	r1, r3, r3, r2
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	2164      	movs	r1, #100	; 0x64
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4ba0      	ldr	r3, [pc, #640]	; (800138c <gnss_parse_GNRMC+0x374>)
 800110a:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 800110e:	701a      	strb	r2, [r3, #0]

			if(g.gnss.time_h >= 24)
 8001110:	4a9e      	ldr	r2, [pc, #632]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001112:	f243 33fe 	movw	r3, #13310	; 0x33fe
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b17      	cmp	r3, #23
 800111c:	d90c      	bls.n	8001138 <gnss_parse_GNRMC+0x120>
			{
				g.gnss.time_h = g.gnss.time_h - 24;
 800111e:	4a9b      	ldr	r2, [pc, #620]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001120:	f243 33fe 	movw	r3, #13310	; 0x33fe
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	3b18      	subs	r3, #24
 800112a:	b2d9      	uxtb	r1, r3
 800112c:	4a97      	ldr	r2, [pc, #604]	; (800138c <gnss_parse_GNRMC+0x374>)
 800112e:	f243 33fe 	movw	r3, #13310	; 0x33fe
 8001132:	4413      	add	r3, r2
 8001134:	460a      	mov	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
			}

			//A indicates that it has been positioned
			//V indicates that there is no positioning.
			if(buf[i+18] == 'A')
 8001138:	8bfb      	ldrh	r3, [r7, #30]
 800113a:	3312      	adds	r3, #18
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b41      	cmp	r3, #65	; 0x41
 8001144:	d10e      	bne.n	8001164 <gnss_parse_GNRMC+0x14c>
			{
				g.gnss.status = TRUE;
 8001146:	4a91      	ldr	r2, [pc, #580]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001148:	f243 4301 	movw	r3, #13313	; 0x3401
 800114c:	4413      	add	r3, r2
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
				g.flag.gnss_initiated = TRUE;
 8001152:	4a8e      	ldr	r2, [pc, #568]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001154:	f243 33be 	movw	r3, #13246	; 0x33be
 8001158:	4413      	add	r3, r2
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	f042 0208 	orr.w	r2, r2, #8
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e005      	b.n	8001170 <gnss_parse_GNRMC+0x158>
			}
			else
			{
				g.gnss.status = FALSE;
 8001164:	4a89      	ldr	r2, [pc, #548]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001166:	f243 4301 	movw	r3, #13313	; 0x3401
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
			}

			latitude = (buf[i+20]-'0') * 10 + (buf[i+21]-'0');
 8001170:	8bfb      	ldrh	r3, [r7, #30]
 8001172:	3314      	adds	r3, #20
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4619      	mov	r1, r3
 8001188:	8bfb      	ldrh	r3, [r7, #30]
 800118a:	3315      	adds	r3, #21
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3b30      	subs	r3, #48	; 0x30
 8001194:	440b      	add	r3, r1
 8001196:	617b      	str	r3, [r7, #20]

			float fractional_part_lat = strtod(&buf[i+22],0);
 8001198:	8bfb      	ldrh	r3, [r7, #30]
 800119a:	3316      	adds	r3, #22
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 feec 	bl	8008f80 <strtod>
 80011a8:	ec54 3b10 	vmov	r3, r4, d0
 80011ac:	4618      	mov	r0, r3
 80011ae:	4621      	mov	r1, r4
 80011b0:	f7ff fd42 	bl	8000c38 <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]

			g.gnss.lat = (float)latitude + fractional_part_lat / 60;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80011c6:	ed9f 6a73 	vldr	s12, [pc, #460]	; 8001394 <gnss_parse_GNRMC+0x37c>
 80011ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	4a6e      	ldr	r2, [pc, #440]	; (800138c <gnss_parse_GNRMC+0x374>)
 80011d4:	f243 33dc 	movw	r3, #13276	; 0x33dc
 80011d8:	4413      	add	r3, r2
 80011da:	edc3 7a00 	vstr	s15, [r3]

			g.gnss.lat_area = buf[i+30];
 80011de:	8bfb      	ldrh	r3, [r7, #30]
 80011e0:	331e      	adds	r3, #30
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	7819      	ldrb	r1, [r3, #0]
 80011e8:	4a68      	ldr	r2, [pc, #416]	; (800138c <gnss_parse_GNRMC+0x374>)
 80011ea:	f243 33fd 	movw	r3, #13309	; 0x33fd
 80011ee:	4413      	add	r3, r2
 80011f0:	460a      	mov	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]

			longitude = (buf[i+33]-'0') * 10 + (buf[i+34]-'0');
 80011f4:	8bfb      	ldrh	r3, [r7, #30]
 80011f6:	3321      	adds	r3, #33	; 0x21
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4619      	mov	r1, r3
 800120c:	8bfb      	ldrh	r3, [r7, #30]
 800120e:	3322      	adds	r3, #34	; 0x22
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	3b30      	subs	r3, #48	; 0x30
 8001218:	440b      	add	r3, r1
 800121a:	613b      	str	r3, [r7, #16]

			float fractional_part_lon = strtod(&buf[i+35],0);
 800121c:	8bfb      	ldrh	r3, [r7, #30]
 800121e:	3323      	adds	r3, #35	; 0x23
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f007 feaa 	bl	8008f80 <strtod>
 800122c:	ec54 3b10 	vmov	r3, r4, d0
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	f7ff fd00 	bl	8000c38 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	60bb      	str	r3, [r7, #8]

			g.gnss.lon = (float)longitude + fractional_part_lon / 60;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001246:	edd7 6a02 	vldr	s13, [r7, #8]
 800124a:	ed9f 6a52 	vldr	s12, [pc, #328]	; 8001394 <gnss_parse_GNRMC+0x37c>
 800124e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	4a4d      	ldr	r2, [pc, #308]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001258:	f243 33d8 	movw	r3, #13272	; 0x33d8
 800125c:	4413      	add	r3, r2
 800125e:	edc3 7a00 	vstr	s15, [r3]

			g.gnss.lon_area = buf[i+43];
 8001262:	8bfb      	ldrh	r3, [r7, #30]
 8001264:	332b      	adds	r3, #43	; 0x2b
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	7819      	ldrb	r1, [r3, #0]
 800126c:	4a47      	ldr	r2, [pc, #284]	; (800138c <gnss_parse_GNRMC+0x374>)
 800126e:	f243 33fc 	movw	r3, #13308	; 0x33fc
 8001272:	4413      	add	r3, r2
 8001274:	460a      	mov	r2, r1
 8001276:	701a      	strb	r2, [r3, #0]

			g.gnss.knots = strtod(&buf[i+45],0);
 8001278:	8bfb      	ldrh	r3, [r7, #30]
 800127a:	332d      	adds	r3, #45	; 0x2d
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f007 fe7c 	bl	8008f80 <strtod>
 8001288:	eeb0 7a40 	vmov.f32	s14, s0
 800128c:	eef0 7a60 	vmov.f32	s15, s1
 8001290:	4a3e      	ldr	r2, [pc, #248]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001292:	f243 4308 	movw	r3, #13320	; 0x3408
 8001296:	4413      	add	r3, r2
 8001298:	ed83 7b00 	vstr	d7, [r3]
			g.gnss.kmh = 1.852 * g.gnss.knots;
 800129c:	4a3b      	ldr	r2, [pc, #236]	; (800138c <gnss_parse_GNRMC+0x374>)
 800129e:	f243 4308 	movw	r3, #13320	; 0x3408
 80012a2:	4413      	add	r3, r2
 80012a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a8:	a333      	add	r3, pc, #204	; (adr r3, 8001378 <gnss_parse_GNRMC+0x360>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9cb 	bl	8000648 <__aeabi_dmul>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	4619      	mov	r1, r3
 80012b8:	4622      	mov	r2, r4
 80012ba:	4834      	ldr	r0, [pc, #208]	; (800138c <gnss_parse_GNRMC+0x374>)
 80012bc:	f243 4310 	movw	r3, #13328	; 0x3410
 80012c0:	4403      	add	r3, r0
 80012c2:	e9c3 1200 	strd	r1, r2, [r3]
			g.gnss.m_s = g.gnss.kmh / 3.6;
 80012c6:	4a31      	ldr	r2, [pc, #196]	; (800138c <gnss_parse_GNRMC+0x374>)
 80012c8:	f243 4310 	movw	r3, #13328	; 0x3410
 80012cc:	4413      	add	r3, r2
 80012ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d2:	a32b      	add	r3, pc, #172	; (adr r3, 8001380 <gnss_parse_GNRMC+0x368>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fae0 	bl	800089c <__aeabi_ddiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	4619      	mov	r1, r3
 80012e2:	4622      	mov	r2, r4
 80012e4:	4829      	ldr	r0, [pc, #164]	; (800138c <gnss_parse_GNRMC+0x374>)
 80012e6:	f243 4318 	movw	r3, #13336	; 0x3418
 80012ea:	4403      	add	r3, r0
 80012ec:	e9c3 1200 	strd	r1, r2, [r3]

			if(g.gnss.knots >= 10)
 80012f0:	4a26      	ldr	r2, [pc, #152]	; (800138c <gnss_parse_GNRMC+0x374>)
 80012f2:	f243 4308 	movw	r3, #13320	; 0x3408
 80012f6:	4413      	add	r3, r2
 80012f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <gnss_parse_GNRMC+0x380>)
 8001302:	f7ff fc27 	bl	8000b54 <__aeabi_dcmpge>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d014      	beq.n	8001336 <gnss_parse_GNRMC+0x31e>
			{
				//speed was 5 digits
				g.gnss.bearing = strtod(&buf[i+51],0);
 800130c:	8bfb      	ldrh	r3, [r7, #30]
 800130e:	3333      	adds	r3, #51	; 0x33
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f007 fe32 	bl	8008f80 <strtod>
 800131c:	ec54 3b10 	vmov	r3, r4, d0
 8001320:	4618      	mov	r0, r3
 8001322:	4621      	mov	r1, r4
 8001324:	f7ff fc88 	bl	8000c38 <__aeabi_d2f>
 8001328:	4601      	mov	r1, r0
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <gnss_parse_GNRMC+0x374>)
 800132c:	f243 33f8 	movw	r3, #13304	; 0x33f8
 8001330:	4413      	add	r3, r2
 8001332:	6019      	str	r1, [r3, #0]
 8001334:	e013      	b.n	800135e <gnss_parse_GNRMC+0x346>
			}
			else
			{
				//speed was 4 digits
				g.gnss.bearing = strtod(&buf[i+50],0);
 8001336:	8bfb      	ldrh	r3, [r7, #30]
 8001338:	3332      	adds	r3, #50	; 0x32
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f007 fe1d 	bl	8008f80 <strtod>
 8001346:	ec54 3b10 	vmov	r3, r4, d0
 800134a:	4618      	mov	r0, r3
 800134c:	4621      	mov	r1, r4
 800134e:	f7ff fc73 	bl	8000c38 <__aeabi_d2f>
 8001352:	4601      	mov	r1, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <gnss_parse_GNRMC+0x374>)
 8001356:	f243 33f8 	movw	r3, #13304	; 0x33f8
 800135a:	4413      	add	r3, r2
 800135c:	6019      	str	r1, [r3, #0]
			}

        }
        i++;
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	3301      	adds	r3, #1
 8001362:	83fb      	strh	r3, [r7, #30]
    while(i < buf_size - 71)
 8001364:	8bfa      	ldrh	r2, [r7, #30]
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	3b47      	subs	r3, #71	; 0x47
 800136a:	429a      	cmp	r2, r3
 800136c:	f6ff ae63 	blt.w	8001036 <gnss_parse_GNRMC+0x1e>
    }
}
 8001370:	bf00      	nop
 8001372:	3724      	adds	r7, #36	; 0x24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	c083126f 	.word	0xc083126f
 800137c:	3ffda1ca 	.word	0x3ffda1ca
 8001380:	cccccccd 	.word	0xcccccccd
 8001384:	400ccccc 	.word	0x400ccccc
 8001388:	d1b71759 	.word	0xd1b71759
 800138c:	200030e8 	.word	0x200030e8
 8001390:	51eb851f 	.word	0x51eb851f
 8001394:	42700000 	.word	0x42700000
 8001398:	40240000 	.word	0x40240000

0800139c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <MX_GPIO_Init+0xec>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a34      	ldr	r2, [pc, #208]	; (8001488 <MX_GPIO_Init+0xec>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <MX_GPIO_Init+0xec>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <MX_GPIO_Init+0xec>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <MX_GPIO_Init+0xec>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <MX_GPIO_Init+0xec>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_GPIO_Init+0xec>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <MX_GPIO_Init+0xec>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <MX_GPIO_Init+0xec>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_GPIO_Init+0xec>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <MX_GPIO_Init+0xec>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_GPIO_Init+0xec>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_GPIO_Init+0xec>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_GPIO_Init+0xec>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_GPIO_Init+0xec>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001430:	4816      	ldr	r0, [pc, #88]	; (800148c <MX_GPIO_Init+0xf0>)
 8001432:	f002 ff53 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_GPIO_Init+0xf4>)
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <MX_GPIO_Init+0xf8>)
 800144c:	f002 fdac 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8001450:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <MX_GPIO_Init+0xf0>)
 800146a:	f002 fd9d 	bl	8003fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2028      	movs	r0, #40	; 0x28
 8001474:	f002 f94d 	bl	8003712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001478:	2028      	movs	r0, #40	; 0x28
 800147a:	f002 f966 	bl	800374a <HAL_NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000
 8001490:	10110000 	.word	0x10110000
 8001494:	40020400 	.word	0x40020400

08001498 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_I2C3_Init+0x74>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <MX_I2C3_Init+0x78>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_I2C3_Init+0x74>)
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <MX_I2C3_Init+0x7c>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_I2C3_Init+0x74>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_I2C3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_I2C3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C3_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_I2C3_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C3_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <MX_I2C3_Init+0x74>)
 80014d4:	f002 ff4e 	bl	8004374 <HAL_I2C_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014de:	f001 fa69 	bl	80029b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <MX_I2C3_Init+0x74>)
 80014e6:	f003 fc1f 	bl	8004d28 <HAL_I2CEx_ConfigAnalogFilter>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f001 fa60 	bl	80029b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_I2C3_Init+0x74>)
 80014f8:	f003 fc61 	bl	8004dbe <HAL_I2CEx_ConfigDigitalFilter>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001502:	f001 fa57 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20008208 	.word	0x20008208
 8001510:	40005c00 	.word	0x40005c00
 8001514:	20404768 	.word	0x20404768

08001518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <HAL_I2C_MspInit+0xb8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d145      	bne.n	80015c6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a25      	ldr	r2, [pc, #148]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800157c:	2304      	movs	r3, #4
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4814      	ldr	r0, [pc, #80]	; (80015d8 <HAL_I2C_MspInit+0xc0>)
 8001588:	f002 fd0e 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001592:	2312      	movs	r3, #18
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <HAL_I2C_MspInit+0xc4>)
 80015aa:	f002 fcfd 	bl	8003fa8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 80015b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_I2C_MspInit+0xbc>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40005c00 	.word	0x40005c00
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020000 	.word	0x40020000

080015e0 <imu_init_acc>:
#define TEMP_OUT_H_REG 0x41
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B

void imu_init_acc()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af04      	add	r7, sp, #16
	//check acc
	while(g.buffer.i2c3_rx[0]!=0x68)
 80015e6:	e013      	b.n	8001610 <imu_init_acc+0x30>
	{
		HAL_I2C_Mem_Read(&hi2c3, ACC_ADDR,ACC_CHECK,1, (uint8_t *)g.buffer.i2c3_rx, 1, 1000);
 80015e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2301      	movs	r3, #1
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <imu_init_acc+0xe0>)
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2301      	movs	r3, #1
 80015f8:	2275      	movs	r2, #117	; 0x75
 80015fa:	21d0      	movs	r1, #208	; 0xd0
 80015fc:	4831      	ldr	r0, [pc, #196]	; (80016c4 <imu_init_acc+0xe4>)
 80015fe:	f003 f85d 	bl	80046bc <HAL_I2C_Mem_Read>
		if(g.buffer.i2c3_rx[0]==0x68)
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <imu_init_acc+0xe8>)
 8001604:	f243 33a3 	movw	r3, #13219	; 0x33a3
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b68      	cmp	r3, #104	; 0x68
 800160e:	d007      	beq.n	8001620 <imu_init_acc+0x40>
	while(g.buffer.i2c3_rx[0]!=0x68)
 8001610:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <imu_init_acc+0xe8>)
 8001612:	f243 33a3 	movw	r3, #13219	; 0x33a3
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b68      	cmp	r3, #104	; 0x68
 800161c:	d1e4      	bne.n	80015e8 <imu_init_acc+0x8>
 800161e:	e000      	b.n	8001622 <imu_init_acc+0x42>
			break;
 8001620:	bf00      	nop
	}

	// power management register 0X6B we should write all 0's to wake the sensor up
	g.buffer.i2c3_tx[0] = 0x00;
 8001622:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <imu_init_acc+0xe8>)
 8001624:	f243 33ad 	movw	r3, #13229	; 0x33ad
 8001628:	4413      	add	r3, r2
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c3, ACC_ADDR, PWR_MGMT_1_REG, 1, (uint8_t *)g.buffer.i2c3_tx, 1, 1000);
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <imu_init_acc+0xec>)
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	226b      	movs	r2, #107	; 0x6b
 8001640:	21d0      	movs	r1, #208	; 0xd0
 8001642:	4820      	ldr	r0, [pc, #128]	; (80016c4 <imu_init_acc+0xe4>)
 8001644:	f002 ff26 	bl	8004494 <HAL_I2C_Mem_Write>

	// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	g.buffer.i2c3_tx[0] = 0x07;
 8001648:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <imu_init_acc+0xe8>)
 800164a:	f243 33ad 	movw	r3, #13229	; 0x33ad
 800164e:	4413      	add	r3, r2
 8001650:	2207      	movs	r2, #7
 8001652:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c3, ACC_ADDR, SMPLRT_DIV_REG, 1, (uint8_t *)g.buffer.i2c3_tx, 1, 1000);
 8001654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	2301      	movs	r3, #1
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <imu_init_acc+0xec>)
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2301      	movs	r3, #1
 8001664:	2219      	movs	r2, #25
 8001666:	21d0      	movs	r1, #208	; 0xd0
 8001668:	4816      	ldr	r0, [pc, #88]	; (80016c4 <imu_init_acc+0xe4>)
 800166a:	f002 ff13 	bl	8004494 <HAL_I2C_Mem_Write>

	// Set accelerometer configuration in ACCEL_CONFIG Register
	// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
	g.buffer.i2c3_tx[0] = 0x00;
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <imu_init_acc+0xe8>)
 8001670:	f243 33ad 	movw	r3, #13229	; 0x33ad
 8001674:	4413      	add	r3, r2
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c3, ACC_ADDR, ACCEL_CONFIG_REG, 1, (uint8_t *)g.buffer.i2c3_tx, 1, 1000);
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <imu_init_acc+0xec>)
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	221c      	movs	r2, #28
 800168c:	21d0      	movs	r1, #208	; 0xd0
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <imu_init_acc+0xe4>)
 8001690:	f002 ff00 	bl	8004494 <HAL_I2C_Mem_Write>

	// Set Gyroscopic configuration in GYRO_CONFIG Register
	// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
	g.buffer.i2c3_tx[0] = 0x00;
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <imu_init_acc+0xe8>)
 8001696:	f243 33ad 	movw	r3, #13229	; 0x33ad
 800169a:	4413      	add	r3, r2
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c3, ACC_ADDR, GYRO_CONFIG_REG, 1, (uint8_t *)g.buffer.i2c3_tx, 1, 1000);
 80016a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2301      	movs	r3, #1
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <imu_init_acc+0xec>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	221b      	movs	r2, #27
 80016b2:	21d0      	movs	r1, #208	; 0xd0
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <imu_init_acc+0xe4>)
 80016b6:	f002 feed 	bl	8004494 <HAL_I2C_Mem_Write>
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000648b 	.word	0x2000648b
 80016c4:	20008208 	.word	0x20008208
 80016c8:	200030e8 	.word	0x200030e8
 80016cc:	20006495 	.word	0x20006495

080016d0 <imu_calibrate_acc>:

void imu_calibrate_acc(acc_t *p_x, acc_t *p_y, acc_t *p_z)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	p_x->offset = g.filter_acc_x.value;
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <imu_calibrate_acc+0x44>)
 80016de:	f243 43a0 	movw	r3, #13472	; 0x34a0
 80016e2:	4413      	add	r3, r2
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	609a      	str	r2, [r3, #8]
	p_y->offset = g.filter_acc_y.value;
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <imu_calibrate_acc+0x44>)
 80016ec:	f643 1360 	movw	r3, #14688	; 0x3960
 80016f0:	4413      	add	r3, r2
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	609a      	str	r2, [r3, #8]
	p_z->offset = g.filter_acc_z.value;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <imu_calibrate_acc+0x44>)
 80016fa:	f643 6320 	movw	r3, #15904	; 0x3e20
 80016fe:	4413      	add	r3, r2
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200030e8 	.word	0x200030e8

08001718 <imu_calibrate_gyro>:

void imu_calibrate_gyro(gyro_t *p_x, gyro_t *p_y, gyro_t *p_z)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	p_x->offset = g.filter_gyro_x.value;
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <imu_calibrate_gyro+0x44>)
 8001726:	f244 23e0 	movw	r3, #17120	; 0x42e0
 800172a:	4413      	add	r3, r2
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	609a      	str	r2, [r3, #8]
	p_y->offset = g.filter_gyro_y.value;
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <imu_calibrate_gyro+0x44>)
 8001734:	f244 73a0 	movw	r3, #18336	; 0x47a0
 8001738:	4413      	add	r3, r2
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	609a      	str	r2, [r3, #8]
	p_z->offset = g.filter_gyro_z.value;
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <imu_calibrate_gyro+0x44>)
 8001742:	f644 4360 	movw	r3, #19552	; 0x4c60
 8001746:	4413      	add	r3, r2
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	609a      	str	r2, [r3, #8]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200030e8 	.word	0x200030e8

08001760 <imu_read_acc>:

void imu_read_acc(acc_t *p_x, acc_t *p_y, acc_t *p_z)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af04      	add	r7, sp, #16
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Read (&hi2c3, ACC_ADDR, ACCEL_XOUT_H_REG, 1, (uint8_t *)g.buffer.i2c3_rx, 6, 1000);
 800176c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2306      	movs	r3, #6
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <imu_read_acc+0x108>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	223b      	movs	r2, #59	; 0x3b
 800177e:	21d0      	movs	r1, #208	; 0xd0
 8001780:	483a      	ldr	r0, [pc, #232]	; (800186c <imu_read_acc+0x10c>)
 8001782:	f002 ff9b 	bl	80046bc <HAL_I2C_Mem_Read>

	p_x->raw = (int16_t)(g.buffer.i2c3_rx[0] << 8 | g.buffer.i2c3_rx[1]);
 8001786:	4a3a      	ldr	r2, [pc, #232]	; (8001870 <imu_read_acc+0x110>)
 8001788:	f243 33a3 	movw	r3, #13219	; 0x33a3
 800178c:	4413      	add	r3, r2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	4936      	ldr	r1, [pc, #216]	; (8001870 <imu_read_acc+0x110>)
 8001796:	f243 33a4 	movw	r3, #13220	; 0x33a4
 800179a:	440b      	add	r3, r1
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	801a      	strh	r2, [r3, #0]
	p_y->raw = (int16_t)(g.buffer.i2c3_rx[2] << 8 | g.buffer.i2c3_rx[3]);
 80017a8:	4a31      	ldr	r2, [pc, #196]	; (8001870 <imu_read_acc+0x110>)
 80017aa:	f243 33a5 	movw	r3, #13221	; 0x33a5
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	492e      	ldr	r1, [pc, #184]	; (8001870 <imu_read_acc+0x110>)
 80017b8:	f243 33a6 	movw	r3, #13222	; 0x33a6
 80017bc:	440b      	add	r3, r1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	801a      	strh	r2, [r3, #0]
	p_z->raw = (int16_t)(g.buffer.i2c3_rx[4] << 8 | g.buffer.i2c3_rx[5]);
 80017ca:	4a29      	ldr	r2, [pc, #164]	; (8001870 <imu_read_acc+0x110>)
 80017cc:	f243 33a7 	movw	r3, #13223	; 0x33a7
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	4925      	ldr	r1, [pc, #148]	; (8001870 <imu_read_acc+0x110>)
 80017da:	f243 33a8 	movw	r3, #13224	; 0x33a8
 80017de:	440b      	add	r3, r1
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	801a      	strh	r2, [r3, #0]

	p_x->value = (float)p_x->raw/16384 - p_x->offset;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001874 <imu_read_acc+0x114>
 80017fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	edd3 7a02 	vldr	s15, [r3, #8]
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	edc3 7a01 	vstr	s15, [r3, #4]
	p_y->value = (float)p_y->raw/16384 - p_y->offset;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001820:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001874 <imu_read_acc+0x114>
 8001824:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	edd3 7a02 	vldr	s15, [r3, #8]
 800182e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	edc3 7a01 	vstr	s15, [r3, #4]
	p_z->value = (float)p_z->raw/16384 - p_z->offset;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001874 <imu_read_acc+0x114>
 800184a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edd3 7a02 	vldr	s15, [r3, #8]
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000648b 	.word	0x2000648b
 800186c:	20008208 	.word	0x20008208
 8001870:	200030e8 	.word	0x200030e8
 8001874:	46800000 	.word	0x46800000

08001878 <imu_read_gyro>:

void imu_read_gyro(gyro_t *p_x, gyro_t *p_y, gyro_t *p_z)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af04      	add	r7, sp, #16
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Read (&hi2c3, ACC_ADDR, GYRO_XOUT_H_REG, 1, (uint8_t *)g.buffer.i2c3_rx, 6, 1000);
 8001884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2306      	movs	r3, #6
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <imu_read_gyro+0x108>)
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	2243      	movs	r2, #67	; 0x43
 8001896:	21d0      	movs	r1, #208	; 0xd0
 8001898:	483a      	ldr	r0, [pc, #232]	; (8001984 <imu_read_gyro+0x10c>)
 800189a:	f002 ff0f 	bl	80046bc <HAL_I2C_Mem_Read>

	p_x->raw = (int16_t)(g.buffer.i2c3_rx[0] << 8 | g.buffer.i2c3_rx[1]);
 800189e:	4a3a      	ldr	r2, [pc, #232]	; (8001988 <imu_read_gyro+0x110>)
 80018a0:	f243 33a3 	movw	r3, #13219	; 0x33a3
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	4936      	ldr	r1, [pc, #216]	; (8001988 <imu_read_gyro+0x110>)
 80018ae:	f243 33a4 	movw	r3, #13220	; 0x33a4
 80018b2:	440b      	add	r3, r1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	801a      	strh	r2, [r3, #0]
	p_y->raw = (int16_t)(g.buffer.i2c3_rx[2] << 8 | g.buffer.i2c3_rx[3]);
 80018c0:	4a31      	ldr	r2, [pc, #196]	; (8001988 <imu_read_gyro+0x110>)
 80018c2:	f243 33a5 	movw	r3, #13221	; 0x33a5
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	492e      	ldr	r1, [pc, #184]	; (8001988 <imu_read_gyro+0x110>)
 80018d0:	f243 33a6 	movw	r3, #13222	; 0x33a6
 80018d4:	440b      	add	r3, r1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	801a      	strh	r2, [r3, #0]
	p_z->raw = (int16_t)(g.buffer.i2c3_rx[4] << 8 | g.buffer.i2c3_rx[5]);
 80018e2:	4a29      	ldr	r2, [pc, #164]	; (8001988 <imu_read_gyro+0x110>)
 80018e4:	f243 33a7 	movw	r3, #13223	; 0x33a7
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4925      	ldr	r1, [pc, #148]	; (8001988 <imu_read_gyro+0x110>)
 80018f2:	f243 33a8 	movw	r3, #13224	; 0x33a8
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21a      	sxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	801a      	strh	r2, [r3, #0]

	p_x->value = (float)p_x->raw/131 - p_x->offset;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800198c <imu_read_gyro+0x114>
 8001916:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	edc3 7a01 	vstr	s15, [r3, #4]
	p_y->value = (float)p_y->raw/131 - p_y->offset;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001938:	eddf 6a14 	vldr	s13, [pc, #80]	; 800198c <imu_read_gyro+0x114>
 800193c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	edd3 7a02 	vldr	s15, [r3, #8]
 8001946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	edc3 7a01 	vstr	s15, [r3, #4]
	p_z->value = (float)p_z->raw/131 - p_z->offset;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800198c <imu_read_gyro+0x114>
 8001962:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	edd3 7a02 	vldr	s15, [r3, #8]
 800196c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000648b 	.word	0x2000648b
 8001984:	20008208 	.word	0x20008208
 8001988:	200030e8 	.word	0x200030e8
 800198c:	43030000 	.word	0x43030000

08001990 <joint_result_calculate_bearing>:
 */

#include "ins.h"

void joint_result_calculate_bearing(joint_result_t *p_joint, gnss_t *p_gnss, acc_t *p_acc, gyro_t *p_gyro)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
	if(FALSE == g.flag.gnss_active)
 800199e:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <joint_result_calculate_bearing+0x148>)
 80019a0:	f243 33be 	movw	r3, #13246	; 0x33be
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d142      	bne.n	8001a38 <joint_result_calculate_bearing+0xa8>
	{
		//execute only once when gnss lost
		if(FALSE == g.flag.ins_begin)
 80019b2:	4a49      	ldr	r2, [pc, #292]	; (8001ad8 <joint_result_calculate_bearing+0x148>)
 80019b4:	f243 33be 	movw	r3, #13246	; 0x33be
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <joint_result_calculate_bearing+0x46>
//			p_joint->latitude = p_gnss->lat;
//			p_joint->longitude = p_gnss->lon;
//			p_joint->velocity_m_s = p_gnss->kmh * 5 / 18;
//			p_joint->bearing = p_gnss->bearing;

			g.flag.ins_begin = TRUE;
 80019c6:	4a44      	ldr	r2, [pc, #272]	; (8001ad8 <joint_result_calculate_bearing+0x148>)
 80019c8:	f243 33be 	movw	r3, #13246	; 0x33be
 80019cc:	4413      	add	r3, r2
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019d4:	701a      	strb	r2, [r3, #0]

		}

		p_joint->bearing = p_joint->bearing + p_gyro->value_filtered;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	edd3 7a03 	vldr	s15, [r3, #12]
 80019e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edc3 7a02 	vstr	s15, [r3, #8]
		p_joint->velocity_m_s = p_joint->velocity_m_s + p_acc->value_filtered * 1;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	edc3 7a03 	vstr	s15, [r3, #12]
		p_joint->velocity_kmh = p_joint->velocity_m_s * 3.6;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fdc6 	bl	8000598 <__aeabi_f2d>
 8001a0c:	a330      	add	r3, pc, #192	; (adr r3, 8001ad0 <joint_result_calculate_bearing+0x140>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fe19 	bl	8000648 <__aeabi_dmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	460c      	mov	r4, r1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	f7ff f90b 	bl	8000c38 <__aeabi_d2f>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	611a      	str	r2, [r3, #16]
		p_joint->distance = p_joint->velocity_m_s * 1;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	615a      	str	r2, [r3, #20]

		joint_result_calculate_lat_lon(p_joint);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f935 	bl	8001ca0 <joint_result_calculate_lat_lon>
		p_joint->velocity_kmh = p_joint->velocity_m_s * 3.6;
		p_joint->distance = p_joint->velocity_m_s * 1;

		g.flag.ins_begin = FALSE;
	}
}
 8001a36:	e044      	b.n	8001ac2 <joint_result_calculate_bearing+0x132>
		p_joint->bearing = p_gnss->bearing;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]
		p_joint->latitude = p_gnss->lat;
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	601a      	str	r2, [r3, #0]
		p_joint->longitude = p_gnss->lon;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
		p_joint->velocity_m_s = p_gnss->kmh * 5 / 18;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <joint_result_calculate_bearing+0x14c>)
 8001a5c:	f7fe fdf4 	bl	8000648 <__aeabi_dmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	460c      	mov	r4, r1
 8001a64:	4618      	mov	r0, r3
 8001a66:	4621      	mov	r1, r4
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <joint_result_calculate_bearing+0x150>)
 8001a6e:	f7fe ff15 	bl	800089c <__aeabi_ddiv>
 8001a72:	4603      	mov	r3, r0
 8001a74:	460c      	mov	r4, r1
 8001a76:	4618      	mov	r0, r3
 8001a78:	4621      	mov	r1, r4
 8001a7a:	f7ff f8dd 	bl	8000c38 <__aeabi_d2f>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	60da      	str	r2, [r3, #12]
		p_joint->velocity_kmh = p_joint->velocity_m_s * 3.6;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd85 	bl	8000598 <__aeabi_f2d>
 8001a8e:	a310      	add	r3, pc, #64	; (adr r3, 8001ad0 <joint_result_calculate_bearing+0x140>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fdd8 	bl	8000648 <__aeabi_dmul>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	f7ff f8ca 	bl	8000c38 <__aeabi_d2f>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
		p_joint->distance = p_joint->velocity_m_s * 1;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	615a      	str	r2, [r3, #20]
		g.flag.ins_begin = FALSE;
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <joint_result_calculate_bearing+0x148>)
 8001ab4:	f243 33be 	movw	r3, #13246	; 0x33be
 8001ab8:	4413      	add	r3, r2
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	f36f 12c7 	bfc	r2, #7, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	cccccccd 	.word	0xcccccccd
 8001ad4:	400ccccc 	.word	0x400ccccc
 8001ad8:	200030e8 	.word	0x200030e8
 8001adc:	40140000 	.word	0x40140000
 8001ae0:	40320000 	.word	0x40320000
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <ins_calculate_2d_acceleration>:

float ins_calculate_2d_acceleration(float x, float y)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af2:	edc7 0a00 	vstr	s1, [r7]
	float result = pow(x,2) + pow(y,2);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fd4e 	bl	8000598 <__aeabi_f2d>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001b58 <ins_calculate_2d_acceleration+0x70>
 8001b04:	ec44 3b10 	vmov	d0, r3, r4
 8001b08:	f009 fb54 	bl	800b1b4 <pow>
 8001b0c:	ec55 4b10 	vmov	r4, r5, d0
 8001b10:	6838      	ldr	r0, [r7, #0]
 8001b12:	f7fe fd41 	bl	8000598 <__aeabi_f2d>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001b58 <ins_calculate_2d_acceleration+0x70>
 8001b1e:	ec43 2b10 	vmov	d0, r2, r3
 8001b22:	f009 fb47 	bl	800b1b4 <pow>
 8001b26:	ec53 2b10 	vmov	r2, r3, d0
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbd5 	bl	80002dc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f87d 	bl	8000c38 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	60fb      	str	r3, [r7, #12]

	return result;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	ee07 3a90 	vmov	s15, r3
}
 8001b48:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bdb0      	pop	{r4, r5, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	f3af 8000 	nop.w
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40000000 	.word	0x40000000

08001b60 <ins_calculate_3d_acceleration>:

float ins_calculate_3d_acceleration(float x, float y, float z)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b6e:	ed87 1a01 	vstr	s2, [r7, #4]
	float temp = pow(x,2) + pow(y,2);
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7fe fd10 	bl	8000598 <__aeabi_f2d>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c20 <ins_calculate_3d_acceleration+0xc0>
 8001b80:	ec44 3b10 	vmov	d0, r3, r4
 8001b84:	f009 fb16 	bl	800b1b4 <pow>
 8001b88:	ec55 4b10 	vmov	r4, r5, d0
 8001b8c:	68b8      	ldr	r0, [r7, #8]
 8001b8e:	f7fe fd03 	bl	8000598 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001c20 <ins_calculate_3d_acceleration+0xc0>
 8001b9a:	ec43 2b10 	vmov	d0, r2, r3
 8001b9e:	f009 fb09 	bl	800b1b4 <pow>
 8001ba2:	ec53 2b10 	vmov	r2, r3, d0
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f7fe fb97 	bl	80002dc <__adddf3>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	f7ff f83f 	bl	8000c38 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	617b      	str	r3, [r7, #20]
	float result = pow(temp,2) + pow(z,2);
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7fe fcea 	bl	8000598 <__aeabi_f2d>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001c20 <ins_calculate_3d_acceleration+0xc0>
 8001bcc:	ec44 3b10 	vmov	d0, r3, r4
 8001bd0:	f009 faf0 	bl	800b1b4 <pow>
 8001bd4:	ec55 4b10 	vmov	r4, r5, d0
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7fe fcdd 	bl	8000598 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001c20 <ins_calculate_3d_acceleration+0xc0>
 8001be6:	ec43 2b10 	vmov	d0, r2, r3
 8001bea:	f009 fae3 	bl	800b1b4 <pow>
 8001bee:	ec53 2b10 	vmov	r2, r3, d0
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe fb71 	bl	80002dc <__adddf3>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4621      	mov	r1, r4
 8001c02:	f7ff f819 	bl	8000c38 <__aeabi_d2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	613b      	str	r3, [r7, #16]

	return result;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	ee07 3a90 	vmov	s15, r3
}
 8001c10:	eeb0 0a67 	vmov.f32	s0, s15
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40000000 	.word	0x40000000

08001c28 <ins_calculate_velocity>:

float ins_calculate_velocity(float *velocity_0, float acceleration, float delta_t)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c34:	edc7 0a01 	vstr	s1, [r7, #4]
	float estimate =  *velocity_0 + acceleration*delta_t;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	ed93 7a00 	vldr	s14, [r3]
 8001c3e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	edc7 7a05 	vstr	s15, [r7, #20]
	if(estimate > 150)
 8001c52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c56:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c98 <ins_calculate_velocity+0x70>
 8001c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	dd01      	ble.n	8001c68 <ins_calculate_velocity+0x40>
	{
		estimate = 150;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <ins_calculate_velocity+0x74>)
 8001c66:	617b      	str	r3, [r7, #20]
	}
	if(estimate < 0)
 8001c68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	d502      	bpl.n	8001c7c <ins_calculate_velocity+0x54>
	{
		estimate = 0;
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
	}

	*velocity_0 = estimate;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	601a      	str	r2, [r3, #0]

	return estimate;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
}
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	43160000 	.word	0x43160000
 8001c9c:	43160000 	.word	0x43160000

08001ca0 <joint_result_calculate_lat_lon>:

void joint_result_calculate_lat_lon(joint_result_t *p_joint)
{
 8001ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca4:	ed2d 8b02 	vpush	{d8}
 8001ca8:	b088      	sub	sp, #32
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	float R = 6371000;	//meters
 8001cae:	4bca      	ldr	r3, [pc, #808]	; (8001fd8 <joint_result_calculate_lat_lon+0x338>)
 8001cb0:	61fb      	str	r3, [r7, #28]
	float bearing_rad = p_joint->bearing * PI / 180; //convert to radians
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc6e 	bl	8000598 <__aeabi_f2d>
 8001cbc:	a3c4      	add	r3, pc, #784	; (adr r3, 8001fd0 <joint_result_calculate_lat_lon+0x330>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fcc1 	bl	8000648 <__aeabi_dmul>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	4618      	mov	r0, r3
 8001ccc:	4621      	mov	r1, r4
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4bc2      	ldr	r3, [pc, #776]	; (8001fdc <joint_result_calculate_lat_lon+0x33c>)
 8001cd4:	f7fe fde2 	bl	800089c <__aeabi_ddiv>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	4621      	mov	r1, r4
 8001ce0:	f7fe ffaa 	bl	8000c38 <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	61bb      	str	r3, [r7, #24]
	float lat1 = p_joint->latitude * PI / 180; //convert to radians
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc53 	bl	8000598 <__aeabi_f2d>
 8001cf2:	a3b7      	add	r3, pc, #732	; (adr r3, 8001fd0 <joint_result_calculate_lat_lon+0x330>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fca6 	bl	8000648 <__aeabi_dmul>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4618      	mov	r0, r3
 8001d02:	4621      	mov	r1, r4
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	4bb4      	ldr	r3, [pc, #720]	; (8001fdc <joint_result_calculate_lat_lon+0x33c>)
 8001d0a:	f7fe fdc7 	bl	800089c <__aeabi_ddiv>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460c      	mov	r4, r1
 8001d12:	4618      	mov	r0, r3
 8001d14:	4621      	mov	r1, r4
 8001d16:	f7fe ff8f 	bl	8000c38 <__aeabi_d2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	617b      	str	r3, [r7, #20]
	float lon1 = p_joint->longitude * PI / 180; //convert to radians
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc38 	bl	8000598 <__aeabi_f2d>
 8001d28:	a3a9      	add	r3, pc, #676	; (adr r3, 8001fd0 <joint_result_calculate_lat_lon+0x330>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc8b 	bl	8000648 <__aeabi_dmul>
 8001d32:	4603      	mov	r3, r0
 8001d34:	460c      	mov	r4, r1
 8001d36:	4618      	mov	r0, r3
 8001d38:	4621      	mov	r1, r4
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4ba7      	ldr	r3, [pc, #668]	; (8001fdc <joint_result_calculate_lat_lon+0x33c>)
 8001d40:	f7fe fdac 	bl	800089c <__aeabi_ddiv>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f7fe ff74 	bl	8000c38 <__aeabi_d2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	613b      	str	r3, [r7, #16]

	float lat2 = asin(sin(lat1)*cos(p_joint->distance/R) + cos(lat1)*sin(p_joint->distance/R)*cos(bearing_rad));
 8001d54:	6978      	ldr	r0, [r7, #20]
 8001d56:	f7fe fc1f 	bl	8000598 <__aeabi_f2d>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	ec44 3b10 	vmov	d0, r3, r4
 8001d62:	f009 f985 	bl	800b070 <sin>
 8001d66:	ec55 4b10 	vmov	r4, r5, d0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d78:	ee16 0a90 	vmov	r0, s13
 8001d7c:	f7fe fc0c 	bl	8000598 <__aeabi_f2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	ec43 2b10 	vmov	d0, r2, r3
 8001d88:	f009 f92e 	bl	800afe8 <cos>
 8001d8c:	ec53 2b10 	vmov	r2, r3, d0
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fc58 	bl	8000648 <__aeabi_dmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	4625      	mov	r5, r4
 8001d9e:	461c      	mov	r4, r3
 8001da0:	6978      	ldr	r0, [r7, #20]
 8001da2:	f7fe fbf9 	bl	8000598 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ec43 2b10 	vmov	d0, r2, r3
 8001dae:	f009 f91b 	bl	800afe8 <cos>
 8001db2:	ec59 8b10 	vmov	r8, r9, d0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dc4:	ee16 0a90 	vmov	r0, s13
 8001dc8:	f7fe fbe6 	bl	8000598 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	ec43 2b10 	vmov	d0, r2, r3
 8001dd4:	f009 f94c 	bl	800b070 <sin>
 8001dd8:	ec53 2b10 	vmov	r2, r3, d0
 8001ddc:	4640      	mov	r0, r8
 8001dde:	4649      	mov	r1, r9
 8001de0:	f7fe fc32 	bl	8000648 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4690      	mov	r8, r2
 8001dea:	4699      	mov	r9, r3
 8001dec:	69b8      	ldr	r0, [r7, #24]
 8001dee:	f7fe fbd3 	bl	8000598 <__aeabi_f2d>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	ec43 2b10 	vmov	d0, r2, r3
 8001dfa:	f009 f8f5 	bl	800afe8 <cos>
 8001dfe:	ec53 2b10 	vmov	r2, r3, d0
 8001e02:	4640      	mov	r0, r8
 8001e04:	4649      	mov	r1, r9
 8001e06:	f7fe fc1f 	bl	8000648 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f7fe fa63 	bl	80002dc <__adddf3>
 8001e16:	4603      	mov	r3, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	ec44 3b17 	vmov	d7, r3, r4
 8001e1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e22:	eef0 0a67 	vmov.f32	s1, s15
 8001e26:	f009 f96b 	bl	800b100 <asin>
 8001e2a:	ec54 3b10 	vmov	r3, r4, d0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	4621      	mov	r1, r4
 8001e32:	f7fe ff01 	bl	8000c38 <__aeabi_d2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	60fb      	str	r3, [r7, #12]
	float lon2 = lon1 + atan2(sin(bearing_rad)*sin(p_joint->distance/R)*cos(lat1), cos(p_joint->distance/R)-sin(lat1)*sin(lat2));
 8001e3a:	6938      	ldr	r0, [r7, #16]
 8001e3c:	f7fe fbac 	bl	8000598 <__aeabi_f2d>
 8001e40:	4604      	mov	r4, r0
 8001e42:	460d      	mov	r5, r1
 8001e44:	69b8      	ldr	r0, [r7, #24]
 8001e46:	f7fe fba7 	bl	8000598 <__aeabi_f2d>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	ec43 2b10 	vmov	d0, r2, r3
 8001e52:	f009 f90d 	bl	800b070 <sin>
 8001e56:	ec59 8b10 	vmov	r8, r9, d0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e68:	ee16 0a90 	vmov	r0, s13
 8001e6c:	f7fe fb94 	bl	8000598 <__aeabi_f2d>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	ec43 2b10 	vmov	d0, r2, r3
 8001e78:	f009 f8fa 	bl	800b070 <sin>
 8001e7c:	ec53 2b10 	vmov	r2, r3, d0
 8001e80:	4640      	mov	r0, r8
 8001e82:	4649      	mov	r1, r9
 8001e84:	f7fe fbe0 	bl	8000648 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4690      	mov	r8, r2
 8001e8e:	4699      	mov	r9, r3
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7fe fb81 	bl	8000598 <__aeabi_f2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	ec43 2b10 	vmov	d0, r2, r3
 8001e9e:	f009 f8a3 	bl	800afe8 <cos>
 8001ea2:	ec53 2b10 	vmov	r2, r3, d0
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	f7fe fbcd 	bl	8000648 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	ec43 2b18 	vmov	d8, r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ebc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ec4:	ee16 0a90 	vmov	r0, s13
 8001ec8:	f7fe fb66 	bl	8000598 <__aeabi_f2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	ec43 2b10 	vmov	d0, r2, r3
 8001ed4:	f009 f888 	bl	800afe8 <cos>
 8001ed8:	ec59 8b10 	vmov	r8, r9, d0
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f7fe fb5b 	bl	8000598 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	ec43 2b10 	vmov	d0, r2, r3
 8001eea:	f009 f8c1 	bl	800b070 <sin>
 8001eee:	ec5b ab10 	vmov	sl, fp, d0
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7fe fb50 	bl	8000598 <__aeabi_f2d>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	ec43 2b10 	vmov	d0, r2, r3
 8001f00:	f009 f8b6 	bl	800b070 <sin>
 8001f04:	ec53 2b10 	vmov	r2, r3, d0
 8001f08:	4650      	mov	r0, sl
 8001f0a:	4659      	mov	r1, fp
 8001f0c:	f7fe fb9c 	bl	8000648 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f7fe f9de 	bl	80002d8 <__aeabi_dsub>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ec43 2b17 	vmov	d7, r2, r3
 8001f24:	eeb0 1a47 	vmov.f32	s2, s14
 8001f28:	eef0 1a67 	vmov.f32	s3, s15
 8001f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8001f30:	eef0 0a68 	vmov.f32	s1, s17
 8001f34:	f009 f93c 	bl	800b1b0 <atan2>
 8001f38:	ec53 2b10 	vmov	r2, r3, d0
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f7fe f9cc 	bl	80002dc <__adddf3>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	f7fe fe74 	bl	8000c38 <__aeabi_d2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	60bb      	str	r3, [r7, #8]

	lat2 = lat2 * 180 / PI; //convert to degrees
 8001f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001fe0 <joint_result_calculate_lat_lon+0x340>
 8001f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe fb18 	bl	8000598 <__aeabi_f2d>
 8001f68:	a319      	add	r3, pc, #100	; (adr r3, 8001fd0 <joint_result_calculate_lat_lon+0x330>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fc95 	bl	800089c <__aeabi_ddiv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	4618      	mov	r0, r3
 8001f78:	4621      	mov	r1, r4
 8001f7a:	f7fe fe5d 	bl	8000c38 <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60fb      	str	r3, [r7, #12]
	lon2 = lon2 * 180 / PI; //convert to degrees
 8001f82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f86:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001fe0 <joint_result_calculate_lat_lon+0x340>
 8001f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8e:	ee17 0a90 	vmov	r0, s15
 8001f92:	f7fe fb01 	bl	8000598 <__aeabi_f2d>
 8001f96:	a30e      	add	r3, pc, #56	; (adr r3, 8001fd0 <joint_result_calculate_lat_lon+0x330>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fc7e 	bl	800089c <__aeabi_ddiv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	f7fe fe46 	bl	8000c38 <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	60bb      	str	r3, [r7, #8]

	p_joint->latitude = lat2;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	601a      	str	r2, [r3, #0]
	p_joint->longitude = lon2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	605a      	str	r2, [r3, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	ecbd 8b02 	vpop	{d8}
 8001fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	f01b866e 	.word	0xf01b866e
 8001fd4:	400921f9 	.word	0x400921f9
 8001fd8:	4ac26d70 	.word	0x4ac26d70
 8001fdc:	40668000 	.word	0x40668000
 8001fe0:	43340000 	.word	0x43340000

08001fe4 <logging>:
#include "stdio.h"
#include "usart.h"
#include <string.h>

void logging()
{
 8001fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe8:	b08f      	sub	sp, #60	; 0x3c
 8001fea:	af0a      	add	r7, sp, #40	; 0x28

	uint8_t size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
			g.counter.tim4,g.acc_x.value_filtered, g.gyro_z.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 8001fec:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <logging+0x1c4>)
 8001fee:	f243 33bd 	movw	r3, #13245	; 0x33bd
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
	uint8_t size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8001ff6:	4698      	mov	r8, r3
			g.counter.tim4,g.acc_x.value_filtered, g.gyro_z.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 8001ff8:	4a6b      	ldr	r2, [pc, #428]	; (80021a8 <logging+0x1c4>)
 8001ffa:	f243 434c 	movw	r3, #13388	; 0x344c
 8001ffe:	4413      	add	r3, r2
 8002000:	681b      	ldr	r3, [r3, #0]
	uint8_t size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fac8 	bl	8000598 <__aeabi_f2d>
 8002008:	4604      	mov	r4, r0
 800200a:	460d      	mov	r5, r1
			g.counter.tim4,g.acc_x.value_filtered, g.gyro_z.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 800200c:	4a66      	ldr	r2, [pc, #408]	; (80021a8 <logging+0x1c4>)
 800200e:	f243 439c 	movw	r3, #13468	; 0x349c
 8002012:	4413      	add	r3, r2
 8002014:	681b      	ldr	r3, [r3, #0]
	uint8_t size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fabe 	bl	8000598 <__aeabi_f2d>
 800201c:	460a      	mov	r2, r1
 800201e:	4601      	mov	r1, r0
			g.counter.tim4,g.acc_x.value_filtered, g.gyro_z.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 8002020:	4861      	ldr	r0, [pc, #388]	; (80021a8 <logging+0x1c4>)
 8002022:	f243 33be 	movw	r3, #13246	; 0x33be
 8002026:	4403      	add	r3, r0
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800202e:	b2db      	uxtb	r3, r3
	uint8_t size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8002030:	461e      	mov	r6, r3
			g.counter.tim4,g.acc_x.value_filtered, g.gyro_z.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 8002032:	485d      	ldr	r0, [pc, #372]	; (80021a8 <logging+0x1c4>)
 8002034:	f243 33be 	movw	r3, #13246	; 0x33be
 8002038:	4403      	add	r3, r0
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002040:	b2db      	uxtb	r3, r3
	uint8_t size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8002042:	9305      	str	r3, [sp, #20]
 8002044:	9604      	str	r6, [sp, #16]
 8002046:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800204a:	e9cd 4500 	strd	r4, r5, [sp]
 800204e:	4643      	mov	r3, r8
 8002050:	4a56      	ldr	r2, [pc, #344]	; (80021ac <logging+0x1c8>)
 8002052:	21c8      	movs	r1, #200	; 0xc8
 8002054:	4856      	ldr	r0, [pc, #344]	; (80021b0 <logging+0x1cc>)
 8002056:	f006 f94d 	bl	80082f4 <sniprintf>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]

	//check snprintf error
	if(size > 0)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <logging+0x8e>
	{
		HAL_UART_Transmit(&huart7, (uint8_t *)g.buffer.uart7_tx, size, UART_TX_TIMEOUT);
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	b29a      	uxth	r2, r3
 8002068:	230a      	movs	r3, #10
 800206a:	4951      	ldr	r1, [pc, #324]	; (80021b0 <logging+0x1cc>)
 800206c:	4851      	ldr	r0, [pc, #324]	; (80021b4 <logging+0x1d0>)
 800206e:	f004 fc2d 	bl	80068cc <HAL_UART_Transmit>
	}

	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
					"%.8f;%.8f;%.4f;%.4f;%.4f;",
				g.gnss.lat, g.gnss.lon, g.gnss.kmh, g.gnss.m_s, g.gnss.bearing);
 8002072:	4a4d      	ldr	r2, [pc, #308]	; (80021a8 <logging+0x1c4>)
 8002074:	f243 33dc 	movw	r3, #13276	; 0x33dc
 8002078:	4413      	add	r3, r2
 800207a:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa8b 	bl	8000598 <__aeabi_f2d>
 8002082:	4682      	mov	sl, r0
 8002084:	468b      	mov	fp, r1
				g.gnss.lat, g.gnss.lon, g.gnss.kmh, g.gnss.m_s, g.gnss.bearing);
 8002086:	4a48      	ldr	r2, [pc, #288]	; (80021a8 <logging+0x1c4>)
 8002088:	f243 33d8 	movw	r3, #13272	; 0x33d8
 800208c:	4413      	add	r3, r2
 800208e:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa81 	bl	8000598 <__aeabi_f2d>
 8002096:	e9c7 0100 	strd	r0, r1, [r7]
 800209a:	4a43      	ldr	r2, [pc, #268]	; (80021a8 <logging+0x1c4>)
 800209c:	f243 4310 	movw	r3, #13328	; 0x3410
 80020a0:	4413      	add	r3, r2
 80020a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020a6:	4a40      	ldr	r2, [pc, #256]	; (80021a8 <logging+0x1c4>)
 80020a8:	f243 4318 	movw	r3, #13336	; 0x3418
 80020ac:	4413      	add	r3, r2
 80020ae:	e9d3 8900 	ldrd	r8, r9, [r3]
				g.gnss.lat, g.gnss.lon, g.gnss.kmh, g.gnss.m_s, g.gnss.bearing);
 80020b2:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <logging+0x1c4>)
 80020b4:	f243 33f8 	movw	r3, #13304	; 0x33f8
 80020b8:	4413      	add	r3, r2
 80020ba:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa6b 	bl	8000598 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80020ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80020ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80020d2:	ed97 7b00 	vldr	d7, [r7]
 80020d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80020da:	e9cd ab00 	strd	sl, fp, [sp]
 80020de:	4a36      	ldr	r2, [pc, #216]	; (80021b8 <logging+0x1d4>)
 80020e0:	21c8      	movs	r1, #200	; 0xc8
 80020e2:	4833      	ldr	r0, [pc, #204]	; (80021b0 <logging+0x1cc>)
 80020e4:	f006 f906 	bl	80082f4 <sniprintf>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73fb      	strb	r3, [r7, #15]

	if(size > 0)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <logging+0x11c>
	{
		HAL_UART_Transmit(&huart7, (uint8_t *)g.buffer.uart7_tx, size, UART_TX_TIMEOUT);
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	230a      	movs	r3, #10
 80020f8:	492d      	ldr	r1, [pc, #180]	; (80021b0 <logging+0x1cc>)
 80020fa:	482e      	ldr	r0, [pc, #184]	; (80021b4 <logging+0x1d0>)
 80020fc:	f004 fbe6 	bl	80068cc <HAL_UART_Transmit>
	}

	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
					"%.8f;%.8f;%.4f;%.4f;%.4f;\r\n",
				g.joint_result.latitude, g.joint_result.longitude, g.joint_result.velocity_kmh, g.joint_result.velocity_m_s, g.joint_result.bearing);
 8002100:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <logging+0x1c4>)
 8002102:	f243 4328 	movw	r3, #13352	; 0x3428
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa44 	bl	8000598 <__aeabi_f2d>
 8002110:	4604      	mov	r4, r0
 8002112:	460d      	mov	r5, r1
				g.joint_result.latitude, g.joint_result.longitude, g.joint_result.velocity_kmh, g.joint_result.velocity_m_s, g.joint_result.bearing);
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <logging+0x1c4>)
 8002116:	f243 432c 	movw	r3, #13356	; 0x342c
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa3a 	bl	8000598 <__aeabi_f2d>
 8002124:	4680      	mov	r8, r0
 8002126:	4689      	mov	r9, r1
				g.joint_result.latitude, g.joint_result.longitude, g.joint_result.velocity_kmh, g.joint_result.velocity_m_s, g.joint_result.bearing);
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <logging+0x1c4>)
 800212a:	f243 4338 	movw	r3, #13368	; 0x3438
 800212e:	4413      	add	r3, r2
 8002130:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa30 	bl	8000598 <__aeabi_f2d>
 8002138:	4682      	mov	sl, r0
 800213a:	468b      	mov	fp, r1
				g.joint_result.latitude, g.joint_result.longitude, g.joint_result.velocity_kmh, g.joint_result.velocity_m_s, g.joint_result.bearing);
 800213c:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <logging+0x1c4>)
 800213e:	f243 4334 	movw	r3, #13364	; 0x3434
 8002142:	4413      	add	r3, r2
 8002144:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa26 	bl	8000598 <__aeabi_f2d>
 800214c:	e9c7 0100 	strd	r0, r1, [r7]
				g.joint_result.latitude, g.joint_result.longitude, g.joint_result.velocity_kmh, g.joint_result.velocity_m_s, g.joint_result.bearing);
 8002150:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <logging+0x1c4>)
 8002152:	f243 4330 	movw	r3, #13360	; 0x3430
 8002156:	4413      	add	r3, r2
 8002158:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa1c 	bl	8000598 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002168:	ed97 7b00 	vldr	d7, [r7]
 800216c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002170:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002174:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002178:	e9cd 4500 	strd	r4, r5, [sp]
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <logging+0x1d8>)
 800217e:	21c8      	movs	r1, #200	; 0xc8
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <logging+0x1cc>)
 8002182:	f006 f8b7 	bl	80082f4 <sniprintf>
 8002186:	4603      	mov	r3, r0
 8002188:	73fb      	strb	r3, [r7, #15]

	if(size > 0)
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <logging+0x1ba>
	{
		HAL_UART_Transmit(&huart7, (uint8_t *)g.buffer.uart7_tx, size, UART_TX_TIMEOUT);
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	b29a      	uxth	r2, r3
 8002194:	230a      	movs	r3, #10
 8002196:	4906      	ldr	r1, [pc, #24]	; (80021b0 <logging+0x1cc>)
 8002198:	4806      	ldr	r0, [pc, #24]	; (80021b4 <logging+0x1d0>)
 800219a:	f004 fb97 	bl	80068cc <HAL_UART_Transmit>
	}

}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a8:	200030e8 	.word	0x200030e8
 80021ac:	0800da20 	.word	0x0800da20
 80021b0:	200063c3 	.word	0x200063c3
 80021b4:	200083c4 	.word	0x200083c4
 80021b8:	0800da34 	.word	0x0800da34
 80021bc:	0800da50 	.word	0x0800da50

080021c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c4:	f001 f94b 	bl	800345e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c8:	f000 f824 	bl	8002214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021cc:	f7ff f8e6 	bl	800139c <MX_GPIO_Init>
  MX_I2C3_Init();
 80021d0:	f7ff f962 	bl	8001498 <MX_I2C3_Init>
  MX_DMA_Init();
 80021d4:	f7fe ff00 	bl	8000fd8 <MX_DMA_Init>
  MX_UART4_Init();
 80021d8:	f001 f804 	bl	80031e4 <MX_UART4_Init>
  MX_TIM3_Init();
 80021dc:	f000 fd2a 	bl	8002c34 <MX_TIM3_Init>
  MX_UART7_Init();
 80021e0:	f001 f830 	bl	8003244 <MX_UART7_Init>
  MX_TIM4_Init();
 80021e4:	f000 fd74 	bl	8002cd0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

#ifdef UNIT
  unit_test();
 80021e8:	f000 fe04 	bl	8002df4 <unit_test>
#endif

  HAL_TIM_Base_Start_IT(&htim3);//period 10ms
 80021ec:	4807      	ldr	r0, [pc, #28]	; (800220c <main+0x4c>)
 80021ee:	f003 febf 	bl	8005f70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);//period 1s
 80021f2:	4807      	ldr	r0, [pc, #28]	; (8002210 <main+0x50>)
 80021f4:	f003 febc 	bl	8005f70 <HAL_TIM_Base_Start_IT>

  acc_init();
 80021f8:	f000 f938 	bl	800246c <acc_init>
  gnss_init();
 80021fc:	f000 fb0c 	bl	8002818 <gnss_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  gnss_handle();
 8002200:	f000 fb18 	bl	8002834 <gnss_handle>
	  acc_handle();
 8002204:	f000 f972 	bl	80024ec <acc_handle>
	  gnss_handle();
 8002208:	e7fa      	b.n	8002200 <main+0x40>
 800220a:	bf00      	nop
 800220c:	200082a0 	.word	0x200082a0
 8002210:	20008254 	.word	0x20008254

08002214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b0b4      	sub	sp, #208	; 0xd0
 8002218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800221e:	2230      	movs	r2, #48	; 0x30
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f005 fc02 	bl	8007a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002228:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f005 fbf3 	bl	8007a2c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <SystemClock_Config+0x120>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a3a      	ldr	r2, [pc, #232]	; (8002334 <SystemClock_Config+0x120>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <SystemClock_Config+0x120>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <SystemClock_Config+0x124>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a35      	ldr	r2, [pc, #212]	; (8002338 <SystemClock_Config+0x124>)
 8002264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <SystemClock_Config+0x124>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002276:	2301      	movs	r3, #1
 8002278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800227c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002284:	2302      	movs	r3, #2
 8002286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800228a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800228e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002292:	2308      	movs	r3, #8
 8002294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002298:	23d8      	movs	r3, #216	; 0xd8
 800229a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800229e:	2302      	movs	r3, #2
 80022a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fe22 	bl	8004ef8 <HAL_RCC_OscConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80022ba:	f000 fb7b 	bl	80029b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022be:	f002 fdcb 	bl	8004e58 <HAL_PWREx_EnableOverDrive>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80022c8:	f000 fb74 	bl	80029b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022cc:	230f      	movs	r3, #15
 80022ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80022f2:	2107      	movs	r1, #7
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 f8a3 	bl	8005440 <HAL_RCC_ClockConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002300:	f000 fb58 	bl	80029b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 8002304:	f44f 3389 	mov.w	r3, #70144	; 0x11200
 8002308:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800230a:	2300      	movs	r3, #0
 800230c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800230e:	2300      	movs	r3, #0
 8002310:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002312:	2300      	movs	r3, #0
 8002314:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fa86 	bl	800582c <HAL_RCCEx_PeriphCLKConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002326:	f000 fb45 	bl	80029b4 <Error_Handler>
  }
}
 800232a:	bf00      	nop
 800232c:	37d0      	adds	r7, #208	; 0xd0
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000

0800233c <HAL_UART_ErrorCallback>:
//	  g_flag.uart4_rx = 1;
//  }
//}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_UART_ErrorCallback+0x48>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d115      	bne.n	800237a <HAL_UART_ErrorCallback+0x3e>
	{
		g.counter.uart4_error++;
 800234e:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_UART_ErrorCallback+0x4c>)
 8002350:	f243 33ba 	movw	r3, #13242	; 0x33ba
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	b2d9      	uxtb	r1, r3
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_UART_ErrorCallback+0x4c>)
 800235e:	f243 33ba 	movw	r3, #13242	; 0x33ba
 8002362:	4413      	add	r3, r2
 8002364:	460a      	mov	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive(&huart4);
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <HAL_UART_ErrorCallback+0x50>)
 800236a:	f004 fb7f 	bl	8006a6c <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart4, (uint8_t *)g.buffer.uart4_rx, UART4_RX_SIZE);
 800236e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002372:	4907      	ldr	r1, [pc, #28]	; (8002390 <HAL_UART_ErrorCallback+0x54>)
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <HAL_UART_ErrorCallback+0x50>)
 8002376:	f004 fb3c 	bl	80069f2 <HAL_UART_Receive_DMA>
	}
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40004c00 	.word	0x40004c00
 8002388:	200030e8 	.word	0x200030e8
 800238c:	20008448 	.word	0x20008448
 8002390:	20005fc8 	.word	0x20005fc8

08002394 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
  HAL_UART_AbortReceive(&huart4);
 800239e:	480e      	ldr	r0, [pc, #56]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80023a0:	f004 fb64 	bl	8006a6c <HAL_UART_AbortReceive>
  g.counter.pps++;
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <HAL_GPIO_EXTI_Callback+0x48>)
 80023a6:	f243 33bb 	movw	r3, #13243	; 0x33bb
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	b2d9      	uxtb	r1, r3
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_GPIO_EXTI_Callback+0x48>)
 80023b4:	f243 33bb 	movw	r3, #13243	; 0x33bb
 80023b8:	4413      	add	r3, r2
 80023ba:	460a      	mov	r2, r1
 80023bc:	701a      	strb	r2, [r3, #0]
  g.flag.uart4_rx_interrupt = TRUE;
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <HAL_GPIO_EXTI_Callback+0x48>)
 80023c0:	f243 33be 	movw	r3, #13246	; 0x33be
 80023c4:	4413      	add	r3, r2
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
//  if(0x0400 != GPIO_Pin)
//  {
//	  uint8_t breakpoint = 0;
//  }
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20008448 	.word	0x20008448
 80023dc:	200030e8 	.word	0x200030e8

080023e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d115      	bne.n	800241e <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	  g.flag.tim3_interrupt = TRUE;
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80023f4:	f243 33be 	movw	r3, #13246	; 0x33be
 80023f8:	4413      	add	r3, r2
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	f042 0210 	orr.w	r2, r2, #16
 8002400:	701a      	strb	r2, [r3, #0]
	  g.counter.tim3++;
 8002402:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002404:	f243 33bc 	movw	r3, #13244	; 0x33bc
 8002408:	4413      	add	r3, r2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	b2d9      	uxtb	r1, r3
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002412:	f243 33bc 	movw	r3, #13244	; 0x33bc
 8002416:	4413      	add	r3, r2
 8002418:	460a      	mov	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
  else if (htim->Instance == TIM4)
  {
	  g.flag.tim4_interrupt = TRUE;
	  g.counter.tim4++;
  }
}
 800241c:	e019      	b.n	8002452 <HAL_TIM_PeriodElapsedCallback+0x72>
  else if (htim->Instance == TIM4)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d114      	bne.n	8002452 <HAL_TIM_PeriodElapsedCallback+0x72>
	  g.flag.tim4_interrupt = TRUE;
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800242a:	f243 33be 	movw	r3, #13246	; 0x33be
 800242e:	4413      	add	r3, r2
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	701a      	strb	r2, [r3, #0]
	  g.counter.tim4++;
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800243a:	f243 33bd 	movw	r3, #13245	; 0x33bd
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	b2d9      	uxtb	r1, r3
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002448:	f243 33bd 	movw	r3, #13245	; 0x33bd
 800244c:	4413      	add	r3, r2
 800244e:	460a      	mov	r2, r1
 8002450:	701a      	strb	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40000400 	.word	0x40000400
 8002464:	200030e8 	.word	0x200030e8
 8002468:	40000800 	.word	0x40000800

0800246c <acc_init>:

void acc_init()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	//wait for 5s before calibration
	while(g.counter.tim4 < 4)
 8002472:	e001      	b.n	8002478 <acc_init+0xc>
	{
		uint8_t i = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	71fb      	strb	r3, [r7, #7]
	while(g.counter.tim4 < 4)
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <acc_init+0x64>)
 800247a:	f243 33bd 	movw	r3, #13245	; 0x33bd
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d9f6      	bls.n	8002474 <acc_init+0x8>
	}

	imu_init_acc();
 8002486:	f7ff f8ab 	bl	80015e0 <imu_init_acc>

	moving_average_filter_reset(&g.filter_acc_x, FILTER_SIZE_CALIBRATION);
 800248a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800248e:	4811      	ldr	r0, [pc, #68]	; (80024d4 <acc_init+0x68>)
 8002490:	f000 faed 	bl	8002a6e <moving_average_filter_reset>
	moving_average_filter_reset(&g.filter_acc_y, FILTER_SIZE_CALIBRATION);
 8002494:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002498:	480f      	ldr	r0, [pc, #60]	; (80024d8 <acc_init+0x6c>)
 800249a:	f000 fae8 	bl	8002a6e <moving_average_filter_reset>
	moving_average_filter_reset(&g.filter_acc_z, FILTER_SIZE_CALIBRATION);
 800249e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024a2:	480e      	ldr	r0, [pc, #56]	; (80024dc <acc_init+0x70>)
 80024a4:	f000 fae3 	bl	8002a6e <moving_average_filter_reset>

	moving_average_filter_reset(&g.filter_gyro_x, FILTER_SIZE_CALIBRATION);
 80024a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <acc_init+0x74>)
 80024ae:	f000 fade 	bl	8002a6e <moving_average_filter_reset>
	moving_average_filter_reset(&g.filter_gyro_y, FILTER_SIZE_CALIBRATION);
 80024b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024b6:	480b      	ldr	r0, [pc, #44]	; (80024e4 <acc_init+0x78>)
 80024b8:	f000 fad9 	bl	8002a6e <moving_average_filter_reset>
	moving_average_filter_reset(&g.filter_gyro_z, FILTER_SIZE_CALIBRATION);
 80024bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024c0:	4809      	ldr	r0, [pc, #36]	; (80024e8 <acc_init+0x7c>)
 80024c2:	f000 fad4 	bl	8002a6e <moving_average_filter_reset>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200030e8 	.word	0x200030e8
 80024d4:	20006588 	.word	0x20006588
 80024d8:	20006a48 	.word	0x20006a48
 80024dc:	20006f08 	.word	0x20006f08
 80024e0:	200073c8 	.word	0x200073c8
 80024e4:	20007888 	.word	0x20007888
 80024e8:	20007d48 	.word	0x20007d48

080024ec <acc_handle>:

void acc_handle()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0

  if(TRUE == g.flag.tim3_interrupt)
 80024f0:	4ab7      	ldr	r2, [pc, #732]	; (80027d0 <acc_handle+0x2e4>)
 80024f2:	f243 33be 	movw	r3, #13246	; 0x33be
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8162 	beq.w	80027ca <acc_handle+0x2de>
  {
	  imu_read_acc(&g.acc_x, &g.acc_y, &g.acc_z);
 8002506:	4ab3      	ldr	r2, [pc, #716]	; (80027d4 <acc_handle+0x2e8>)
 8002508:	49b3      	ldr	r1, [pc, #716]	; (80027d8 <acc_handle+0x2ec>)
 800250a:	48b4      	ldr	r0, [pc, #720]	; (80027dc <acc_handle+0x2f0>)
 800250c:	f7ff f928 	bl	8001760 <imu_read_acc>
	  imu_read_gyro(&g.gyro_x, &g.gyro_y, &g.gyro_z);
 8002510:	4ab3      	ldr	r2, [pc, #716]	; (80027e0 <acc_handle+0x2f4>)
 8002512:	49b4      	ldr	r1, [pc, #720]	; (80027e4 <acc_handle+0x2f8>)
 8002514:	48b4      	ldr	r0, [pc, #720]	; (80027e8 <acc_handle+0x2fc>)
 8002516:	f7ff f9af 	bl	8001878 <imu_read_gyro>

	  moving_average_filter_update_float(&g.filter_acc_x, g.acc_x.value);
 800251a:	4aad      	ldr	r2, [pc, #692]	; (80027d0 <acc_handle+0x2e4>)
 800251c:	f243 4344 	movw	r3, #13380	; 0x3444
 8002520:	4413      	add	r3, r2
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	eeb0 0a67 	vmov.f32	s0, s15
 800252a:	48b0      	ldr	r0, [pc, #704]	; (80027ec <acc_handle+0x300>)
 800252c:	f000 fa46 	bl	80029bc <moving_average_filter_update_float>
	  moving_average_filter_update_float(&g.filter_acc_y, g.acc_y.value);
 8002530:	4aa7      	ldr	r2, [pc, #668]	; (80027d0 <acc_handle+0x2e4>)
 8002532:	f243 4354 	movw	r3, #13396	; 0x3454
 8002536:	4413      	add	r3, r2
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	48ab      	ldr	r0, [pc, #684]	; (80027f0 <acc_handle+0x304>)
 8002542:	f000 fa3b 	bl	80029bc <moving_average_filter_update_float>
	  moving_average_filter_update_float(&g.filter_acc_z, g.acc_z.value);
 8002546:	4aa2      	ldr	r2, [pc, #648]	; (80027d0 <acc_handle+0x2e4>)
 8002548:	f243 4364 	movw	r3, #13412	; 0x3464
 800254c:	4413      	add	r3, r2
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb0 0a67 	vmov.f32	s0, s15
 8002556:	48a7      	ldr	r0, [pc, #668]	; (80027f4 <acc_handle+0x308>)
 8002558:	f000 fa30 	bl	80029bc <moving_average_filter_update_float>

	  moving_average_filter_update_float(&g.filter_gyro_x, g.gyro_x.value);
 800255c:	4a9c      	ldr	r2, [pc, #624]	; (80027d0 <acc_handle+0x2e4>)
 800255e:	f243 4374 	movw	r3, #13428	; 0x3474
 8002562:	4413      	add	r3, r2
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	eeb0 0a67 	vmov.f32	s0, s15
 800256c:	48a2      	ldr	r0, [pc, #648]	; (80027f8 <acc_handle+0x30c>)
 800256e:	f000 fa25 	bl	80029bc <moving_average_filter_update_float>
	  moving_average_filter_update_float(&g.filter_gyro_y, g.gyro_y.value);
 8002572:	4a97      	ldr	r2, [pc, #604]	; (80027d0 <acc_handle+0x2e4>)
 8002574:	f243 4384 	movw	r3, #13444	; 0x3484
 8002578:	4413      	add	r3, r2
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	eeb0 0a67 	vmov.f32	s0, s15
 8002582:	489e      	ldr	r0, [pc, #632]	; (80027fc <acc_handle+0x310>)
 8002584:	f000 fa1a 	bl	80029bc <moving_average_filter_update_float>
	  moving_average_filter_update_float(&g.filter_gyro_z, g.gyro_z.value);
 8002588:	4a91      	ldr	r2, [pc, #580]	; (80027d0 <acc_handle+0x2e4>)
 800258a:	f243 4394 	movw	r3, #13460	; 0x3494
 800258e:	4413      	add	r3, r2
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	eeb0 0a67 	vmov.f32	s0, s15
 8002598:	4899      	ldr	r0, [pc, #612]	; (8002800 <acc_handle+0x314>)
 800259a:	f000 fa0f 	bl	80029bc <moving_average_filter_update_float>

	  g.acc_x.value_filtered = g.filter_acc_x.value;
 800259e:	4a8c      	ldr	r2, [pc, #560]	; (80027d0 <acc_handle+0x2e4>)
 80025a0:	f243 43a0 	movw	r3, #13472	; 0x34a0
 80025a4:	4413      	add	r3, r2
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4989      	ldr	r1, [pc, #548]	; (80027d0 <acc_handle+0x2e4>)
 80025aa:	f243 434c 	movw	r3, #13388	; 0x344c
 80025ae:	440b      	add	r3, r1
 80025b0:	601a      	str	r2, [r3, #0]
	  g.acc_y.value_filtered = g.filter_acc_y.value;
 80025b2:	4a87      	ldr	r2, [pc, #540]	; (80027d0 <acc_handle+0x2e4>)
 80025b4:	f643 1360 	movw	r3, #14688	; 0x3960
 80025b8:	4413      	add	r3, r2
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4984      	ldr	r1, [pc, #528]	; (80027d0 <acc_handle+0x2e4>)
 80025be:	f243 435c 	movw	r3, #13404	; 0x345c
 80025c2:	440b      	add	r3, r1
 80025c4:	601a      	str	r2, [r3, #0]
	  g.acc_z.value_filtered = g.filter_acc_z.value;
 80025c6:	4a82      	ldr	r2, [pc, #520]	; (80027d0 <acc_handle+0x2e4>)
 80025c8:	f643 6320 	movw	r3, #15904	; 0x3e20
 80025cc:	4413      	add	r3, r2
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	497f      	ldr	r1, [pc, #508]	; (80027d0 <acc_handle+0x2e4>)
 80025d2:	f243 436c 	movw	r3, #13420	; 0x346c
 80025d6:	440b      	add	r3, r1
 80025d8:	601a      	str	r2, [r3, #0]

	  g.gyro_x.value_filtered = g.filter_gyro_x.value;
 80025da:	4a7d      	ldr	r2, [pc, #500]	; (80027d0 <acc_handle+0x2e4>)
 80025dc:	f244 23e0 	movw	r3, #17120	; 0x42e0
 80025e0:	4413      	add	r3, r2
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	497a      	ldr	r1, [pc, #488]	; (80027d0 <acc_handle+0x2e4>)
 80025e6:	f243 437c 	movw	r3, #13436	; 0x347c
 80025ea:	440b      	add	r3, r1
 80025ec:	601a      	str	r2, [r3, #0]
	  g.gyro_y.value_filtered = g.filter_gyro_y.value;
 80025ee:	4a78      	ldr	r2, [pc, #480]	; (80027d0 <acc_handle+0x2e4>)
 80025f0:	f244 73a0 	movw	r3, #18336	; 0x47a0
 80025f4:	4413      	add	r3, r2
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4975      	ldr	r1, [pc, #468]	; (80027d0 <acc_handle+0x2e4>)
 80025fa:	f243 438c 	movw	r3, #13452	; 0x348c
 80025fe:	440b      	add	r3, r1
 8002600:	601a      	str	r2, [r3, #0]
	  g.gyro_z.value_filtered = g.filter_gyro_z.value;
 8002602:	4a73      	ldr	r2, [pc, #460]	; (80027d0 <acc_handle+0x2e4>)
 8002604:	f644 4360 	movw	r3, #19552	; 0x4c60
 8002608:	4413      	add	r3, r2
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4970      	ldr	r1, [pc, #448]	; (80027d0 <acc_handle+0x2e4>)
 800260e:	f243 439c 	movw	r3, #13468	; 0x349c
 8002612:	440b      	add	r3, r1
 8002614:	601a      	str	r2, [r3, #0]

	  if(g.filter_acc_x.buf_size >= FILTER_SIZE_CALIBRATION || g.flag.acc_calibrated == 1)
 8002616:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <acc_handle+0x2e4>)
 8002618:	f643 135c 	movw	r3, #14684	; 0x395c
 800261c:	4413      	add	r3, r2
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002624:	d20a      	bcs.n	800263c <acc_handle+0x150>
 8002626:	4a6a      	ldr	r2, [pc, #424]	; (80027d0 <acc_handle+0x2e4>)
 8002628:	f243 33be 	movw	r3, #13246	; 0x33be
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80bf 	beq.w	80027ba <acc_handle+0x2ce>
	  {
		  if(g.flag.acc_calibrated == 0)
 800263c:	4a64      	ldr	r2, [pc, #400]	; (80027d0 <acc_handle+0x2e4>)
 800263e:	f243 33be 	movw	r3, #13246	; 0x33be
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d144      	bne.n	80026da <acc_handle+0x1ee>
		  {
			  imu_calibrate_acc(&g.acc_x, &g.acc_y, &g.acc_z);
 8002650:	4a60      	ldr	r2, [pc, #384]	; (80027d4 <acc_handle+0x2e8>)
 8002652:	4961      	ldr	r1, [pc, #388]	; (80027d8 <acc_handle+0x2ec>)
 8002654:	4861      	ldr	r0, [pc, #388]	; (80027dc <acc_handle+0x2f0>)
 8002656:	f7ff f83b 	bl	80016d0 <imu_calibrate_acc>
			  imu_calibrate_gyro(&g.gyro_x, &g.gyro_y, &g.gyro_z);
 800265a:	4a61      	ldr	r2, [pc, #388]	; (80027e0 <acc_handle+0x2f4>)
 800265c:	4961      	ldr	r1, [pc, #388]	; (80027e4 <acc_handle+0x2f8>)
 800265e:	4862      	ldr	r0, [pc, #392]	; (80027e8 <acc_handle+0x2fc>)
 8002660:	f7ff f85a 	bl	8001718 <imu_calibrate_gyro>

			  moving_average_filter_reset(&g.filter_acc_x, FILTER_SIZE);
 8002664:	2164      	movs	r1, #100	; 0x64
 8002666:	4861      	ldr	r0, [pc, #388]	; (80027ec <acc_handle+0x300>)
 8002668:	f000 fa01 	bl	8002a6e <moving_average_filter_reset>
			  moving_average_filter_reset(&g.filter_acc_y, FILTER_SIZE);
 800266c:	2164      	movs	r1, #100	; 0x64
 800266e:	4860      	ldr	r0, [pc, #384]	; (80027f0 <acc_handle+0x304>)
 8002670:	f000 f9fd 	bl	8002a6e <moving_average_filter_reset>
			  moving_average_filter_reset(&g.filter_acc_z, FILTER_SIZE);
 8002674:	2164      	movs	r1, #100	; 0x64
 8002676:	485f      	ldr	r0, [pc, #380]	; (80027f4 <acc_handle+0x308>)
 8002678:	f000 f9f9 	bl	8002a6e <moving_average_filter_reset>

			  imu_read_acc(&g.acc_x, &g.acc_y, &g.acc_z);
 800267c:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <acc_handle+0x2e8>)
 800267e:	4956      	ldr	r1, [pc, #344]	; (80027d8 <acc_handle+0x2ec>)
 8002680:	4856      	ldr	r0, [pc, #344]	; (80027dc <acc_handle+0x2f0>)
 8002682:	f7ff f86d 	bl	8001760 <imu_read_acc>
			  imu_read_gyro(&g.gyro_x, &g.gyro_y, &g.gyro_z);
 8002686:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <acc_handle+0x2f4>)
 8002688:	4956      	ldr	r1, [pc, #344]	; (80027e4 <acc_handle+0x2f8>)
 800268a:	4857      	ldr	r0, [pc, #348]	; (80027e8 <acc_handle+0x2fc>)
 800268c:	f7ff f8f4 	bl	8001878 <imu_read_gyro>

			  g.flag.acc_calibrated = 1;
 8002690:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <acc_handle+0x2e4>)
 8002692:	f243 33be 	movw	r3, #13246	; 0x33be
 8002696:	4413      	add	r3, r2
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	f042 0204 	orr.w	r2, r2, #4
 800269e:	701a      	strb	r2, [r3, #0]

			  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80026a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026a4:	4857      	ldr	r0, [pc, #348]	; (8002804 <acc_handle+0x318>)
 80026a6:	f001 fe32 	bl	800430e <HAL_GPIO_TogglePin>
			  HAL_Delay(250);
 80026aa:	20fa      	movs	r0, #250	; 0xfa
 80026ac:	f000 ff34 	bl	8003518 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80026b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026b4:	4853      	ldr	r0, [pc, #332]	; (8002804 <acc_handle+0x318>)
 80026b6:	f001 fe2a 	bl	800430e <HAL_GPIO_TogglePin>
			  HAL_Delay(250);
 80026ba:	20fa      	movs	r0, #250	; 0xfa
 80026bc:	f000 ff2c 	bl	8003518 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80026c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c4:	484f      	ldr	r0, [pc, #316]	; (8002804 <acc_handle+0x318>)
 80026c6:	f001 fe22 	bl	800430e <HAL_GPIO_TogglePin>
			  HAL_Delay(250);
 80026ca:	20fa      	movs	r0, #250	; 0xfa
 80026cc:	f000 ff24 	bl	8003518 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80026d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026d4:	484b      	ldr	r0, [pc, #300]	; (8002804 <acc_handle+0x318>)
 80026d6:	f001 fe1a 	bl	800430e <HAL_GPIO_TogglePin>
		  }

		  g.ins.acceleration_2d = ins_calculate_2d_acceleration(g.acc_x.value_filtered, g.acc_y.value_filtered);
 80026da:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <acc_handle+0x2e4>)
 80026dc:	f243 434c 	movw	r3, #13388	; 0x344c
 80026e0:	4413      	add	r3, r2
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <acc_handle+0x2e4>)
 80026e8:	f243 435c 	movw	r3, #13404	; 0x345c
 80026ec:	4413      	add	r3, r2
 80026ee:	ed93 7a00 	vldr	s14, [r3]
 80026f2:	eef0 0a47 	vmov.f32	s1, s14
 80026f6:	eeb0 0a67 	vmov.f32	s0, s15
 80026fa:	f7ff f9f5 	bl	8001ae8 <ins_calculate_2d_acceleration>
 80026fe:	eef0 7a40 	vmov.f32	s15, s0
 8002702:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <acc_handle+0x2e4>)
 8002704:	f243 33c8 	movw	r3, #13256	; 0x33c8
 8002708:	4413      	add	r3, r2
 800270a:	edc3 7a00 	vstr	s15, [r3]
		  g.ins.acceleration_3d = ins_calculate_3d_acceleration(g.acc_x.value_filtered, g.acc_y.value_filtered, g.acc_z.value_filtered);
 800270e:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <acc_handle+0x2e4>)
 8002710:	f243 434c 	movw	r3, #13388	; 0x344c
 8002714:	4413      	add	r3, r2
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <acc_handle+0x2e4>)
 800271c:	f243 435c 	movw	r3, #13404	; 0x345c
 8002720:	4413      	add	r3, r2
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <acc_handle+0x2e4>)
 8002728:	f243 436c 	movw	r3, #13420	; 0x346c
 800272c:	4413      	add	r3, r2
 800272e:	edd3 6a00 	vldr	s13, [r3]
 8002732:	eeb0 1a66 	vmov.f32	s2, s13
 8002736:	eef0 0a47 	vmov.f32	s1, s14
 800273a:	eeb0 0a67 	vmov.f32	s0, s15
 800273e:	f7ff fa0f 	bl	8001b60 <ins_calculate_3d_acceleration>
 8002742:	eef0 7a40 	vmov.f32	s15, s0
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <acc_handle+0x2e4>)
 8002748:	f243 33cc 	movw	r3, #13260	; 0x33cc
 800274c:	4413      	add	r3, r2
 800274e:	edc3 7a00 	vstr	s15, [r3]

		  g.ins.velocity_m_s = ins_calculate_velocity(&g.ins.velocity_initial, g.ins.acceleration_3d, ACC_SAMPLE_PERIOD);
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <acc_handle+0x2e4>)
 8002754:	f243 33cc 	movw	r3, #13260	; 0x33cc
 8002758:	4413      	add	r3, r2
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8002808 <acc_handle+0x31c>
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	4829      	ldr	r0, [pc, #164]	; (800280c <acc_handle+0x320>)
 8002768:	f7ff fa5e 	bl	8001c28 <ins_calculate_velocity>
 800276c:	eef0 7a40 	vmov.f32	s15, s0
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <acc_handle+0x2e4>)
 8002772:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8002776:	edc3 7a00 	vstr	s15, [r3]
		  g.ins.velocity_km_h = g.ins.velocity_m_s * 3600 / 1000;
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <acc_handle+0x2e4>)
 800277c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002810 <acc_handle+0x324>
 8002788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800278c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002814 <acc_handle+0x328>
 8002790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <acc_handle+0x2e4>)
 8002796:	f243 33c4 	movw	r3, #13252	; 0x33c4
 800279a:	4413      	add	r3, r2
 800279c:	edc3 7a00 	vstr	s15, [r3]

		  g.counter.acc_read++;
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <acc_handle+0x2e4>)
 80027a2:	f243 33b7 	movw	r3, #13239	; 0x33b7
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	b2d9      	uxtb	r1, r3
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <acc_handle+0x2e4>)
 80027b0:	f243 33b7 	movw	r3, #13239	; 0x33b7
 80027b4:	4413      	add	r3, r2
 80027b6:	460a      	mov	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
	  }

	  g.flag.tim3_interrupt = FALSE;
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <acc_handle+0x2e4>)
 80027bc:	f243 33be 	movw	r3, #13246	; 0x33be
 80027c0:	4413      	add	r3, r2
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	f36f 1204 	bfc	r2, #4, #1
 80027c8:	701a      	strb	r2, [r3, #0]
  }
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200030e8 	.word	0x200030e8
 80027d4:	20006548 	.word	0x20006548
 80027d8:	20006538 	.word	0x20006538
 80027dc:	20006528 	.word	0x20006528
 80027e0:	20006578 	.word	0x20006578
 80027e4:	20006568 	.word	0x20006568
 80027e8:	20006558 	.word	0x20006558
 80027ec:	20006588 	.word	0x20006588
 80027f0:	20006a48 	.word	0x20006a48
 80027f4:	20006f08 	.word	0x20006f08
 80027f8:	200073c8 	.word	0x200073c8
 80027fc:	20007888 	.word	0x20007888
 8002800:	20007d48 	.word	0x20007d48
 8002804:	40020000 	.word	0x40020000
 8002808:	3a83126f 	.word	0x3a83126f
 800280c:	200064b8 	.word	0x200064b8
 8002810:	45610000 	.word	0x45610000
 8002814:	447a0000 	.word	0x447a0000

08002818 <gnss_init>:

void gnss_init()
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
//	strncpy(uart4_tx_buffer, SET_NMEA_BAUDRATE_115200, 15);
//	strcpy(uart4_tx_buffer[15], "*");
//
//	L76X_Send_Command((uint8_t *)uart4_tx_buffer);
//
	HAL_UART_Receive_DMA(&huart4, (uint8_t *)g.buffer.uart4_rx, UART4_RX_SIZE);
 800281c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002820:	4902      	ldr	r1, [pc, #8]	; (800282c <gnss_init+0x14>)
 8002822:	4803      	ldr	r0, [pc, #12]	; (8002830 <gnss_init+0x18>)
 8002824:	f004 f8e5 	bl	80069f2 <HAL_UART_Receive_DMA>

	#ifdef GNSS_TEST
	  L76X_parse_GNRMC(buff_t, BUFFSIZE);
	#endif
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20005fc8 	.word	0x20005fc8
 8002830:	20008448 	.word	0x20008448

08002834 <gnss_handle>:

void gnss_handle()
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  if(TRUE == g.flag.uart4_rx_interrupt)
 8002838:	4a54      	ldr	r2, [pc, #336]	; (800298c <gnss_handle+0x158>)
 800283a:	f243 33be 	movw	r3, #13246	; 0x33be
 800283e:	4413      	add	r3, r2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 809d 	beq.w	8002988 <gnss_handle+0x154>
  {
//		  GNRMC gnss_result;
//		  gnss_result = L76X_Gat_GNRMC();

	#ifndef GNSS_TEST
	  gnss_parse_GNRMC(g.buffer.uart4_rx, UART4_RX_SIZE);
 800284e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002852:	484f      	ldr	r0, [pc, #316]	; (8002990 <gnss_handle+0x15c>)
 8002854:	f7fe fbe0 	bl	8001018 <gnss_parse_GNRMC>
	#endif

//	  g.flag.gnss_initiated = TRUE;
	  g.counter.gnss_parse++;
 8002858:	4a4c      	ldr	r2, [pc, #304]	; (800298c <gnss_handle+0x158>)
 800285a:	f243 33b8 	movw	r3, #13240	; 0x33b8
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	b2d9      	uxtb	r1, r3
 8002866:	4a49      	ldr	r2, [pc, #292]	; (800298c <gnss_handle+0x158>)
 8002868:	f243 33b8 	movw	r3, #13240	; 0x33b8
 800286c:	4413      	add	r3, r2
 800286e:	460a      	mov	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]

	  if(g.counter.gnss_parse % 10 == 0 && g.counter.test_ins == 0)
 8002872:	4a46      	ldr	r2, [pc, #280]	; (800298c <gnss_handle+0x158>)
 8002874:	f243 33b8 	movw	r3, #13240	; 0x33b8
 8002878:	4413      	add	r3, r2
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	4b45      	ldr	r3, [pc, #276]	; (8002994 <gnss_handle+0x160>)
 800287e:	fba3 1302 	umull	r1, r3, r3, r2
 8002882:	08d9      	lsrs	r1, r3, #3
 8002884:	460b      	mov	r3, r1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10c      	bne.n	80028ae <gnss_handle+0x7a>
 8002894:	4a3d      	ldr	r2, [pc, #244]	; (800298c <gnss_handle+0x158>)
 8002896:	f243 33b9 	movw	r3, #13241	; 0x33b9
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <gnss_handle+0x7a>
	  {
		  g.counter.test_ins = 5;
 80028a2:	4a3a      	ldr	r2, [pc, #232]	; (800298c <gnss_handle+0x158>)
 80028a4:	f243 33b9 	movw	r3, #13241	; 0x33b9
 80028a8:	4413      	add	r3, r2
 80028aa:	2205      	movs	r2, #5
 80028ac:	701a      	strb	r2, [r3, #0]
	  }

	  if(g.counter.test_ins > 0)
 80028ae:	4a37      	ldr	r2, [pc, #220]	; (800298c <gnss_handle+0x158>)
 80028b0:	f243 33b9 	movw	r3, #13241	; 0x33b9
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <gnss_handle+0xb4>
	  {
		  g.flag.gnss_active = FALSE;
 80028bc:	4a33      	ldr	r2, [pc, #204]	; (800298c <gnss_handle+0x158>)
 80028be:	f243 33be 	movw	r3, #13246	; 0x33be
 80028c2:	4413      	add	r3, r2
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	f36f 1286 	bfc	r2, #6, #1
 80028ca:	701a      	strb	r2, [r3, #0]
		  g.counter.test_ins--;
 80028cc:	4a2f      	ldr	r2, [pc, #188]	; (800298c <gnss_handle+0x158>)
 80028ce:	f243 33b9 	movw	r3, #13241	; 0x33b9
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b2d9      	uxtb	r1, r3
 80028da:	4a2c      	ldr	r2, [pc, #176]	; (800298c <gnss_handle+0x158>)
 80028dc:	f243 33b9 	movw	r3, #13241	; 0x33b9
 80028e0:	4413      	add	r3, r2
 80028e2:	460a      	mov	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e007      	b.n	80028f8 <gnss_handle+0xc4>
	  }
	  else
	  {
		  g.flag.gnss_active = TRUE;
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <gnss_handle+0x158>)
 80028ea:	f243 33be 	movw	r3, #13246	; 0x33be
 80028ee:	4413      	add	r3, r2
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f6:	701a      	strb	r2, [r3, #0]
	  }

	  joint_result_calculate_bearing(&g.joint_result, &g.gnss, &g.acc_x, &g.gyro_z);
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <gnss_handle+0x164>)
 80028fa:	4a28      	ldr	r2, [pc, #160]	; (800299c <gnss_handle+0x168>)
 80028fc:	4928      	ldr	r1, [pc, #160]	; (80029a0 <gnss_handle+0x16c>)
 80028fe:	4829      	ldr	r0, [pc, #164]	; (80029a4 <gnss_handle+0x170>)
 8002900:	f7ff f846 	bl	8001990 <joint_result_calculate_bearing>

	  g.gnss.no_packet_counter = 0;
 8002904:	4a21      	ldr	r2, [pc, #132]	; (800298c <gnss_handle+0x158>)
 8002906:	f243 4320 	movw	r3, #13344	; 0x3420
 800290a:	4413      	add	r3, r2
 800290c:	2200      	movs	r2, #0
 800290e:	801a      	strh	r2, [r3, #0]

	  if(TRUE == g.flag.acc_calibrated && TRUE == g.flag.gnss_initiated && g.gnss.lat < 90)
 8002910:	4a1e      	ldr	r2, [pc, #120]	; (800298c <gnss_handle+0x158>)
 8002912:	f243 33be 	movw	r3, #13246	; 0x33be
 8002916:	4413      	add	r3, r2
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d018      	beq.n	8002956 <gnss_handle+0x122>
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <gnss_handle+0x158>)
 8002926:	f243 33be 	movw	r3, #13246	; 0x33be
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <gnss_handle+0x122>
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <gnss_handle+0x158>)
 800293a:	f243 33dc 	movw	r3, #13276	; 0x33dc
 800293e:	4413      	add	r3, r2
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80029a8 <gnss_handle+0x174>
 8002948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	d501      	bpl.n	8002956 <gnss_handle+0x122>
	  {
		  logging();
 8002952:	f7ff fb47 	bl	8001fe4 <logging>
	  }

	  g.gnss.last_timestamp = 0;
 8002956:	4a0d      	ldr	r2, [pc, #52]	; (800298c <gnss_handle+0x158>)
 8002958:	f243 4322 	movw	r3, #13346	; 0x3422
 800295c:	4413      	add	r3, r2
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_TogglePin(GPIOA, LD3_Pin);
 8002962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002966:	4811      	ldr	r0, [pc, #68]	; (80029ac <gnss_handle+0x178>)
 8002968:	f001 fcd1 	bl	800430e <HAL_GPIO_TogglePin>

	  g.flag.uart4_rx_interrupt = FALSE;
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <gnss_handle+0x158>)
 800296e:	f243 33be 	movw	r3, #13246	; 0x33be
 8002972:	4413      	add	r3, r2
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	f36f 0200 	bfc	r2, #0, #1
 800297a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart4, (uint8_t *)g.buffer.uart4_rx, UART4_RX_SIZE);
 800297c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <gnss_handle+0x15c>)
 8002982:	480b      	ldr	r0, [pc, #44]	; (80029b0 <gnss_handle+0x17c>)
 8002984:	f004 f835 	bl	80069f2 <HAL_UART_Receive_DMA>
//		  g.gnss.last_timestamp++;
//	  }
//
//	  g.flag.tim4_interrupt = 0;
//  }
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200030e8 	.word	0x200030e8
 8002990:	20005fc8 	.word	0x20005fc8
 8002994:	cccccccd 	.word	0xcccccccd
 8002998:	20006578 	.word	0x20006578
 800299c:	20006528 	.word	0x20006528
 80029a0:	200064c0 	.word	0x200064c0
 80029a4:	20006510 	.word	0x20006510
 80029a8:	42b40000 	.word	0x42b40000
 80029ac:	40020000 	.word	0x40020000
 80029b0:	20008448 	.word	0x20008448

080029b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029ba:	e7fe      	b.n	80029ba <Error_Handler+0x6>

080029bc <moving_average_filter_update_float>:
#include "moving_average_filter.h"
//#include <string.h>


void moving_average_filter_update_float(filter_t *s, float input)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	ed87 0a00 	vstr	s0, [r7]
	s->moving_sum = s->moving_sum - s->buf[s->window_index] + input;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	891b      	ldrh	r3, [r3, #8]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	3302      	adds	r3, #2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3304      	adds	r3, #4
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029e4:	edd7 7a00 	vldr	s15, [r7]
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	edc3 7a01 	vstr	s15, [r3, #4]
	s->buf[s->window_index] = input;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	891b      	ldrh	r3, [r3, #8]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	3302      	adds	r3, #2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	601a      	str	r2, [r3, #0]
	s->window_index++;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	891b      	ldrh	r3, [r3, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	811a      	strh	r2, [r3, #8]
	if (s->window_index > s->filter_size - 1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	891b      	ldrh	r3, [r3, #8]
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	; 0x4be
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	dd08      	ble.n	8002a34 <moving_average_filter_update_float+0x78>
	{
		s->window_index = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	811a      	strh	r2, [r3, #8]
		s->buf_size = s->filter_size;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8b3 24be 	ldrh.w	r2, [r3, #1214]	; 0x4be
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	}
	if (s->buf_size == s->filter_size)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8b3 24bc 	ldrh.w	r2, [r3, #1212]	; 0x4bc
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	; 0x4be
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d10e      	bne.n	8002a62 <moving_average_filter_update_float+0xa6>
	{
		s->value = s->moving_sum / s->filter_size;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	; 0x4be
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <moving_average_filter_reset>:

void moving_average_filter_reset(filter_t *s, uint16_t filter_size)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	807b      	strh	r3, [r7, #2]
	s->moving_sum = 0;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	605a      	str	r2, [r3, #4]
	s->value = 0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
	s->filter_size = filter_size;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	f8a3 24be 	strh.w	r2, [r3, #1214]	; 0x4be
	memset(&(s->buf), 0x00, filter_size);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	330c      	adds	r3, #12
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 ffc6 	bl	8007a2c <memset>
//	memset(&(s->buf), 0x00, MAX_FILTER_SIZE-1);
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_MspInit+0x44>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_MspInit+0x44>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_MspInit+0x44>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_MspInit+0x44>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_MspInit+0x44>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_MspInit+0x44>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800

08002af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <NMI_Handler+0x4>

08002af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <HardFault_Handler+0x4>

08002afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <MemManage_Handler+0x4>

08002b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <BusFault_Handler+0x4>

08002b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <UsageFault_Handler+0x4>

08002b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b3c:	f000 fccc 	bl	80034d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <DMA1_Stream2_IRQHandler+0x10>)
 8002b4a:	f000 ffb9 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20008364 	.word	0x20008364

08002b58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <TIM3_IRQHandler+0x10>)
 8002b5e:	f003 fa7f 	bl	8006060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200082a0 	.word	0x200082a0

08002b6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <TIM4_IRQHandler+0x10>)
 8002b72:	f003 fa75 	bl	8006060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20008254 	.word	0x20008254

08002b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002b84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b88:	f001 fbdc 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <UART4_IRQHandler+0x10>)
 8002b96:	f003 ffd1 	bl	8006b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20008448 	.word	0x20008448

08002ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <_sbrk+0x5c>)
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <_sbrk+0x60>)
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <_sbrk+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <_sbrk+0x64>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <_sbrk+0x68>)
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d207      	bcs.n	8002be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd4:	f004 ff00 	bl	80079d8 <__errno>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	230c      	movs	r3, #12
 8002bdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
 8002be2:	e009      	b.n	8002bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <_sbrk+0x64>)
 8002bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20040000 	.word	0x20040000
 8002c04:	00000400 	.word	0x00000400
 8002c08:	200030dc 	.word	0x200030dc
 8002c0c:	200084d8 	.word	0x200084d8

08002c10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <SystemInit+0x20>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <SystemInit+0x20>)
 8002c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c54:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <MX_TIM3_Init+0x98>)
 8002c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 54000-1;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c5a:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8002c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20;
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c68:	2214      	movs	r2, #20
 8002c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c78:	4813      	ldr	r0, [pc, #76]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c7a:	f003 f921 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002c84:	f7ff fe96 	bl	80029b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c8e:	f107 0310 	add.w	r3, r7, #16
 8002c92:	4619      	mov	r1, r3
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002c96:	f003 fb03 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ca0:	f7ff fe88 	bl	80029b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <MX_TIM3_Init+0x94>)
 8002cb2:	f003 fd11 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002cbc:	f7ff fe7a 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cc0:	bf00      	nop
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200082a0 	.word	0x200082a0
 8002ccc:	40000400 	.word	0x40000400

08002cd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <MX_TIM4_Init+0x9c>)
 8002cf2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 54000-1;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002cf6:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8002cfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002d04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d16:	4814      	ldr	r0, [pc, #80]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002d18:	f003 f8d2 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002d22:	f7ff fe47 	bl	80029b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	4619      	mov	r1, r3
 8002d32:	480d      	ldr	r0, [pc, #52]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002d34:	f003 fab4 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002d3e:	f7ff fe39 	bl	80029b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d42:	2320      	movs	r3, #32
 8002d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4806      	ldr	r0, [pc, #24]	; (8002d68 <MX_TIM4_Init+0x98>)
 8002d50:	f003 fcc2 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002d5a:	f7ff fe2b 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d5e:	bf00      	nop
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20008254 	.word	0x20008254
 8002d6c:	40000800 	.word	0x40000800

08002d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_TIM_Base_MspInit+0x78>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d114      	bne.n	8002dac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d82:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <HAL_TIM_Base_MspInit+0x7c>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_TIM_Base_MspInit+0x7c>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <HAL_TIM_Base_MspInit+0x7c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	201d      	movs	r0, #29
 8002da0:	f000 fcb7 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002da4:	201d      	movs	r0, #29
 8002da6:	f000 fcd0 	bl	800374a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002daa:	e018      	b.n	8002dde <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_TIM_Base_MspInit+0x80>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d113      	bne.n	8002dde <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_TIM_Base_MspInit+0x7c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <HAL_TIM_Base_MspInit+0x7c>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_TIM_Base_MspInit+0x7c>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	201e      	movs	r0, #30
 8002dd4:	f000 fc9d 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dd8:	201e      	movs	r0, #30
 8002dda:	f000 fcb6 	bl	800374a <HAL_NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40000800 	.word	0x40000800

08002df4 <unit_test>:
gyro_t gyro_temp;

uint16_t i;

void unit_test()
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
	for(i = 0; i < UNIT_SAMPLES; i++)
 8002dfa:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <unit_test+0x1cc>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	e0d7      	b.n	8002fb2 <unit_test+0x1be>
	{
		if (i == 164)
 8002e02:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <unit_test+0x1cc>)
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	2ba4      	cmp	r3, #164	; 0xa4
 8002e08:	d101      	bne.n	8002e0e <unit_test+0x1a>
		{
			uint8_t breakpoint = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	71fb      	strb	r3, [r7, #7]
		}

		//Execute every fifth index
		if (i % 5 == 0)
 8002e0e:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <unit_test+0x1cc>)
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <unit_test+0x1d0>)
 8002e14:	fba3 1302 	umull	r1, r3, r3, r2
 8002e18:	0899      	lsrs	r1, r3, #2
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11a      	bne.n	8002e5e <unit_test+0x6a>
		{
			if (g.flag.gnss_active == FALSE)
 8002e28:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <unit_test+0x1d4>)
 8002e2a:	f243 33be 	movw	r3, #13246	; 0x33be
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d108      	bne.n	8002e4e <unit_test+0x5a>
			{
			  g.flag.gnss_active = TRUE;
 8002e3c:	4a62      	ldr	r2, [pc, #392]	; (8002fc8 <unit_test+0x1d4>)
 8002e3e:	f243 33be 	movw	r3, #13246	; 0x33be
 8002e42:	4413      	add	r3, r2
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e007      	b.n	8002e5e <unit_test+0x6a>
			}
			else
			{
			  g.flag.gnss_active = FALSE;
 8002e4e:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <unit_test+0x1d4>)
 8002e50:	f243 33be 	movw	r3, #13246	; 0x33be
 8002e54:	4413      	add	r3, r2
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	f36f 1286 	bfc	r2, #6, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
			}
		}

		gnss_temp.lat = test_gnss_lat[i];
 8002e5e:	4b58      	ldr	r3, [pc, #352]	; (8002fc0 <unit_test+0x1cc>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	4a5a      	ldr	r2, [pc, #360]	; (8002fcc <unit_test+0x1d8>)
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a59      	ldr	r2, [pc, #356]	; (8002fd0 <unit_test+0x1dc>)
 8002e6c:	6053      	str	r3, [r2, #4]
		gnss_temp.lon = test_gnss_lon[i];
 8002e6e:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <unit_test+0x1cc>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <unit_test+0x1e0>)
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a55      	ldr	r2, [pc, #340]	; (8002fd0 <unit_test+0x1dc>)
 8002e7c:	6013      	str	r3, [r2, #0]
		gnss_temp.kmh = test_gnss_kmh[i];
 8002e7e:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <unit_test+0x1cc>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	4a55      	ldr	r2, [pc, #340]	; (8002fd8 <unit_test+0x1e4>)
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb84 	bl	8000598 <__aeabi_f2d>
 8002e90:	4603      	mov	r3, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <unit_test+0x1dc>)
 8002e96:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		gnss_temp.bearing = test_gnss_bearing[i];
 8002e9a:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <unit_test+0x1cc>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <unit_test+0x1e8>)
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <unit_test+0x1dc>)
 8002ea8:	6213      	str	r3, [r2, #32]

		acc_temp.value_filtered = test_acc_x[i];
 8002eaa:	4b45      	ldr	r3, [pc, #276]	; (8002fc0 <unit_test+0x1cc>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	4a4c      	ldr	r2, [pc, #304]	; (8002fe0 <unit_test+0x1ec>)
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4b      	ldr	r2, [pc, #300]	; (8002fe4 <unit_test+0x1f0>)
 8002eb8:	60d3      	str	r3, [r2, #12]
		gyro_temp.value_filtered = -1 * test_gyro_z[i];
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <unit_test+0x1cc>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <unit_test+0x1f4>)
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	eef1 7a67 	vneg.f32	s15, s15
 8002ecc:	4b47      	ldr	r3, [pc, #284]	; (8002fec <unit_test+0x1f8>)
 8002ece:	edc3 7a03 	vstr	s15, [r3, #12]

		joint_result_calculate_bearing(&g.joint_result, &gnss_temp, &acc_temp, &gyro_temp);
 8002ed2:	4b46      	ldr	r3, [pc, #280]	; (8002fec <unit_test+0x1f8>)
 8002ed4:	4a43      	ldr	r2, [pc, #268]	; (8002fe4 <unit_test+0x1f0>)
 8002ed6:	493e      	ldr	r1, [pc, #248]	; (8002fd0 <unit_test+0x1dc>)
 8002ed8:	4845      	ldr	r0, [pc, #276]	; (8002ff0 <unit_test+0x1fc>)
 8002eda:	f7fe fd59 	bl	8001990 <joint_result_calculate_bearing>

		g.unit[i].bearing = g.joint_result.bearing;
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <unit_test+0x1cc>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <unit_test+0x1d4>)
 8002ee6:	f243 4330 	movw	r3, #13360	; 0x3430
 8002eea:	4413      	add	r3, r2
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4936      	ldr	r1, [pc, #216]	; (8002fc8 <unit_test+0x1d4>)
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4403      	add	r3, r0
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	3308      	adds	r3, #8
 8002efc:	601a      	str	r2, [r3, #0]
		g.unit[i].latitude = g.joint_result.latitude;
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <unit_test+0x1cc>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <unit_test+0x1d4>)
 8002f06:	f243 4328 	movw	r3, #13352	; 0x3428
 8002f0a:	4413      	add	r3, r2
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	492e      	ldr	r1, [pc, #184]	; (8002fc8 <unit_test+0x1d4>)
 8002f10:	4603      	mov	r3, r0
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4403      	add	r3, r0
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	601a      	str	r2, [r3, #0]
		g.unit[i].longitude = g.joint_result.longitude;
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <unit_test+0x1cc>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <unit_test+0x1d4>)
 8002f24:	f243 432c 	movw	r3, #13356	; 0x342c
 8002f28:	4413      	add	r3, r2
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4926      	ldr	r1, [pc, #152]	; (8002fc8 <unit_test+0x1d4>)
 8002f2e:	4603      	mov	r3, r0
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4403      	add	r3, r0
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	3304      	adds	r3, #4
 8002f3a:	601a      	str	r2, [r3, #0]
		g.unit[i].velocity_m_s = g.joint_result.velocity_m_s;
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <unit_test+0x1cc>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <unit_test+0x1d4>)
 8002f44:	f243 4334 	movw	r3, #13364	; 0x3434
 8002f48:	4413      	add	r3, r2
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	491e      	ldr	r1, [pc, #120]	; (8002fc8 <unit_test+0x1d4>)
 8002f4e:	4603      	mov	r3, r0
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4403      	add	r3, r0
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	330c      	adds	r3, #12
 8002f5a:	601a      	str	r2, [r3, #0]
		g.unit[i].velocity_kmh = g.joint_result.velocity_kmh;
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <unit_test+0x1cc>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <unit_test+0x1d4>)
 8002f64:	f243 4338 	movw	r3, #13368	; 0x3438
 8002f68:	4413      	add	r3, r2
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4916      	ldr	r1, [pc, #88]	; (8002fc8 <unit_test+0x1d4>)
 8002f6e:	4603      	mov	r3, r0
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4403      	add	r3, r0
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	3310      	adds	r3, #16
 8002f7a:	601a      	str	r2, [r3, #0]
		g.unit[i].distance = g.joint_result.distance;
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <unit_test+0x1cc>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <unit_test+0x1d4>)
 8002f84:	f243 433c 	movw	r3, #13372	; 0x343c
 8002f88:	4413      	add	r3, r2
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <unit_test+0x1d4>)
 8002f8e:	4603      	mov	r3, r0
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4403      	add	r3, r0
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	3314      	adds	r3, #20
 8002f9a:	601a      	str	r2, [r3, #0]

		unit_test_logging(i);
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <unit_test+0x1cc>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f827 	bl	8002ff4 <unit_test_logging>
	for(i = 0; i < UNIT_SAMPLES; i++)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <unit_test+0x1cc>)
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <unit_test+0x1cc>)
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <unit_test+0x1cc>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fba:	f4ff af22 	bcc.w	8002e02 <unit_test+0xe>
	}

	while(1)
 8002fbe:	e7fe      	b.n	8002fbe <unit_test+0x1ca>
 8002fc0:	20008360 	.word	0x20008360
 8002fc4:	cccccccd 	.word	0xcccccccd
 8002fc8:	200030e8 	.word	0x200030e8
 8002fcc:	20000fa4 	.word	0x20000fa4
 8002fd0:	20008310 	.word	0x20008310
 8002fd4:	20001774 	.word	0x20001774
 8002fd8:	20001f44 	.word	0x20001f44
 8002fdc:	20002714 	.word	0x20002714
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	200082f0 	.word	0x200082f0
 8002fe8:	200007d4 	.word	0x200007d4
 8002fec:	20008300 	.word	0x20008300
 8002ff0:	20006510 	.word	0x20006510

08002ff4 <unit_test_logging>:

	}
}

void unit_test_logging()
{
 8002ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff8:	b08f      	sub	sp, #60	; 0x3c
 8002ffa:	af0a      	add	r7, sp, #40	; 0x28
	uint16_t size;

	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <unit_test_logging+0x1c8>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	4698      	mov	r8, r3
				i,acc_temp.value_filtered, gyro_temp.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <unit_test_logging+0x1cc>)
 8003004:	68db      	ldr	r3, [r3, #12]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fac6 	bl	8000598 <__aeabi_f2d>
 800300c:	4604      	mov	r4, r0
 800300e:	460d      	mov	r5, r1
				i,acc_temp.value_filtered, gyro_temp.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 8003010:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <unit_test_logging+0x1d0>)
 8003012:	68db      	ldr	r3, [r3, #12]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fabf 	bl	8000598 <__aeabi_f2d>
 800301a:	460a      	mov	r2, r1
 800301c:	4601      	mov	r1, r0
				i,acc_temp.value_filtered, gyro_temp.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 800301e:	486a      	ldr	r0, [pc, #424]	; (80031c8 <unit_test_logging+0x1d4>)
 8003020:	f243 33be 	movw	r3, #13246	; 0x33be
 8003024:	4403      	add	r3, r0
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800302c:	b2db      	uxtb	r3, r3
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 800302e:	461e      	mov	r6, r3
				i,acc_temp.value_filtered, gyro_temp.value_filtered, g.flag.gnss_active, g.flag.ins_begin);
 8003030:	4865      	ldr	r0, [pc, #404]	; (80031c8 <unit_test_logging+0x1d4>)
 8003032:	f243 33be 	movw	r3, #13246	; 0x33be
 8003036:	4403      	add	r3, r0
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800303e:	b2db      	uxtb	r3, r3
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE, "%d;%.4f;%.4f;%d;%d;",
 8003040:	9305      	str	r3, [sp, #20]
 8003042:	9604      	str	r6, [sp, #16]
 8003044:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003048:	e9cd 4500 	strd	r4, r5, [sp]
 800304c:	4643      	mov	r3, r8
 800304e:	4a5f      	ldr	r2, [pc, #380]	; (80031cc <unit_test_logging+0x1d8>)
 8003050:	21c8      	movs	r1, #200	; 0xc8
 8003052:	485f      	ldr	r0, [pc, #380]	; (80031d0 <unit_test_logging+0x1dc>)
 8003054:	f005 f94e 	bl	80082f4 <sniprintf>
 8003058:	4603      	mov	r3, r0
 800305a:	81fb      	strh	r3, [r7, #14]

	//check snprintf error
	if(size > 0)
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <unit_test_logging+0x7a>
	{
		HAL_UART_Transmit(&huart7, (uint8_t *)g.buffer.uart7_tx, size, UART_TX_TIMEOUT);
 8003062:	89fa      	ldrh	r2, [r7, #14]
 8003064:	230a      	movs	r3, #10
 8003066:	495a      	ldr	r1, [pc, #360]	; (80031d0 <unit_test_logging+0x1dc>)
 8003068:	485a      	ldr	r0, [pc, #360]	; (80031d4 <unit_test_logging+0x1e0>)
 800306a:	f003 fc2f 	bl	80068cc <HAL_UART_Transmit>
	}

	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
				"%.8f;%.8f;%.4f;%.4f;%.4f;",
				gnss_temp.lat, gnss_temp.lon, gnss_temp.kmh, 0.0, gnss_temp.bearing);
 800306e:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <unit_test_logging+0x1e4>)
 8003070:	685b      	ldr	r3, [r3, #4]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa90 	bl	8000598 <__aeabi_f2d>
 8003078:	4680      	mov	r8, r0
 800307a:	4689      	mov	r9, r1
				gnss_temp.lat, gnss_temp.lon, gnss_temp.kmh, 0.0, gnss_temp.bearing);
 800307c:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <unit_test_logging+0x1e4>)
 800307e:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fa89 	bl	8000598 <__aeabi_f2d>
 8003086:	4682      	mov	sl, r0
 8003088:	468b      	mov	fp, r1
 800308a:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <unit_test_logging+0x1e4>)
 800308c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
				gnss_temp.lat, gnss_temp.lon, gnss_temp.kmh, 0.0, gnss_temp.bearing);
 8003090:	4b51      	ldr	r3, [pc, #324]	; (80031d8 <unit_test_logging+0x1e4>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fa7f 	bl	8000598 <__aeabi_f2d>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80030ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80030b2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80030b6:	e9cd 8900 	strd	r8, r9, [sp]
 80030ba:	4a48      	ldr	r2, [pc, #288]	; (80031dc <unit_test_logging+0x1e8>)
 80030bc:	21c8      	movs	r1, #200	; 0xc8
 80030be:	4844      	ldr	r0, [pc, #272]	; (80031d0 <unit_test_logging+0x1dc>)
 80030c0:	f005 f918 	bl	80082f4 <sniprintf>
 80030c4:	4603      	mov	r3, r0
 80030c6:	81fb      	strh	r3, [r7, #14]

	if(size > 0)
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <unit_test_logging+0xe6>
	{
		HAL_UART_Transmit(&huart7, (uint8_t *)g.buffer.uart7_tx, size, UART_TX_TIMEOUT);
 80030ce:	89fa      	ldrh	r2, [r7, #14]
 80030d0:	230a      	movs	r3, #10
 80030d2:	493f      	ldr	r1, [pc, #252]	; (80031d0 <unit_test_logging+0x1dc>)
 80030d4:	483f      	ldr	r0, [pc, #252]	; (80031d4 <unit_test_logging+0x1e0>)
 80030d6:	f003 fbf9 	bl	80068cc <HAL_UART_Transmit>
	}

	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
		"%.8f;%.8f;%.4f;%.4f;%.4f;\r\n",
		g.unit[i].latitude, g.unit[i].longitude, g.unit[i].velocity_kmh, g.unit[i].velocity_m_s, g.unit[i].bearing);
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <unit_test_logging+0x1c8>)
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	4a39      	ldr	r2, [pc, #228]	; (80031c8 <unit_test_logging+0x1d4>)
 80030e2:	460b      	mov	r3, r1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	440b      	add	r3, r1
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fa52 	bl	8000598 <__aeabi_f2d>
 80030f4:	4604      	mov	r4, r0
 80030f6:	460d      	mov	r5, r1
		g.unit[i].latitude, g.unit[i].longitude, g.unit[i].velocity_kmh, g.unit[i].velocity_m_s, g.unit[i].bearing);
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <unit_test_logging+0x1c8>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4a32      	ldr	r2, [pc, #200]	; (80031c8 <unit_test_logging+0x1d4>)
 8003100:	460b      	mov	r3, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	440b      	add	r3, r1
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	3304      	adds	r3, #4
 800310c:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa42 	bl	8000598 <__aeabi_f2d>
 8003114:	4680      	mov	r8, r0
 8003116:	4689      	mov	r9, r1
		g.unit[i].latitude, g.unit[i].longitude, g.unit[i].velocity_kmh, g.unit[i].velocity_m_s, g.unit[i].bearing);
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <unit_test_logging+0x1c8>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4a2a      	ldr	r2, [pc, #168]	; (80031c8 <unit_test_logging+0x1d4>)
 8003120:	460b      	mov	r3, r1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	440b      	add	r3, r1
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	3310      	adds	r3, #16
 800312c:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fa32 	bl	8000598 <__aeabi_f2d>
 8003134:	4682      	mov	sl, r0
 8003136:	468b      	mov	fp, r1
		g.unit[i].latitude, g.unit[i].longitude, g.unit[i].velocity_kmh, g.unit[i].velocity_m_s, g.unit[i].bearing);
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <unit_test_logging+0x1c8>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <unit_test_logging+0x1d4>)
 8003140:	460b      	mov	r3, r1
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	440b      	add	r3, r1
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	330c      	adds	r3, #12
 800314c:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fa22 	bl	8000598 <__aeabi_f2d>
 8003154:	e9c7 0100 	strd	r0, r1, [r7]
		g.unit[i].latitude, g.unit[i].longitude, g.unit[i].velocity_kmh, g.unit[i].velocity_m_s, g.unit[i].bearing);
 8003158:	4b18      	ldr	r3, [pc, #96]	; (80031bc <unit_test_logging+0x1c8>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <unit_test_logging+0x1d4>)
 8003160:	460b      	mov	r3, r1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	440b      	add	r3, r1
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	3308      	adds	r3, #8
 800316c:	681b      	ldr	r3, [r3, #0]
	size = snprintf(g.buffer.uart7_tx, LOGGING_BUFFER_SIZE,
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fa12 	bl	8000598 <__aeabi_f2d>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800317c:	ed97 7b00 	vldr	d7, [r7]
 8003180:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003184:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003188:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800318c:	e9cd 4500 	strd	r4, r5, [sp]
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <unit_test_logging+0x1ec>)
 8003192:	21c8      	movs	r1, #200	; 0xc8
 8003194:	480e      	ldr	r0, [pc, #56]	; (80031d0 <unit_test_logging+0x1dc>)
 8003196:	f005 f8ad 	bl	80082f4 <sniprintf>
 800319a:	4603      	mov	r3, r0
 800319c:	81fb      	strh	r3, [r7, #14]

	if(size > 0)
 800319e:	89fb      	ldrh	r3, [r7, #14]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <unit_test_logging+0x1bc>
	{
		HAL_UART_Transmit(&huart7, (uint8_t *)g.buffer.uart7_tx, size, UART_TX_TIMEOUT);
 80031a4:	89fa      	ldrh	r2, [r7, #14]
 80031a6:	230a      	movs	r3, #10
 80031a8:	4909      	ldr	r1, [pc, #36]	; (80031d0 <unit_test_logging+0x1dc>)
 80031aa:	480a      	ldr	r0, [pc, #40]	; (80031d4 <unit_test_logging+0x1e0>)
 80031ac:	f003 fb8e 	bl	80068cc <HAL_UART_Transmit>
	}
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	20008360 	.word	0x20008360
 80031c0:	200082f0 	.word	0x200082f0
 80031c4:	20008300 	.word	0x20008300
 80031c8:	200030e8 	.word	0x200030e8
 80031cc:	0800da6c 	.word	0x0800da6c
 80031d0:	200063c3 	.word	0x200063c3
 80031d4:	200083c4 	.word	0x200083c4
 80031d8:	20008310 	.word	0x20008310
 80031dc:	0800da80 	.word	0x0800da80
 80031e0:	0800da9c 	.word	0x0800da9c

080031e4 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <MX_UART4_Init+0x58>)
 80031ea:	4a15      	ldr	r2, [pc, #84]	; (8003240 <MX_UART4_Init+0x5c>)
 80031ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <MX_UART4_Init+0x58>)
 80031f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <MX_UART4_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <MX_UART4_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <MX_UART4_Init+0x58>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <MX_UART4_Init+0x58>)
 800320a:	220c      	movs	r2, #12
 800320c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <MX_UART4_Init+0x58>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <MX_UART4_Init+0x58>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <MX_UART4_Init+0x58>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <MX_UART4_Init+0x58>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <MX_UART4_Init+0x58>)
 8003228:	f003 fb02 	bl	8006830 <HAL_UART_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003232:	f7ff fbbf 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20008448 	.word	0x20008448
 8003240:	40004c00 	.word	0x40004c00

08003244 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <MX_UART7_Init+0x5c>)
 800324a:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <MX_UART7_Init+0x60>)
 800324c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <MX_UART7_Init+0x5c>)
 8003250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003254:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <MX_UART7_Init+0x5c>)
 8003258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800325c:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <MX_UART7_Init+0x5c>)
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <MX_UART7_Init+0x5c>)
 8003266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <MX_UART7_Init+0x5c>)
 800326e:	220c      	movs	r2, #12
 8003270:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <MX_UART7_Init+0x5c>)
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <MX_UART7_Init+0x5c>)
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <MX_UART7_Init+0x5c>)
 8003280:	2200      	movs	r2, #0
 8003282:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <MX_UART7_Init+0x5c>)
 8003286:	2200      	movs	r2, #0
 8003288:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <MX_UART7_Init+0x5c>)
 800328c:	f003 fad0 	bl	8006830 <HAL_UART_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8003296:	f7ff fb8d 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200083c4 	.word	0x200083c4
 80032a4:	40007800 	.word	0x40007800

080032a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 031c 	add.w	r3, r7, #28
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4a      	ldr	r2, [pc, #296]	; (80033f0 <HAL_UART_MspInit+0x148>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d15f      	bne.n	800338a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a49      	ldr	r2, [pc, #292]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80032d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a43      	ldr	r2, [pc, #268]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032fa:	2303      	movs	r3, #3
 80032fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800330a:	2308      	movs	r3, #8
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4619      	mov	r1, r3
 8003314:	4838      	ldr	r0, [pc, #224]	; (80033f8 <HAL_UART_MspInit+0x150>)
 8003316:	f000 fe47 	bl	8003fa8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_UART_MspInit+0x154>)
 800331c:	4a38      	ldr	r2, [pc, #224]	; (8003400 <HAL_UART_MspInit+0x158>)
 800331e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003326:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003328:	4b34      	ldr	r3, [pc, #208]	; (80033fc <HAL_UART_MspInit+0x154>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800332e:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003334:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800333a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_UART_MspInit+0x154>)
 800333e:	2200      	movs	r2, #0
 8003340:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003348:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_UART_MspInit+0x154>)
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003350:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003354:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003358:	2200      	movs	r2, #0
 800335a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800335c:	4827      	ldr	r0, [pc, #156]	; (80033fc <HAL_UART_MspInit+0x154>)
 800335e:	f000 fa0f 	bl	8003780 <HAL_DMA_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003368:	f7ff fb24 	bl	80029b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003370:	671a      	str	r2, [r3, #112]	; 0x70
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_UART_MspInit+0x154>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003378:	2200      	movs	r2, #0
 800337a:	2100      	movs	r1, #0
 800337c:	2034      	movs	r0, #52	; 0x34
 800337e:	f000 f9c8 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003382:	2034      	movs	r0, #52	; 0x34
 8003384:	f000 f9e1 	bl	800374a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8003388:	e02d      	b.n	80033e6 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==UART7)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_UART_MspInit+0x15c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d128      	bne.n	80033e6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 800339a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80033b2:	f043 0310 	orr.w	r3, r3, #16
 80033b6:	6313      	str	r3, [r2, #48]	; 0x30
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_UART_MspInit+0x14c>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80033c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80033c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d2:	2303      	movs	r3, #3
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80033d6:	2308      	movs	r3, #8
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033da:	f107 031c 	add.w	r3, r7, #28
 80033de:	4619      	mov	r1, r3
 80033e0:	4809      	ldr	r0, [pc, #36]	; (8003408 <HAL_UART_MspInit+0x160>)
 80033e2:	f000 fde1 	bl	8003fa8 <HAL_GPIO_Init>
}
 80033e6:	bf00      	nop
 80033e8:	3730      	adds	r7, #48	; 0x30
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40004c00 	.word	0x40004c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	20008364 	.word	0x20008364
 8003400:	40026040 	.word	0x40026040
 8003404:	40007800 	.word	0x40007800
 8003408:	40021000 	.word	0x40021000

0800340c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800340c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003410:	480d      	ldr	r0, [pc, #52]	; (8003448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003412:	490e      	ldr	r1, [pc, #56]	; (800344c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003414:	4a0e      	ldr	r2, [pc, #56]	; (8003450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003418:	e002      	b.n	8003420 <LoopCopyDataInit>

0800341a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800341a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800341c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341e:	3304      	adds	r3, #4

08003420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003424:	d3f9      	bcc.n	800341a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003426:	4a0b      	ldr	r2, [pc, #44]	; (8003454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003428:	4c0b      	ldr	r4, [pc, #44]	; (8003458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800342c:	e001      	b.n	8003432 <LoopFillZerobss>

0800342e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003430:	3204      	adds	r2, #4

08003432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003434:	d3fb      	bcc.n	800342e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003436:	f7ff fbeb 	bl	8002c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800343a:	f004 fad3 	bl	80079e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800343e:	f7fe febf 	bl	80021c0 <main>
  bx  lr    
 8003442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003444:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800344c:	200030c0 	.word	0x200030c0
  ldr r2, =_sidata
 8003450:	0800dff8 	.word	0x0800dff8
  ldr r2, =_sbss
 8003454:	200030c0 	.word	0x200030c0
  ldr r4, =_ebss
 8003458:	200084d4 	.word	0x200084d4

0800345c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800345c:	e7fe      	b.n	800345c <ADC_IRQHandler>

0800345e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003462:	2003      	movs	r0, #3
 8003464:	f000 f94a 	bl	80036fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003468:	200f      	movs	r0, #15
 800346a:	f000 f805 	bl	8003478 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800346e:	f7ff fb1b 	bl	8002aa8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_InitTick+0x54>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_InitTick+0x58>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800348e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f965 	bl	8003766 <HAL_SYSTICK_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00e      	b.n	80034c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b0f      	cmp	r3, #15
 80034aa:	d80a      	bhi.n	80034c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ac:	2200      	movs	r2, #0
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	f000 f92d 	bl	8003712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b8:	4a06      	ldr	r2, [pc, #24]	; (80034d4 <HAL_InitTick+0x5c>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20002ee8 	.word	0x20002ee8
 80034d4:	20002ee4 	.word	0x20002ee4

080034d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_IncTick+0x20>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_IncTick+0x24>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4413      	add	r3, r2
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_IncTick+0x24>)
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20002ee8 	.word	0x20002ee8
 80034fc:	200084cc 	.word	0x200084cc

08003500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return uwTick;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_GetTick+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	200084cc 	.word	0x200084cc

08003518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff ffee 	bl	8003500 <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d005      	beq.n	800353e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_Delay+0x40>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800353e:	bf00      	nop
 8003540:	f7ff ffde 	bl	8003500 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d8f7      	bhi.n	8003540 <HAL_Delay+0x28>
  {
  }
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20002ee8 	.word	0x20002ee8

0800355c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <__NVIC_SetPriorityGrouping+0x40>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003578:	4013      	ands	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	4313      	orrs	r3, r2
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x40>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00
 80035a0:	05fa0000 	.word	0x05fa0000

080035a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <__NVIC_GetPriorityGrouping+0x18>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 0307 	and.w	r3, r3, #7
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	db0b      	blt.n	80035ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	f003 021f 	and.w	r2, r3, #31
 80035d8:	4907      	ldr	r1, [pc, #28]	; (80035f8 <__NVIC_EnableIRQ+0x38>)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	2001      	movs	r0, #1
 80035e2:	fa00 f202 	lsl.w	r2, r0, r2
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f1c3 0307 	rsb	r3, r3, #7
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf28      	it	cs
 800366e:	2304      	movcs	r3, #4
 8003670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3304      	adds	r3, #4
 8003676:	2b06      	cmp	r3, #6
 8003678:	d902      	bls.n	8003680 <NVIC_EncodePriority+0x30>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3b03      	subs	r3, #3
 800367e:	e000      	b.n	8003682 <NVIC_EncodePriority+0x32>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003698:	f04f 31ff 	mov.w	r1, #4294967295
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43d9      	mvns	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	4313      	orrs	r3, r2
         );
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d301      	bcc.n	80036ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00f      	b.n	80036ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <SysTick_Config+0x40>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d6:	210f      	movs	r1, #15
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	f7ff ff8e 	bl	80035fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SysTick_Config+0x40>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x40>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff29 	bl	800355c <__NVIC_SetPriorityGrouping>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003724:	f7ff ff3e 	bl	80035a4 <__NVIC_GetPriorityGrouping>
 8003728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7ff ff8e 	bl	8003650 <NVIC_EncodePriority>
 8003734:	4602      	mov	r2, r0
 8003736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff5d 	bl	80035fc <__NVIC_SetPriority>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff31 	bl	80035c0 <__NVIC_EnableIRQ>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffa2 	bl	80036b8 <SysTick_Config>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7ff feb8 	bl	8003500 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e099      	b.n	80038d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037bc:	e00f      	b.n	80037de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037be:	f7ff fe9f 	bl	8003500 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d908      	bls.n	80037de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e078      	b.n	80038d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e8      	bne.n	80037be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_DMA_Init+0x158>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2b04      	cmp	r3, #4
 8003836:	d107      	bne.n	8003848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4313      	orrs	r3, r2
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0307 	bic.w	r3, r3, #7
 800385e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2b04      	cmp	r3, #4
 8003870:	d117      	bne.n	80038a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fb15 	bl	8003eb4 <DMA_CheckFifoParam>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2240      	movs	r2, #64	; 0x40
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800389e:	2301      	movs	r3, #1
 80038a0:	e016      	b.n	80038d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 facc 	bl	8003e48 <DMA_CalcBaseAndBitshift>
 80038b0:	4603      	mov	r3, r0
 80038b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	223f      	movs	r2, #63	; 0x3f
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	e010803f 	.word	0xe010803f

080038dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_Start_IT+0x26>
 80038fe:	2302      	movs	r3, #2
 8003900:	e048      	b.n	8003994 <HAL_DMA_Start_IT+0xb8>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d137      	bne.n	8003986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fa5e 	bl	8003dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	223f      	movs	r2, #63	; 0x3f
 8003936:	409a      	lsls	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0216 	orr.w	r2, r2, #22
 800394a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800395a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e005      	b.n	8003992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800398e:	2302      	movs	r3, #2
 8003990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039aa:	f7ff fda9 	bl	8003500 <HAL_GetTick>
 80039ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d008      	beq.n	80039ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e052      	b.n	8003a74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0216 	bic.w	r2, r2, #22
 80039dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_DMA_Abort+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0208 	bic.w	r2, r2, #8
 8003a0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1e:	e013      	b.n	8003a48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a20:	f7ff fd6e 	bl	8003500 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d90c      	bls.n	8003a48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e015      	b.n	8003a74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e4      	bne.n	8003a20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	223f      	movs	r2, #63	; 0x3f
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00c      	b.n	8003ab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003acc:	4b92      	ldr	r3, [pc, #584]	; (8003d18 <HAL_DMA_IRQHandler+0x258>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a92      	ldr	r2, [pc, #584]	; (8003d1c <HAL_DMA_IRQHandler+0x25c>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0a9b      	lsrs	r3, r3, #10
 8003ad8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2208      	movs	r2, #8
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01a      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0204 	bic.w	r2, r2, #4
 8003b12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	2208      	movs	r2, #8
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	2201      	movs	r2, #1
 8003b32:	409a      	lsls	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	f043 0202 	orr.w	r2, r3, #2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b66:	2204      	movs	r2, #4
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	2204      	movs	r2, #4
 8003b86:	409a      	lsls	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0204 	orr.w	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d043      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03c      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	2210      	movs	r2, #16
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d108      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d024      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
 8003bee:	e01f      	b.n	8003c30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
 8003c00:	e016      	b.n	8003c30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0208 	bic.w	r2, r2, #8
 8003c1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	2220      	movs	r2, #32
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 808e 	beq.w	8003d5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8086 	beq.w	8003d5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	2220      	movs	r2, #32
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d136      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0216 	bic.w	r2, r2, #22
 8003c78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x1da>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0208 	bic.w	r2, r2, #8
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	223f      	movs	r2, #63	; 0x3f
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d07d      	beq.n	8003dca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
        }
        return;
 8003cd6:	e078      	b.n	8003dca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01c      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d030      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
 8003d04:	e02b      	b.n	8003d5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d027      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
 8003d16:	e022      	b.n	8003d5e <HAL_DMA_IRQHandler+0x29e>
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0210 	bic.w	r2, r2, #16
 8003d3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d032      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d022      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2205      	movs	r2, #5
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d307      	bcc.n	8003da6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f2      	bne.n	8003d8a <HAL_DMA_IRQHandler+0x2ca>
 8003da4:	e000      	b.n	8003da8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003da6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
 8003dc8:	e000      	b.n	8003dcc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003dca:	bf00      	nop
    }
  }
}
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop

08003dd4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d108      	bne.n	8003e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e2a:	e007      	b.n	8003e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	3b10      	subs	r3, #16
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x60>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <DMA_CalcBaseAndBitshift+0x64>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d908      	bls.n	8003e88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	1d1a      	adds	r2, r3, #4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	659a      	str	r2, [r3, #88]	; 0x58
 8003e86:	e006      	b.n	8003e96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	aaaaaaab 	.word	0xaaaaaaab
 8003eac:	0800dad0 	.word	0x0800dad0
 8003eb0:	fffffc00 	.word	0xfffffc00

08003eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11f      	bne.n	8003f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d855      	bhi.n	8003f80 <DMA_CheckFifoParam+0xcc>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <DMA_CheckFifoParam+0x28>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003eff 	.word	0x08003eff
 8003ee4:	08003eed 	.word	0x08003eed
 8003ee8:	08003f81 	.word	0x08003f81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d045      	beq.n	8003f84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efc:	e042      	b.n	8003f84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f06:	d13f      	bne.n	8003f88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e03c      	b.n	8003f88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f16:	d121      	bne.n	8003f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d836      	bhi.n	8003f8c <DMA_CheckFifoParam+0xd8>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <DMA_CheckFifoParam+0x70>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f3b 	.word	0x08003f3b
 8003f2c:	08003f35 	.word	0x08003f35
 8003f30:	08003f4d 	.word	0x08003f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      break;
 8003f38:	e02f      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d024      	beq.n	8003f90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4a:	e021      	b.n	8003f90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f54:	d11e      	bne.n	8003f94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f5a:	e01b      	b.n	8003f94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d902      	bls.n	8003f68 <DMA_CheckFifoParam+0xb4>
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d003      	beq.n	8003f6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f66:	e018      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6c:	e015      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00e      	beq.n	8003f98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7e:	e00b      	b.n	8003f98 <DMA_CheckFifoParam+0xe4>
      break;
 8003f80:	bf00      	nop
 8003f82:	e00a      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      break;
 8003f84:	bf00      	nop
 8003f86:	e008      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      break;
 8003f88:	bf00      	nop
 8003f8a:	e006      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      break;
 8003f8c:	bf00      	nop
 8003f8e:	e004      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      break;
 8003f90:	bf00      	nop
 8003f92:	e002      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      break;   
 8003f94:	bf00      	nop
 8003f96:	e000      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
      break;
 8003f98:	bf00      	nop
    }
  } 
  
  return status; 
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	; 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e169      	b.n	800429c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f040 8158 	bne.w	8004296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d00b      	beq.n	8004006 <HAL_GPIO_Init+0x5e>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d007      	beq.n	8004006 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ffa:	2b11      	cmp	r3, #17
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b12      	cmp	r3, #18
 8004004:	d130      	bne.n	8004068 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	2203      	movs	r2, #3
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800403c:	2201      	movs	r2, #1
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 0201 	and.w	r2, r3, #1
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	2203      	movs	r2, #3
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x100>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b12      	cmp	r3, #18
 80040a6:	d123      	bne.n	80040f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	08da      	lsrs	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3208      	adds	r2, #8
 80040b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	220f      	movs	r2, #15
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	08da      	lsrs	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3208      	adds	r2, #8
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0203 	and.w	r2, r3, #3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80b2 	beq.w	8004296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004132:	4b5f      	ldr	r3, [pc, #380]	; (80042b0 <HAL_GPIO_Init+0x308>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	4a5e      	ldr	r2, [pc, #376]	; (80042b0 <HAL_GPIO_Init+0x308>)
 8004138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413c:	6453      	str	r3, [r2, #68]	; 0x44
 800413e:	4b5c      	ldr	r3, [pc, #368]	; (80042b0 <HAL_GPIO_Init+0x308>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800414a:	4a5a      	ldr	r2, [pc, #360]	; (80042b4 <HAL_GPIO_Init+0x30c>)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	089b      	lsrs	r3, r3, #2
 8004150:	3302      	adds	r3, #2
 8004152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	220f      	movs	r2, #15
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a51      	ldr	r2, [pc, #324]	; (80042b8 <HAL_GPIO_Init+0x310>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d02b      	beq.n	80041ce <HAL_GPIO_Init+0x226>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a50      	ldr	r2, [pc, #320]	; (80042bc <HAL_GPIO_Init+0x314>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d025      	beq.n	80041ca <HAL_GPIO_Init+0x222>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4f      	ldr	r2, [pc, #316]	; (80042c0 <HAL_GPIO_Init+0x318>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01f      	beq.n	80041c6 <HAL_GPIO_Init+0x21e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4e      	ldr	r2, [pc, #312]	; (80042c4 <HAL_GPIO_Init+0x31c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d019      	beq.n	80041c2 <HAL_GPIO_Init+0x21a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4d      	ldr	r2, [pc, #308]	; (80042c8 <HAL_GPIO_Init+0x320>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_GPIO_Init+0x216>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4c      	ldr	r2, [pc, #304]	; (80042cc <HAL_GPIO_Init+0x324>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00d      	beq.n	80041ba <HAL_GPIO_Init+0x212>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4b      	ldr	r2, [pc, #300]	; (80042d0 <HAL_GPIO_Init+0x328>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <HAL_GPIO_Init+0x20e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4a      	ldr	r2, [pc, #296]	; (80042d4 <HAL_GPIO_Init+0x32c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <HAL_GPIO_Init+0x20a>
 80041ae:	2307      	movs	r3, #7
 80041b0:	e00e      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041b2:	2308      	movs	r3, #8
 80041b4:	e00c      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041b6:	2306      	movs	r3, #6
 80041b8:	e00a      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041ba:	2305      	movs	r3, #5
 80041bc:	e008      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041be:	2304      	movs	r3, #4
 80041c0:	e006      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041c2:	2303      	movs	r3, #3
 80041c4:	e004      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e002      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_GPIO_Init+0x228>
 80041ce:	2300      	movs	r3, #0
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	f002 0203 	and.w	r2, r2, #3
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	4093      	lsls	r3, r2
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041e0:	4934      	ldr	r1, [pc, #208]	; (80042b4 <HAL_GPIO_Init+0x30c>)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	3302      	adds	r3, #2
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ee:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <HAL_GPIO_Init+0x330>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004212:	4a31      	ldr	r2, [pc, #196]	; (80042d8 <HAL_GPIO_Init+0x330>)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_GPIO_Init+0x330>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_GPIO_Init+0x330>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_GPIO_Init+0x330>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_GPIO_Init+0x330>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_GPIO_Init+0x330>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004290:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <HAL_GPIO_Init+0x330>)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3301      	adds	r3, #1
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	f67f ae92 	bls.w	8003fc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042a4:	bf00      	nop
 80042a6:	3724      	adds	r7, #36	; 0x24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40013800 	.word	0x40013800
 80042b8:	40020000 	.word	0x40020000
 80042bc:	40020400 	.word	0x40020400
 80042c0:	40020800 	.word	0x40020800
 80042c4:	40020c00 	.word	0x40020c00
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40021400 	.word	0x40021400
 80042d0:	40021800 	.word	0x40021800
 80042d4:	40021c00 	.word	0x40021c00
 80042d8:	40013c00 	.word	0x40013c00

080042dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
 80042e8:	4613      	mov	r3, r2
 80042ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042ec:	787b      	ldrb	r3, [r7, #1]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042f8:	e003      	b.n	8004302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042fa:	887b      	ldrh	r3, [r7, #2]
 80042fc:	041a      	lsls	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	619a      	str	r2, [r3, #24]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004320:	887a      	ldrh	r2, [r7, #2]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	041a      	lsls	r2, r3, #16
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	43d9      	mvns	r1, r3
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	400b      	ands	r3, r1
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe f816 	bl	8002394 <HAL_GPIO_EXTI_Callback>
  }
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40013c00 	.word	0x40013c00

08004374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07f      	b.n	8004486 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd f8bc 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	e006      	b.n	80043fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d104      	bne.n	800440e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_I2C_Init+0x11c>)
 800441a:	430b      	orrs	r3, r1
 800441c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800442c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	ea42 0103 	orr.w	r1, r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	02008000 	.word	0x02008000

08004494 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	4608      	mov	r0, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	460b      	mov	r3, r1
 80044a8:	813b      	strh	r3, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	f040 80f9 	bne.w	80046ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_I2C_Mem_Write+0x34>
 80044c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0ed      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Mem_Write+0x4e>
 80044de:	2302      	movs	r3, #2
 80044e0:	e0e6      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044ea:	f7ff f809 	bl	8003500 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2319      	movs	r3, #25
 80044f6:	2201      	movs	r2, #1
 80044f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fac3 	bl	8004a88 <I2C_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0d1      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2221      	movs	r2, #33	; 0x21
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2240      	movs	r2, #64	; 0x40
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004534:	88f8      	ldrh	r0, [r7, #6]
 8004536:	893a      	ldrh	r2, [r7, #8]
 8004538:	8979      	ldrh	r1, [r7, #10]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4603      	mov	r3, r0
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f9d3 	bl	80048f0 <I2C_RequestMemoryWrite>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0a9      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d90e      	bls.n	8004584 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	b2da      	uxtb	r2, r3
 8004572:	8979      	ldrh	r1, [r7, #10]
 8004574:	2300      	movs	r3, #0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fba5 	bl	8004ccc <I2C_TransferConfig>
 8004582:	e00f      	b.n	80045a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	b2da      	uxtb	r2, r3
 8004594:	8979      	ldrh	r1, [r7, #10]
 8004596:	2300      	movs	r3, #0
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fb94 	bl	8004ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 faad 	bl	8004b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e07b      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d034      	beq.n	800465c <HAL_I2C_Mem_Write+0x1c8>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d130      	bne.n	800465c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	2200      	movs	r2, #0
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fa3f 	bl	8004a88 <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e04d      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2bff      	cmp	r3, #255	; 0xff
 800461c:	d90e      	bls.n	800463c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	22ff      	movs	r2, #255	; 0xff
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	b2da      	uxtb	r2, r3
 800462a:	8979      	ldrh	r1, [r7, #10]
 800462c:	2300      	movs	r3, #0
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fb49 	bl	8004ccc <I2C_TransferConfig>
 800463a:	e00f      	b.n	800465c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464a:	b2da      	uxtb	r2, r3
 800464c:	8979      	ldrh	r1, [r7, #10]
 800464e:	2300      	movs	r3, #0
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fb38 	bl	8004ccc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d19e      	bne.n	80045a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fa8c 	bl	8004b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e01a      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2220      	movs	r2, #32
 8004680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6859      	ldr	r1, [r3, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_I2C_Mem_Write+0x224>)
 800468e:	400b      	ands	r3, r1
 8004690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	fe00e800 	.word	0xfe00e800

080046bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	461a      	mov	r2, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	817b      	strh	r3, [r7, #10]
 80046ce:	460b      	mov	r3, r1
 80046d0:	813b      	strh	r3, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b20      	cmp	r3, #32
 80046e0:	f040 80fd 	bne.w	80048de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_I2C_Mem_Read+0x34>
 80046ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0f1      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_I2C_Mem_Read+0x4e>
 8004706:	2302      	movs	r3, #2
 8004708:	e0ea      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004712:	f7fe fef5 	bl	8003500 <HAL_GetTick>
 8004716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2319      	movs	r3, #25
 800471e:	2201      	movs	r2, #1
 8004720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f9af 	bl	8004a88 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0d5      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2222      	movs	r2, #34	; 0x22
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2240      	movs	r2, #64	; 0x40
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a3a      	ldr	r2, [r7, #32]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800475c:	88f8      	ldrh	r0, [r7, #6]
 800475e:	893a      	ldrh	r2, [r7, #8]
 8004760:	8979      	ldrh	r1, [r7, #10]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	4603      	mov	r3, r0
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f913 	bl	8004998 <I2C_RequestMemoryRead>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0ad      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2bff      	cmp	r3, #255	; 0xff
 800478c:	d90e      	bls.n	80047ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	b2da      	uxtb	r2, r3
 800479a:	8979      	ldrh	r1, [r7, #10]
 800479c:	4b52      	ldr	r3, [pc, #328]	; (80048e8 <HAL_I2C_Mem_Read+0x22c>)
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fa91 	bl	8004ccc <I2C_TransferConfig>
 80047aa:	e00f      	b.n	80047cc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	8979      	ldrh	r1, [r7, #10]
 80047be:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <HAL_I2C_Mem_Read+0x22c>)
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fa80 	bl	8004ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2200      	movs	r2, #0
 80047d4:	2104      	movs	r1, #4
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f956 	bl	8004a88 <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07c      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d034      	beq.n	800488c <HAL_I2C_Mem_Read+0x1d0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d130      	bne.n	800488c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	2200      	movs	r2, #0
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f927 	bl	8004a88 <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e04d      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2bff      	cmp	r3, #255	; 0xff
 800484c:	d90e      	bls.n	800486c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	b2da      	uxtb	r2, r3
 800485a:	8979      	ldrh	r1, [r7, #10]
 800485c:	2300      	movs	r3, #0
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fa31 	bl	8004ccc <I2C_TransferConfig>
 800486a:	e00f      	b.n	800488c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	b2da      	uxtb	r2, r3
 800487c:	8979      	ldrh	r1, [r7, #10]
 800487e:	2300      	movs	r3, #0
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa20 	bl	8004ccc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d19a      	bne.n	80047cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f974 	bl	8004b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e01a      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2220      	movs	r2, #32
 80048b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_I2C_Mem_Read+0x230>)
 80048be:	400b      	ands	r3, r1
 80048c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	80002400 	.word	0x80002400
 80048ec:	fe00e800 	.word	0xfe00e800

080048f0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	817b      	strh	r3, [r7, #10]
 8004902:	460b      	mov	r3, r1
 8004904:	813b      	strh	r3, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	8979      	ldrh	r1, [r7, #10]
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <I2C_RequestMemoryWrite+0xa4>)
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f9d7 	bl	8004ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	69b9      	ldr	r1, [r7, #24]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f8f0 	bl	8004b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e02c      	b.n	800498c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004938:	893b      	ldrh	r3, [r7, #8]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	629a      	str	r2, [r3, #40]	; 0x28
 8004942:	e015      	b.n	8004970 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004944:	893b      	ldrh	r3, [r7, #8]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	b29b      	uxth	r3, r3
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f8d6 	bl	8004b08 <I2C_WaitOnTXISFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e012      	b.n	800498c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004966:	893b      	ldrh	r3, [r7, #8]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2200      	movs	r2, #0
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f884 	bl	8004a88 <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	80002000 	.word	0x80002000

08004998 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	817b      	strh	r3, [r7, #10]
 80049aa:	460b      	mov	r3, r1
 80049ac:	813b      	strh	r3, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	8979      	ldrh	r1, [r7, #10]
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <I2C_RequestMemoryRead+0xa4>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2300      	movs	r3, #0
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f984 	bl	8004ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	69b9      	ldr	r1, [r7, #24]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f89d 	bl	8004b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e02c      	b.n	8004a32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049de:	893b      	ldrh	r3, [r7, #8]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
 80049e8:	e015      	b.n	8004a16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ea:	893b      	ldrh	r3, [r7, #8]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f883 	bl	8004b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e012      	b.n	8004a32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2140      	movs	r1, #64	; 0x40
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f831 	bl	8004a88 <I2C_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	80002000 	.word	0x80002000

08004a40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d103      	bne.n	8004a5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d007      	beq.n	8004a7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	619a      	str	r2, [r3, #24]
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a98:	e022      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d01e      	beq.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe fd2d 	bl	8003500 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d113      	bne.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e00f      	b.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d0cd      	beq.n	8004a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b14:	e02c      	b.n	8004b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f870 	bl	8004c00 <I2C_IsAcknowledgeFailed>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e02a      	b.n	8004b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d01e      	beq.n	8004b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b32:	f7fe fce5 	bl	8003500 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d302      	bcc.n	8004b48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d113      	bne.n	8004b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e007      	b.n	8004b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d1cb      	bne.n	8004b16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b94:	e028      	b.n	8004be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f830 	bl	8004c00 <I2C_IsAcknowledgeFailed>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e026      	b.n	8004bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fe fca9 	bl	8003500 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d113      	bne.n	8004be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e007      	b.n	8004bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d1cf      	bne.n	8004b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d151      	bne.n	8004cbe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c1a:	e022      	b.n	8004c62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d01e      	beq.n	8004c62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c24:	f7fe fc6c 	bl	8003500 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <I2C_IsAcknowledgeFailed+0x3a>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d113      	bne.n	8004c62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e02e      	b.n	8004cc0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d1d5      	bne.n	8004c1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2210      	movs	r2, #16
 8004c76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fedd 	bl	8004a40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c92:	400b      	ands	r3, r1
 8004c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	fe00e800 	.word	0xfe00e800

08004ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	0d5b      	lsrs	r3, r3, #21
 8004ce8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <I2C_TransferConfig+0x58>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	ea02 0103 	and.w	r1, r2, r3
 8004cf6:	897b      	ldrh	r3, [r7, #10]
 8004cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cfc:	7a7b      	ldrb	r3, [r7, #9]
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	03ff63ff 	.word	0x03ff63ff

08004d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d138      	bne.n	8004db0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e032      	b.n	8004db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2224      	movs	r2, #36	; 0x24
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6819      	ldr	r1, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d139      	bne.n	8004e48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e033      	b.n	8004e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2224      	movs	r2, #36	; 0x24
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e62:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e86:	f7fe fb3b 	bl	8003500 <HAL_GetTick>
 8004e8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e8c:	e009      	b.n	8004ea2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e8e:	f7fe fb37 	bl	8003500 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9c:	d901      	bls.n	8004ea2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e022      	b.n	8004ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ea2:	4b14      	ldr	r3, [pc, #80]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eae:	d1ee      	bne.n	8004e8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ebc:	f7fe fb20 	bl	8003500 <HAL_GetTick>
 8004ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ec2:	e009      	b.n	8004ed8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ec4:	f7fe fb1c 	bl	8003500 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed2:	d901      	bls.n	8004ed8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e007      	b.n	8004ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee4:	d1ee      	bne.n	8004ec4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	40007000 	.word	0x40007000

08004ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f00:	2300      	movs	r3, #0
 8004f02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e291      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8087 	beq.w	800502a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f1c:	4b96      	ldr	r3, [pc, #600]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d00c      	beq.n	8004f42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f28:	4b93      	ldr	r3, [pc, #588]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d112      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62>
 8004f34:	4b90      	ldr	r3, [pc, #576]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f40:	d10b      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f42:	4b8d      	ldr	r3, [pc, #564]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d06c      	beq.n	8005028 <HAL_RCC_OscConfig+0x130>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d168      	bne.n	8005028 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e26b      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f62:	d106      	bne.n	8004f72 <HAL_RCC_OscConfig+0x7a>
 8004f64:	4b84      	ldr	r3, [pc, #528]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a83      	ldr	r2, [pc, #524]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	e02e      	b.n	8004fd0 <HAL_RCC_OscConfig+0xd8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x9c>
 8004f7a:	4b7f      	ldr	r3, [pc, #508]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a7e      	ldr	r2, [pc, #504]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	4b7c      	ldr	r3, [pc, #496]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a7b      	ldr	r2, [pc, #492]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e01d      	b.n	8004fd0 <HAL_RCC_OscConfig+0xd8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0xc0>
 8004f9e:	4b76      	ldr	r3, [pc, #472]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a75      	ldr	r2, [pc, #468]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	4b73      	ldr	r3, [pc, #460]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a72      	ldr	r2, [pc, #456]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e00b      	b.n	8004fd0 <HAL_RCC_OscConfig+0xd8>
 8004fb8:	4b6f      	ldr	r3, [pc, #444]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a6e      	ldr	r2, [pc, #440]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b6c      	ldr	r3, [pc, #432]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6b      	ldr	r2, [pc, #428]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d013      	beq.n	8005000 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fe fa92 	bl	8003500 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fe fa8e 	bl	8003500 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e21f      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	4b61      	ldr	r3, [pc, #388]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0xe8>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fe fa7e 	bl	8003500 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005008:	f7fe fa7a 	bl	8003500 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e20b      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	4b57      	ldr	r3, [pc, #348]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x110>
 8005026:	e000      	b.n	800502a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d069      	beq.n	800510a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005036:	4b50      	ldr	r3, [pc, #320]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005042:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b08      	cmp	r3, #8
 800504c:	d11c      	bne.n	8005088 <HAL_RCC_OscConfig+0x190>
 800504e:	4b4a      	ldr	r3, [pc, #296]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d116      	bne.n	8005088 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505a:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_RCC_OscConfig+0x17a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d001      	beq.n	8005072 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e1df      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005072:	4b41      	ldr	r3, [pc, #260]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	493d      	ldr	r1, [pc, #244]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005082:	4313      	orrs	r3, r2
 8005084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005086:	e040      	b.n	800510a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d023      	beq.n	80050d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a38      	ldr	r2, [pc, #224]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fe fa30 	bl	8003500 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a4:	f7fe fa2c 	bl	8003500 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e1bd      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4929      	ldr	r1, [pc, #164]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
 80050d6:	e018      	b.n	800510a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a26      	ldr	r2, [pc, #152]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fe fa0c 	bl	8003500 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fe fa08 	bl	8003500 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e199      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	4b1e      	ldr	r3, [pc, #120]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d038      	beq.n	8005188 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d019      	beq.n	8005152 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511e:	4b16      	ldr	r3, [pc, #88]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005122:	4a15      	ldr	r2, [pc, #84]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512a:	f7fe f9e9 	bl	8003500 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005132:	f7fe f9e5 	bl	8003500 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e176      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x23a>
 8005150:	e01a      	b.n	8005188 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	4a08      	ldr	r2, [pc, #32]	; (8005178 <HAL_RCC_OscConfig+0x280>)
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fe f9cf 	bl	8003500 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005166:	f7fe f9cb 	bl	8003500 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d903      	bls.n	800517c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e15c      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
 8005178:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800517c:	4b91      	ldr	r3, [pc, #580]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800517e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ee      	bne.n	8005166 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80a4 	beq.w	80052de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005196:	4b8b      	ldr	r3, [pc, #556]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4b88      	ldr	r3, [pc, #544]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a87      	ldr	r2, [pc, #540]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b85      	ldr	r3, [pc, #532]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051be:	4b82      	ldr	r3, [pc, #520]	; (80053c8 <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d118      	bne.n	80051fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051ca:	4b7f      	ldr	r3, [pc, #508]	; (80053c8 <HAL_RCC_OscConfig+0x4d0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7e      	ldr	r2, [pc, #504]	; (80053c8 <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fe f993 	bl	8003500 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fe f98f 	bl	8003500 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b64      	cmp	r3, #100	; 0x64
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e120      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f0:	4b75      	ldr	r3, [pc, #468]	; (80053c8 <HAL_RCC_OscConfig+0x4d0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x31a>
 8005204:	4b6f      	ldr	r3, [pc, #444]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	4a6e      	ldr	r2, [pc, #440]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6713      	str	r3, [r2, #112]	; 0x70
 8005210:	e02d      	b.n	800526e <HAL_RCC_OscConfig+0x376>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x33c>
 800521a:	4b6a      	ldr	r3, [pc, #424]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a69      	ldr	r2, [pc, #420]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	6713      	str	r3, [r2, #112]	; 0x70
 8005226:	4b67      	ldr	r3, [pc, #412]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a66      	ldr	r2, [pc, #408]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
 8005232:	e01c      	b.n	800526e <HAL_RCC_OscConfig+0x376>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b05      	cmp	r3, #5
 800523a:	d10c      	bne.n	8005256 <HAL_RCC_OscConfig+0x35e>
 800523c:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	4a60      	ldr	r2, [pc, #384]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005242:	f043 0304 	orr.w	r3, r3, #4
 8005246:	6713      	str	r3, [r2, #112]	; 0x70
 8005248:	4b5e      	ldr	r3, [pc, #376]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	4a5d      	ldr	r2, [pc, #372]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6713      	str	r3, [r2, #112]	; 0x70
 8005254:	e00b      	b.n	800526e <HAL_RCC_OscConfig+0x376>
 8005256:	4b5b      	ldr	r3, [pc, #364]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	4a5a      	ldr	r2, [pc, #360]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6713      	str	r3, [r2, #112]	; 0x70
 8005262:	4b58      	ldr	r3, [pc, #352]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	4a57      	ldr	r2, [pc, #348]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d015      	beq.n	80052a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005276:	f7fe f943 	bl	8003500 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527c:	e00a      	b.n	8005294 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fe f93f 	bl	8003500 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0ce      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005294:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ee      	beq.n	800527e <HAL_RCC_OscConfig+0x386>
 80052a0:	e014      	b.n	80052cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fe f92d 	bl	8003500 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fe f929 	bl	8003500 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e0b8      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c0:	4b40      	ldr	r3, [pc, #256]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ee      	bne.n	80052aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b3c      	ldr	r3, [pc, #240]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a3b      	ldr	r2, [pc, #236]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80a4 	beq.w	8005430 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052e8:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d06b      	beq.n	80053cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d149      	bne.n	8005390 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fc:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a30      	ldr	r2, [pc, #192]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fe f8fa 	bl	8003500 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fe f8f6 	bl	8003500 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e087      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005322:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	3b01      	subs	r3, #1
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	4313      	orrs	r3, r2
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800535a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800535c:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fe f8ca 	bl	8003500 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005370:	f7fe f8c6 	bl	8003500 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e057      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x478>
 800538e:	e04f      	b.n	8005430 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a0b      	ldr	r2, [pc, #44]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 8005396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800539a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fe f8b0 	bl	8003500 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fe f8ac 	bl	8003500 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e03d      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b6:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <HAL_RCC_OscConfig+0x4cc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4ac>
 80053c2:	e035      	b.n	8005430 <HAL_RCC_OscConfig+0x538>
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053cc:	4b1b      	ldr	r3, [pc, #108]	; (800543c <HAL_RCC_OscConfig+0x544>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d028      	beq.n	800542c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d121      	bne.n	800542c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d11a      	bne.n	800542c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005402:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005404:	4293      	cmp	r3, r2
 8005406:	d111      	bne.n	800542c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	3b01      	subs	r3, #1
 8005416:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d107      	bne.n	800542c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800

08005440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0d0      	b.n	80055fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005458:	4b6a      	ldr	r3, [pc, #424]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d910      	bls.n	8005488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b67      	ldr	r3, [pc, #412]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 020f 	bic.w	r2, r3, #15
 800546e:	4965      	ldr	r1, [pc, #404]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	4b63      	ldr	r3, [pc, #396]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0b8      	b.n	80055fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d020      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a0:	4b59      	ldr	r3, [pc, #356]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	4a58      	ldr	r2, [pc, #352]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80054a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b8:	4b53      	ldr	r3, [pc, #332]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a52      	ldr	r2, [pc, #328]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80054be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c4:	4b50      	ldr	r3, [pc, #320]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	494d      	ldr	r1, [pc, #308]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d040      	beq.n	8005564 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d107      	bne.n	80054fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ea:	4b47      	ldr	r3, [pc, #284]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d115      	bne.n	8005522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e07f      	b.n	80055fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005502:	4b41      	ldr	r3, [pc, #260]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e073      	b.n	80055fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005512:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e06b      	b.n	80055fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4936      	ldr	r1, [pc, #216]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 8005530:	4313      	orrs	r3, r2
 8005532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005534:	f7fd ffe4 	bl	8003500 <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	e00a      	b.n	8005552 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553c:	f7fd ffe0 	bl	8003500 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e053      	b.n	80055fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 020c 	and.w	r2, r3, #12
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	429a      	cmp	r2, r3
 8005562:	d1eb      	bne.n	800553c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005564:	4b27      	ldr	r3, [pc, #156]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d210      	bcs.n	8005594 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 020f 	bic.w	r2, r3, #15
 800557a:	4922      	ldr	r1, [pc, #136]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e032      	b.n	80055fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4916      	ldr	r1, [pc, #88]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055be:	4b12      	ldr	r3, [pc, #72]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	490e      	ldr	r1, [pc, #56]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055d2:	f000 f821 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 80055d6:	4601      	mov	r1, r0
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <HAL_RCC_ClockConfig+0x1cc>)
 80055e4:	5cd3      	ldrb	r3, [r2, r3]
 80055e6:	fa21 f303 	lsr.w	r3, r1, r3
 80055ea:	4a09      	ldr	r2, [pc, #36]	; (8005610 <HAL_RCC_ClockConfig+0x1d0>)
 80055ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055ee:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_ClockConfig+0x1d4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fd ff40 	bl	8003478 <HAL_InitTick>

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40023c00 	.word	0x40023c00
 8005608:	40023800 	.word	0x40023800
 800560c:	0800dab8 	.word	0x0800dab8
 8005610:	20000000 	.word	0x20000000
 8005614:	20002ee4 	.word	0x20002ee4

08005618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	2300      	movs	r3, #0
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800562e:	4b63      	ldr	r3, [pc, #396]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b04      	cmp	r3, #4
 8005638:	d007      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x32>
 800563a:	2b08      	cmp	r3, #8
 800563c:	d008      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x38>
 800563e:	2b00      	cmp	r3, #0
 8005640:	f040 80b4 	bne.w	80057ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005644:	4b5e      	ldr	r3, [pc, #376]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005646:	60bb      	str	r3, [r7, #8]
      break;
 8005648:	e0b3      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800564a:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800564c:	60bb      	str	r3, [r7, #8]
      break;
 800564e:	e0b0      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005650:	4b5a      	ldr	r3, [pc, #360]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005658:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800565a:	4b58      	ldr	r3, [pc, #352]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04a      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005666:	4b55      	ldr	r3, [pc, #340]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	099b      	lsrs	r3, r3, #6
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	ea03 0501 	and.w	r5, r3, r1
 800567c:	ea04 0602 	and.w	r6, r4, r2
 8005680:	4629      	mov	r1, r5
 8005682:	4632      	mov	r2, r6
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	0154      	lsls	r4, r2, #5
 800568e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005692:	014b      	lsls	r3, r1, #5
 8005694:	4619      	mov	r1, r3
 8005696:	4622      	mov	r2, r4
 8005698:	1b49      	subs	r1, r1, r5
 800569a:	eb62 0206 	sbc.w	r2, r2, r6
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	f04f 0400 	mov.w	r4, #0
 80056a6:	0194      	lsls	r4, r2, #6
 80056a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056ac:	018b      	lsls	r3, r1, #6
 80056ae:	1a5b      	subs	r3, r3, r1
 80056b0:	eb64 0402 	sbc.w	r4, r4, r2
 80056b4:	f04f 0100 	mov.w	r1, #0
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	00e2      	lsls	r2, r4, #3
 80056be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056c2:	00d9      	lsls	r1, r3, #3
 80056c4:	460b      	mov	r3, r1
 80056c6:	4614      	mov	r4, r2
 80056c8:	195b      	adds	r3, r3, r5
 80056ca:	eb44 0406 	adc.w	r4, r4, r6
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	02a2      	lsls	r2, r4, #10
 80056d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80056dc:	0299      	lsls	r1, r3, #10
 80056de:	460b      	mov	r3, r1
 80056e0:	4614      	mov	r4, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	4621      	mov	r1, r4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f04f 0400 	mov.w	r4, #0
 80056ec:	461a      	mov	r2, r3
 80056ee:	4623      	mov	r3, r4
 80056f0:	f7fb faf2 	bl	8000cd8 <__aeabi_uldivmod>
 80056f4:	4603      	mov	r3, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e049      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	099b      	lsrs	r3, r3, #6
 8005702:	f04f 0400 	mov.w	r4, #0
 8005706:	f240 11ff 	movw	r1, #511	; 0x1ff
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	ea03 0501 	and.w	r5, r3, r1
 8005712:	ea04 0602 	and.w	r6, r4, r2
 8005716:	4629      	mov	r1, r5
 8005718:	4632      	mov	r2, r6
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	f04f 0400 	mov.w	r4, #0
 8005722:	0154      	lsls	r4, r2, #5
 8005724:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005728:	014b      	lsls	r3, r1, #5
 800572a:	4619      	mov	r1, r3
 800572c:	4622      	mov	r2, r4
 800572e:	1b49      	subs	r1, r1, r5
 8005730:	eb62 0206 	sbc.w	r2, r2, r6
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	f04f 0400 	mov.w	r4, #0
 800573c:	0194      	lsls	r4, r2, #6
 800573e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005742:	018b      	lsls	r3, r1, #6
 8005744:	1a5b      	subs	r3, r3, r1
 8005746:	eb64 0402 	sbc.w	r4, r4, r2
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	00e2      	lsls	r2, r4, #3
 8005754:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005758:	00d9      	lsls	r1, r3, #3
 800575a:	460b      	mov	r3, r1
 800575c:	4614      	mov	r4, r2
 800575e:	195b      	adds	r3, r3, r5
 8005760:	eb44 0406 	adc.w	r4, r4, r6
 8005764:	f04f 0100 	mov.w	r1, #0
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	02a2      	lsls	r2, r4, #10
 800576e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005772:	0299      	lsls	r1, r3, #10
 8005774:	460b      	mov	r3, r1
 8005776:	4614      	mov	r4, r2
 8005778:	4618      	mov	r0, r3
 800577a:	4621      	mov	r1, r4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f04f 0400 	mov.w	r4, #0
 8005782:	461a      	mov	r2, r3
 8005784:	4623      	mov	r3, r4
 8005786:	f7fb faa7 	bl	8000cd8 <__aeabi_uldivmod>
 800578a:	4603      	mov	r3, r0
 800578c:	460c      	mov	r4, r1
 800578e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	3301      	adds	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	60bb      	str	r3, [r7, #8]
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057ae:	60bb      	str	r3, [r7, #8]
      break;
 80057b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b2:	68bb      	ldr	r3, [r7, #8]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057bc:	40023800 	.word	0x40023800
 80057c0:	00f42400 	.word	0x00f42400

080057c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000000 	.word	0x20000000

080057dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e0:	f7ff fff0 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80057e4:	4601      	mov	r1, r0
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	0a9b      	lsrs	r3, r3, #10
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	4a03      	ldr	r2, [pc, #12]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f2:	5cd3      	ldrb	r3, [r2, r3]
 80057f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40023800 	.word	0x40023800
 8005800:	0800dac8 	.word	0x0800dac8

08005804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005808:	f7ff ffdc 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 800580c:	4601      	mov	r1, r0
 800580e:	4b05      	ldr	r3, [pc, #20]	; (8005824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	0b5b      	lsrs	r3, r3, #13
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	4a03      	ldr	r2, [pc, #12]	; (8005828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800581a:	5cd3      	ldrb	r3, [r2, r3]
 800581c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005820:	4618      	mov	r0, r3
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40023800 	.word	0x40023800
 8005828:	0800dac8 	.word	0x0800dac8

0800582c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d012      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005850:	4b65      	ldr	r3, [pc, #404]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4a64      	ldr	r2, [pc, #400]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005856:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800585a:	6093      	str	r3, [r2, #8]
 800585c:	4b62      	ldr	r3, [pc, #392]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	4960      	ldr	r1, [pc, #384]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005872:	2301      	movs	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005882:	4b59      	ldr	r3, [pc, #356]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005890:	4955      	ldr	r1, [pc, #340]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a0:	d101      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d017      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058be:	4b4a      	ldr	r3, [pc, #296]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	4946      	ldr	r1, [pc, #280]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058dc:	d101      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80058de:	2301      	movs	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80058ea:	2301      	movs	r3, #1
 80058ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 808b 	beq.w	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058fc:	4b3a      	ldr	r3, [pc, #232]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	4a39      	ldr	r2, [pc, #228]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005906:	6413      	str	r3, [r2, #64]	; 0x40
 8005908:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005914:	4b35      	ldr	r3, [pc, #212]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a34      	ldr	r2, [pc, #208]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800591a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005920:	f7fd fdee 	bl	8003500 <HAL_GetTick>
 8005924:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005926:	e008      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005928:	f7fd fdea 	bl	8003500 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b64      	cmp	r3, #100	; 0x64
 8005934:	d901      	bls.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e2bc      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800593a:	4b2c      	ldr	r3, [pc, #176]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005946:	4b28      	ldr	r3, [pc, #160]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d035      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	d02e      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800596e:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005978:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800597a:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005984:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800598c:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b01      	cmp	r3, #1
 8005996:	d114      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fd fdb2 	bl	8003500 <HAL_GetTick>
 800599c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599e:	e00a      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a0:	f7fd fdae 	bl	8003500 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e27e      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0ee      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ce:	d111      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80059de:	400b      	ands	r3, r1
 80059e0:	4901      	ldr	r1, [pc, #4]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
 80059e6:	e00b      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40007000 	.word	0x40007000
 80059f0:	0ffffcff 	.word	0x0ffffcff
 80059f4:	4ba4      	ldr	r3, [pc, #656]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4aa3      	ldr	r2, [pc, #652]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059fe:	6093      	str	r3, [r2, #8]
 8005a00:	4ba1      	ldr	r3, [pc, #644]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0c:	499e      	ldr	r1, [pc, #632]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d010      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a1e:	4b9a      	ldr	r3, [pc, #616]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a24:	4a98      	ldr	r2, [pc, #608]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a2e:	4b96      	ldr	r3, [pc, #600]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	4993      	ldr	r1, [pc, #588]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a4c:	4b8e      	ldr	r3, [pc, #568]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5a:	498b      	ldr	r1, [pc, #556]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a6e:	4b86      	ldr	r3, [pc, #536]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7c:	4982      	ldr	r1, [pc, #520]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a90:	4b7d      	ldr	r3, [pc, #500]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9e:	497a      	ldr	r1, [pc, #488]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ab2:	4b75      	ldr	r3, [pc, #468]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f023 0203 	bic.w	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac0:	4971      	ldr	r1, [pc, #452]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ad4:	4b6c      	ldr	r3, [pc, #432]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f023 020c 	bic.w	r2, r3, #12
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	4969      	ldr	r1, [pc, #420]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005af6:	4b64      	ldr	r3, [pc, #400]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	4960      	ldr	r1, [pc, #384]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b18:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b26:	4958      	ldr	r1, [pc, #352]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b3a:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	494f      	ldr	r1, [pc, #316]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b5c:	4b4a      	ldr	r3, [pc, #296]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	4947      	ldr	r1, [pc, #284]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b7e:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	493e      	ldr	r1, [pc, #248]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ba0:	4b39      	ldr	r3, [pc, #228]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	4936      	ldr	r1, [pc, #216]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d011      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bc2:	4b31      	ldr	r3, [pc, #196]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd0:	492d      	ldr	r1, [pc, #180]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be0:	d101      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005be2:	2301      	movs	r3, #1
 8005be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bf2:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c00:	4921      	ldr	r1, [pc, #132]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c14:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c22:	4919      	ldr	r1, [pc, #100]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c44:	4910      	ldr	r1, [pc, #64]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d006      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 809d 	beq.w	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6c:	f7fd fc48 	bl	8003500 <HAL_GetTick>
 8005c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c72:	e00b      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c74:	f7fd fc44 	bl	8003500 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b64      	cmp	r3, #100	; 0x64
 8005c80:	d904      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e116      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c8c:	4b8b      	ldr	r3, [pc, #556]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ed      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d017      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d113      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cac:	4b83      	ldr	r3, [pc, #524]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb2:	0e1b      	lsrs	r3, r3, #24
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	019a      	lsls	r2, r3, #6
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	061b      	lsls	r3, r3, #24
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	071b      	lsls	r3, r3, #28
 8005ccc:	497b      	ldr	r1, [pc, #492]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d024      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cfe:	d11f      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d00:	4b6e      	ldr	r3, [pc, #440]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d06:	0f1b      	lsrs	r3, r3, #28
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	019a      	lsls	r2, r3, #6
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	071b      	lsls	r3, r3, #28
 8005d20:	4966      	ldr	r1, [pc, #408]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d28:	4b64      	ldr	r3, [pc, #400]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d2e:	f023 021f 	bic.w	r2, r3, #31
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	4960      	ldr	r1, [pc, #384]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	019a      	lsls	r2, r3, #6
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	071b      	lsls	r3, r3, #28
 8005d60:	4956      	ldr	r1, [pc, #344]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d68:	4b54      	ldr	r3, [pc, #336]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a53      	ldr	r2, [pc, #332]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d74:	f7fd fbc4 	bl	8003500 <HAL_GetTick>
 8005d78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d7c:	f7fd fbc0 	bl	8003500 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b64      	cmp	r3, #100	; 0x64
 8005d88:	d901      	bls.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e092      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d8e:	4b4b      	ldr	r3, [pc, #300]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	f040 8088 	bne.w	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005da2:	4b46      	ldr	r3, [pc, #280]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a45      	ldr	r2, [pc, #276]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dae:	f7fd fba7 	bl	8003500 <HAL_GetTick>
 8005db2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005db6:	f7fd fba3 	bl	8003500 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b64      	cmp	r3, #100	; 0x64
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e075      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dc8:	4b3c      	ldr	r3, [pc, #240]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd4:	d0ef      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d024      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d120      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005dfe:	4b2f      	ldr	r3, [pc, #188]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	019a      	lsls	r2, r3, #6
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	4927      	ldr	r1, [pc, #156]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e26:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	4920      	ldr	r1, [pc, #128]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d018      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e54:	d113      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5c:	0e1b      	lsrs	r3, r3, #24
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	019a      	lsls	r2, r3, #6
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	431a      	orrs	r2, r3
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	4911      	ldr	r1, [pc, #68]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e8a:	f7fd fb39 	bl	8003500 <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e92:	f7fd fb35 	bl	8003500 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b64      	cmp	r3, #100	; 0x64
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e007      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb0:	d1ef      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40023800 	.word	0x40023800

08005ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e049      	b.n	8005f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fc ff42 	bl	8002d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f000 fab0 	bl	8006464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d001      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e054      	b.n	8006032 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a26      	ldr	r2, [pc, #152]	; (8006040 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d022      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x80>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb2:	d01d      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x80>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a22      	ldr	r2, [pc, #136]	; (8006044 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d018      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x80>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a21      	ldr	r2, [pc, #132]	; (8006048 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x80>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1f      	ldr	r2, [pc, #124]	; (800604c <HAL_TIM_Base_Start_IT+0xdc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00e      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x80>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <HAL_TIM_Base_Start_IT+0xe0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d009      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x80>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <HAL_TIM_Base_Start_IT+0xe4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x80>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d115      	bne.n	800601c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	4b19      	ldr	r3, [pc, #100]	; (800605c <HAL_TIM_Base_Start_IT+0xec>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d015      	beq.n	800602e <HAL_TIM_Base_Start_IT+0xbe>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d011      	beq.n	800602e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	e008      	b.n	800602e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	e000      	b.n	8006030 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40010000 	.word	0x40010000
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40010400 	.word	0x40010400
 8006054:	40014000 	.word	0x40014000
 8006058:	40001800 	.word	0x40001800
 800605c:	00010007 	.word	0x00010007

08006060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b02      	cmp	r3, #2
 8006074:	d122      	bne.n	80060bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b02      	cmp	r3, #2
 8006082:	d11b      	bne.n	80060bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0202 	mvn.w	r2, #2
 800608c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9c0 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f9b2 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f9c3 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d122      	bne.n	8006110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d11b      	bne.n	8006110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0204 	mvn.w	r2, #4
 80060e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f996 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 80060fc:	e005      	b.n	800610a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f988 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f999 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b08      	cmp	r3, #8
 800611c:	d122      	bne.n	8006164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b08      	cmp	r3, #8
 800612a:	d11b      	bne.n	8006164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0208 	mvn.w	r2, #8
 8006134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2204      	movs	r2, #4
 800613a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f96c 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f95e 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f96f 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b10      	cmp	r3, #16
 8006170:	d122      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b10      	cmp	r3, #16
 800617e:	d11b      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0210 	mvn.w	r2, #16
 8006188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2208      	movs	r2, #8
 800618e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f942 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f934 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f945 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10e      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d107      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0201 	mvn.w	r2, #1
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fc f8fe 	bl	80023e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b80      	cmp	r3, #128	; 0x80
 80061f0:	d10e      	bne.n	8006210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fc:	2b80      	cmp	r3, #128	; 0x80
 80061fe:	d107      	bne.n	8006210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fafc 	bl	8006808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621e:	d10e      	bne.n	800623e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b80      	cmp	r3, #128	; 0x80
 800622c:	d107      	bne.n	800623e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 faef 	bl	800681c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d10e      	bne.n	800626a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d107      	bne.n	800626a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f8f3 	bl	8006450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b20      	cmp	r3, #32
 8006276:	d10e      	bne.n	8006296 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b20      	cmp	r3, #32
 8006284:	d107      	bne.n	8006296 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f06f 0220 	mvn.w	r2, #32
 800628e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 faaf 	bl	80067f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_ConfigClockSource+0x18>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e0a6      	b.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4b4f      	ldr	r3, [pc, #316]	; (8006410 <HAL_TIM_ConfigClockSource+0x170>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d067      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0x120>
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d80b      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x6c>
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d073      	beq.n	80063e0 <HAL_TIM_ConfigClockSource+0x140>
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d802      	bhi.n	8006302 <HAL_TIM_ConfigClockSource+0x62>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d06f      	beq.n	80063e0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006300:	e078      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006302:	2b20      	cmp	r3, #32
 8006304:	d06c      	beq.n	80063e0 <HAL_TIM_ConfigClockSource+0x140>
 8006306:	2b30      	cmp	r3, #48	; 0x30
 8006308:	d06a      	beq.n	80063e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800630a:	e073      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800630c:	2b70      	cmp	r3, #112	; 0x70
 800630e:	d00d      	beq.n	800632c <HAL_TIM_ConfigClockSource+0x8c>
 8006310:	2b70      	cmp	r3, #112	; 0x70
 8006312:	d804      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x7e>
 8006314:	2b50      	cmp	r3, #80	; 0x50
 8006316:	d033      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0xe0>
 8006318:	2b60      	cmp	r3, #96	; 0x60
 800631a:	d041      	beq.n	80063a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800631c:	e06a      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d066      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x152>
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006328:	d017      	beq.n	800635a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800632a:	e063      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6899      	ldr	r1, [r3, #8]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f000 f9ac 	bl	8006698 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800634e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	609a      	str	r2, [r3, #8]
      break;
 8006358:	e04c      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6899      	ldr	r1, [r3, #8]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f000 f995 	bl	8006698 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800637c:	609a      	str	r2, [r3, #8]
      break;
 800637e:	e039      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	461a      	mov	r2, r3
 800638e:	f000 f909 	bl	80065a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2150      	movs	r1, #80	; 0x50
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f962 	bl	8006662 <TIM_ITRx_SetConfig>
      break;
 800639e:	e029      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	461a      	mov	r2, r3
 80063ae:	f000 f928 	bl	8006602 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2160      	movs	r1, #96	; 0x60
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 f952 	bl	8006662 <TIM_ITRx_SetConfig>
      break;
 80063be:	e019      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	461a      	mov	r2, r3
 80063ce:	f000 f8e9 	bl	80065a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2140      	movs	r1, #64	; 0x40
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 f942 	bl	8006662 <TIM_ITRx_SetConfig>
      break;
 80063de:	e009      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f000 f939 	bl	8006662 <TIM_ITRx_SetConfig>
        break;
 80063f0:	e000      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80063f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	fffeff88 	.word	0xfffeff88

08006414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a40      	ldr	r2, [pc, #256]	; (8006578 <TIM_Base_SetConfig+0x114>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006482:	d00f      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3d      	ldr	r2, [pc, #244]	; (800657c <TIM_Base_SetConfig+0x118>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00b      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3c      	ldr	r2, [pc, #240]	; (8006580 <TIM_Base_SetConfig+0x11c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3b      	ldr	r2, [pc, #236]	; (8006584 <TIM_Base_SetConfig+0x120>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3a      	ldr	r2, [pc, #232]	; (8006588 <TIM_Base_SetConfig+0x124>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d108      	bne.n	80064b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2f      	ldr	r2, [pc, #188]	; (8006578 <TIM_Base_SetConfig+0x114>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d02b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d027      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2c      	ldr	r2, [pc, #176]	; (800657c <TIM_Base_SetConfig+0x118>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d023      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <TIM_Base_SetConfig+0x11c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01f      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <TIM_Base_SetConfig+0x120>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a29      	ldr	r2, [pc, #164]	; (8006588 <TIM_Base_SetConfig+0x124>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d017      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a28      	ldr	r2, [pc, #160]	; (800658c <TIM_Base_SetConfig+0x128>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a27      	ldr	r2, [pc, #156]	; (8006590 <TIM_Base_SetConfig+0x12c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a26      	ldr	r2, [pc, #152]	; (8006594 <TIM_Base_SetConfig+0x130>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a25      	ldr	r2, [pc, #148]	; (8006598 <TIM_Base_SetConfig+0x134>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a24      	ldr	r2, [pc, #144]	; (800659c <TIM_Base_SetConfig+0x138>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a23      	ldr	r2, [pc, #140]	; (80065a0 <TIM_Base_SetConfig+0x13c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d108      	bne.n	8006528 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <TIM_Base_SetConfig+0x114>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0xf8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a0c      	ldr	r2, [pc, #48]	; (8006588 <TIM_Base_SetConfig+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d103      	bne.n	8006564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	615a      	str	r2, [r3, #20]
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40010400 	.word	0x40010400
 800658c:	40014000 	.word	0x40014000
 8006590:	40014400 	.word	0x40014400
 8006594:	40014800 	.word	0x40014800
 8006598:	40001800 	.word	0x40001800
 800659c:	40001c00 	.word	0x40001c00
 80065a0:	40002000 	.word	0x40002000

080065a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f023 030a 	bic.w	r3, r3, #10
 80065e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006602:	b480      	push	{r7}
 8006604:	b087      	sub	sp, #28
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f023 0210 	bic.w	r2, r3, #16
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800662c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800663e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	f043 0307 	orr.w	r3, r3, #7
 8006684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	609a      	str	r2, [r3, #8]
}
 800668c:	bf00      	nop
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	021a      	lsls	r2, r3, #8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e06d      	b.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a30      	ldr	r2, [pc, #192]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2f      	ldr	r2, [pc, #188]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800672a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d022      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d01d      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d018      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00e      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a15      	ldr	r2, [pc, #84]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d009      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10c      	bne.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40001800 	.word	0x40001800

080067f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e040      	b.n	80068c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fc fd28 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2224      	movs	r2, #36	; 0x24
 800685c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fb7c 	bl	8006f6c <UART_SetConfig>
 8006874:	4603      	mov	r3, r0
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e022      	b.n	80068c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fdd0 	bl	800742c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800689a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fe57 	bl	8007570 <UART_CheckIdleState>
 80068c2:	4603      	mov	r3, r0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	f040 8081 	bne.w	80069e8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <HAL_UART_Transmit+0x26>
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e079      	b.n	80069ea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_UART_Transmit+0x38>
 8006900:	2302      	movs	r3, #2
 8006902:	e072      	b.n	80069ea <HAL_UART_Transmit+0x11e>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2221      	movs	r2, #33	; 0x21
 8006918:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800691a:	f7fc fdf1 	bl	8003500 <HAL_GetTick>
 800691e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006938:	d108      	bne.n	800694c <HAL_UART_Transmit+0x80>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	e003      	b.n	8006954 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800695c:	e02c      	b.n	80069b8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	2180      	movs	r1, #128	; 0x80
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fe34 	bl	80075d6 <UART_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e038      	b.n	80069ea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10b      	bne.n	8006996 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800698c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	3302      	adds	r3, #2
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e007      	b.n	80069a6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1cc      	bne.n	800695e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2200      	movs	r2, #0
 80069cc:	2140      	movs	r1, #64	; 0x40
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fe01 	bl	80075d6 <UART_WaitOnFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e005      	b.n	80069ea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	e000      	b.n	80069ea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80069e8:	2302      	movs	r3, #2
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d12c      	bne.n	8006a62 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_UART_Receive_DMA+0x22>
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e025      	b.n	8006a64 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Receive_DMA+0x34>
 8006a22:	2302      	movs	r3, #2
 8006a24:	e01e      	b.n	8006a64 <HAL_UART_Receive_DMA+0x72>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a50:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	461a      	mov	r2, r3
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 fe39 	bl	80076d0 <UART_Start_Receive_DMA>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	e000      	b.n	8006a64 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
  }
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0201 	bic.w	r2, r2, #1
 8006a92:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d107      	bne.n	8006aac <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0210 	bic.w	r2, r2, #16
 8006aaa:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d125      	bne.n	8006b06 <HAL_UART_AbortReceive+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d019      	beq.n	8006b06 <HAL_UART_AbortReceive+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fc ff5c 	bl	800399c <HAL_DMA_Abort>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00d      	beq.n	8006b06 <HAL_UART_AbortReceive+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fd f970 	bl	8003dd4 <HAL_DMA_GetError>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d105      	bne.n	8006b06 <HAL_UART_AbortReceive+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2210      	movs	r2, #16
 8006afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e016      	b.n	8006b34 <HAL_UART_AbortReceive+0xc8>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	220f      	movs	r2, #15
 8006b14:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f042 0208 	orr.w	r2, r2, #8
 8006b24:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b62:	4013      	ands	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d113      	bne.n	8006b94 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 81ba 	beq.w	8006efe <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
      }
      return;
 8006b92:	e1b4      	b.n	8006efe <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80e3 	beq.w	8006d62 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d105      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4ba5      	ldr	r3, [pc, #660]	; (8006e40 <HAL_UART_IRQHandler+0x304>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80d8 	beq.w	8006d62 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d010      	beq.n	8006bde <HAL_UART_IRQHandler+0xa2>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd4:	f043 0201 	orr.w	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d010      	beq.n	8006c0a <HAL_UART_IRQHandler+0xce>
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c00:	f043 0204 	orr.w	r2, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d010      	beq.n	8006c36 <HAL_UART_IRQHandler+0xfa>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2204      	movs	r2, #4
 8006c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c2c:	f043 0202 	orr.w	r2, r3, #2
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d015      	beq.n	8006c6c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c62:	f043 0208 	orr.w	r2, r3, #8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d011      	beq.n	8006c9a <HAL_UART_IRQHandler+0x15e>
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c90:	f043 0220 	orr.w	r2, r3, #32
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 812e 	beq.w	8006f02 <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d004      	beq.n	8006cea <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d031      	beq.n	8006d4e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fd71 	bl	80077d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d123      	bne.n	8006d46 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d013      	beq.n	8006d3e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	4a4a      	ldr	r2, [pc, #296]	; (8006e44 <HAL_UART_IRQHandler+0x308>)
 8006d1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fc feaa 	bl	8003a7c <HAL_DMA_Abort_IT>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d017      	beq.n	8006d5e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3c:	e00f      	b.n	8006d5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fb fafc 	bl	800233c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d44:	e00b      	b.n	8006d5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fb faf8 	bl	800233c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	e007      	b.n	8006d5e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fb faf4 	bl	800233c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d5c:	e0d1      	b.n	8006f02 <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5e:	bf00      	nop
    return;
 8006d60:	e0cf      	b.n	8006f02 <HAL_UART_IRQHandler+0x3c6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	f040 80a7 	bne.w	8006eba <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80a1 	beq.w	8006eba <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 809b 	beq.w	8006eba <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2210      	movs	r2, #16
 8006d8a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d156      	bne.n	8006e48 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006da4:	893b      	ldrh	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 80ad 	beq.w	8006f06 <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006db2:	893a      	ldrh	r2, [r7, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	f080 80a6 	bcs.w	8006f06 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	893a      	ldrh	r2, [r7, #8]
 8006dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dcc:	d02a      	beq.n	8006e24 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ddc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0201 	bic.w	r2, r2, #1
 8006dec:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dfc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0210 	bic.w	r2, r2, #16
 8006e18:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fc fdbc 	bl	800399c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f88b 	bl	8006f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e3e:	e062      	b.n	8006f06 <HAL_UART_IRQHandler+0x3ca>
 8006e40:	04000120 	.word	0x04000120
 8006e44:	08007979 	.word	0x08007979
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d051      	beq.n	8006f0a <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 8006e66:	897b      	ldrh	r3, [r7, #10]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d04e      	beq.n	8006f0a <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e7a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0210 	bic.w	r2, r2, #16
 8006eac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eae:	897b      	ldrh	r3, [r7, #10]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f84e 	bl	8006f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006eb8:	e027      	b.n	8006f0a <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01b      	beq.n	8006f0e <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
    }
    return;
 8006ede:	e016      	b.n	8006f0e <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d012      	beq.n	8006f10 <HAL_UART_IRQHandler+0x3d4>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fd55 	bl	80079a4 <UART_EndTransmit_IT>
    return;
 8006efa:	bf00      	nop
 8006efc:	e008      	b.n	8006f10 <HAL_UART_IRQHandler+0x3d4>
      return;
 8006efe:	bf00      	nop
 8006f00:	e006      	b.n	8006f10 <HAL_UART_IRQHandler+0x3d4>
    return;
 8006f02:	bf00      	nop
 8006f04:	e004      	b.n	8006f10 <HAL_UART_IRQHandler+0x3d4>
      return;
 8006f06:	bf00      	nop
 8006f08:	e002      	b.n	8006f10 <HAL_UART_IRQHandler+0x3d4>
      return;
 8006f0a:	bf00      	nop
 8006f0c:	e000      	b.n	8006f10 <HAL_UART_IRQHandler+0x3d4>
    return;
 8006f0e:	bf00      	nop
  }

}
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop

08006f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4bb1      	ldr	r3, [pc, #708]	; (800725c <UART_SetConfig+0x2f0>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a9f      	ldr	r2, [pc, #636]	; (8007260 <UART_SetConfig+0x2f4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d121      	bne.n	800702c <UART_SetConfig+0xc0>
 8006fe8:	4b9e      	ldr	r3, [pc, #632]	; (8007264 <UART_SetConfig+0x2f8>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d816      	bhi.n	8007024 <UART_SetConfig+0xb8>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x90>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	08007019 	.word	0x08007019
 8007004:	08007013 	.word	0x08007013
 8007008:	0800701f 	.word	0x0800701f
 800700c:	2301      	movs	r3, #1
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e151      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007012:	2302      	movs	r3, #2
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e14e      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007018:	2304      	movs	r3, #4
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e14b      	b.n	80072b6 <UART_SetConfig+0x34a>
 800701e:	2308      	movs	r3, #8
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	e148      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007024:	2310      	movs	r3, #16
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	bf00      	nop
 800702a:	e144      	b.n	80072b6 <UART_SetConfig+0x34a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a8d      	ldr	r2, [pc, #564]	; (8007268 <UART_SetConfig+0x2fc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d134      	bne.n	80070a0 <UART_SetConfig+0x134>
 8007036:	4b8b      	ldr	r3, [pc, #556]	; (8007264 <UART_SetConfig+0x2f8>)
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703c:	f003 030c 	and.w	r3, r3, #12
 8007040:	2b0c      	cmp	r3, #12
 8007042:	d829      	bhi.n	8007098 <UART_SetConfig+0x12c>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0xe0>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007081 	.word	0x08007081
 8007050:	08007099 	.word	0x08007099
 8007054:	08007099 	.word	0x08007099
 8007058:	08007099 	.word	0x08007099
 800705c:	0800708d 	.word	0x0800708d
 8007060:	08007099 	.word	0x08007099
 8007064:	08007099 	.word	0x08007099
 8007068:	08007099 	.word	0x08007099
 800706c:	08007087 	.word	0x08007087
 8007070:	08007099 	.word	0x08007099
 8007074:	08007099 	.word	0x08007099
 8007078:	08007099 	.word	0x08007099
 800707c:	08007093 	.word	0x08007093
 8007080:	2300      	movs	r3, #0
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	e117      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007086:	2302      	movs	r3, #2
 8007088:	77fb      	strb	r3, [r7, #31]
 800708a:	e114      	b.n	80072b6 <UART_SetConfig+0x34a>
 800708c:	2304      	movs	r3, #4
 800708e:	77fb      	strb	r3, [r7, #31]
 8007090:	e111      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007092:	2308      	movs	r3, #8
 8007094:	77fb      	strb	r3, [r7, #31]
 8007096:	e10e      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007098:	2310      	movs	r3, #16
 800709a:	77fb      	strb	r3, [r7, #31]
 800709c:	bf00      	nop
 800709e:	e10a      	b.n	80072b6 <UART_SetConfig+0x34a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a71      	ldr	r2, [pc, #452]	; (800726c <UART_SetConfig+0x300>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d120      	bne.n	80070ec <UART_SetConfig+0x180>
 80070aa:	4b6e      	ldr	r3, [pc, #440]	; (8007264 <UART_SetConfig+0x2f8>)
 80070ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070b4:	2b10      	cmp	r3, #16
 80070b6:	d00f      	beq.n	80070d8 <UART_SetConfig+0x16c>
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d802      	bhi.n	80070c2 <UART_SetConfig+0x156>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <UART_SetConfig+0x160>
 80070c0:	e010      	b.n	80070e4 <UART_SetConfig+0x178>
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	d005      	beq.n	80070d2 <UART_SetConfig+0x166>
 80070c6:	2b30      	cmp	r3, #48	; 0x30
 80070c8:	d009      	beq.n	80070de <UART_SetConfig+0x172>
 80070ca:	e00b      	b.n	80070e4 <UART_SetConfig+0x178>
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	e0f1      	b.n	80072b6 <UART_SetConfig+0x34a>
 80070d2:	2302      	movs	r3, #2
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e0ee      	b.n	80072b6 <UART_SetConfig+0x34a>
 80070d8:	2304      	movs	r3, #4
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e0eb      	b.n	80072b6 <UART_SetConfig+0x34a>
 80070de:	2308      	movs	r3, #8
 80070e0:	77fb      	strb	r3, [r7, #31]
 80070e2:	e0e8      	b.n	80072b6 <UART_SetConfig+0x34a>
 80070e4:	2310      	movs	r3, #16
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	bf00      	nop
 80070ea:	e0e4      	b.n	80072b6 <UART_SetConfig+0x34a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a5f      	ldr	r2, [pc, #380]	; (8007270 <UART_SetConfig+0x304>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d120      	bne.n	8007138 <UART_SetConfig+0x1cc>
 80070f6:	4b5b      	ldr	r3, [pc, #364]	; (8007264 <UART_SetConfig+0x2f8>)
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	d00f      	beq.n	8007124 <UART_SetConfig+0x1b8>
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d802      	bhi.n	800710e <UART_SetConfig+0x1a2>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <UART_SetConfig+0x1ac>
 800710c:	e010      	b.n	8007130 <UART_SetConfig+0x1c4>
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d005      	beq.n	800711e <UART_SetConfig+0x1b2>
 8007112:	2bc0      	cmp	r3, #192	; 0xc0
 8007114:	d009      	beq.n	800712a <UART_SetConfig+0x1be>
 8007116:	e00b      	b.n	8007130 <UART_SetConfig+0x1c4>
 8007118:	2300      	movs	r3, #0
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e0cb      	b.n	80072b6 <UART_SetConfig+0x34a>
 800711e:	2302      	movs	r3, #2
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e0c8      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007124:	2304      	movs	r3, #4
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e0c5      	b.n	80072b6 <UART_SetConfig+0x34a>
 800712a:	2308      	movs	r3, #8
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e0c2      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007130:	2310      	movs	r3, #16
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	bf00      	nop
 8007136:	e0be      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a4d      	ldr	r2, [pc, #308]	; (8007274 <UART_SetConfig+0x308>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d124      	bne.n	800718c <UART_SetConfig+0x220>
 8007142:	4b48      	ldr	r3, [pc, #288]	; (8007264 <UART_SetConfig+0x2f8>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007150:	d012      	beq.n	8007178 <UART_SetConfig+0x20c>
 8007152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007156:	d802      	bhi.n	800715e <UART_SetConfig+0x1f2>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <UART_SetConfig+0x200>
 800715c:	e012      	b.n	8007184 <UART_SetConfig+0x218>
 800715e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007162:	d006      	beq.n	8007172 <UART_SetConfig+0x206>
 8007164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007168:	d009      	beq.n	800717e <UART_SetConfig+0x212>
 800716a:	e00b      	b.n	8007184 <UART_SetConfig+0x218>
 800716c:	2300      	movs	r3, #0
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e0a1      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007172:	2302      	movs	r3, #2
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	e09e      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007178:	2304      	movs	r3, #4
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e09b      	b.n	80072b6 <UART_SetConfig+0x34a>
 800717e:	2308      	movs	r3, #8
 8007180:	77fb      	strb	r3, [r7, #31]
 8007182:	e098      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007184:	2310      	movs	r3, #16
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	bf00      	nop
 800718a:	e094      	b.n	80072b6 <UART_SetConfig+0x34a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a39      	ldr	r2, [pc, #228]	; (8007278 <UART_SetConfig+0x30c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d124      	bne.n	80071e0 <UART_SetConfig+0x274>
 8007196:	4b33      	ldr	r3, [pc, #204]	; (8007264 <UART_SetConfig+0x2f8>)
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a4:	d012      	beq.n	80071cc <UART_SetConfig+0x260>
 80071a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071aa:	d802      	bhi.n	80071b2 <UART_SetConfig+0x246>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <UART_SetConfig+0x254>
 80071b0:	e012      	b.n	80071d8 <UART_SetConfig+0x26c>
 80071b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b6:	d006      	beq.n	80071c6 <UART_SetConfig+0x25a>
 80071b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071bc:	d009      	beq.n	80071d2 <UART_SetConfig+0x266>
 80071be:	e00b      	b.n	80071d8 <UART_SetConfig+0x26c>
 80071c0:	2301      	movs	r3, #1
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e077      	b.n	80072b6 <UART_SetConfig+0x34a>
 80071c6:	2302      	movs	r3, #2
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e074      	b.n	80072b6 <UART_SetConfig+0x34a>
 80071cc:	2304      	movs	r3, #4
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e071      	b.n	80072b6 <UART_SetConfig+0x34a>
 80071d2:	2308      	movs	r3, #8
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e06e      	b.n	80072b6 <UART_SetConfig+0x34a>
 80071d8:	2310      	movs	r3, #16
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	bf00      	nop
 80071de:	e06a      	b.n	80072b6 <UART_SetConfig+0x34a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a25      	ldr	r2, [pc, #148]	; (800727c <UART_SetConfig+0x310>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d124      	bne.n	8007234 <UART_SetConfig+0x2c8>
 80071ea:	4b1e      	ldr	r3, [pc, #120]	; (8007264 <UART_SetConfig+0x2f8>)
 80071ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f8:	d012      	beq.n	8007220 <UART_SetConfig+0x2b4>
 80071fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fe:	d802      	bhi.n	8007206 <UART_SetConfig+0x29a>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d007      	beq.n	8007214 <UART_SetConfig+0x2a8>
 8007204:	e012      	b.n	800722c <UART_SetConfig+0x2c0>
 8007206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720a:	d006      	beq.n	800721a <UART_SetConfig+0x2ae>
 800720c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007210:	d009      	beq.n	8007226 <UART_SetConfig+0x2ba>
 8007212:	e00b      	b.n	800722c <UART_SetConfig+0x2c0>
 8007214:	2300      	movs	r3, #0
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e04d      	b.n	80072b6 <UART_SetConfig+0x34a>
 800721a:	2302      	movs	r3, #2
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e04a      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007220:	2304      	movs	r3, #4
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e047      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007226:	2308      	movs	r3, #8
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e044      	b.n	80072b6 <UART_SetConfig+0x34a>
 800722c:	2310      	movs	r3, #16
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	bf00      	nop
 8007232:	e040      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a11      	ldr	r2, [pc, #68]	; (8007280 <UART_SetConfig+0x314>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d139      	bne.n	80072b2 <UART_SetConfig+0x346>
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <UART_SetConfig+0x2f8>)
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800724c:	d027      	beq.n	800729e <UART_SetConfig+0x332>
 800724e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007252:	d817      	bhi.n	8007284 <UART_SetConfig+0x318>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01c      	beq.n	8007292 <UART_SetConfig+0x326>
 8007258:	e027      	b.n	80072aa <UART_SetConfig+0x33e>
 800725a:	bf00      	nop
 800725c:	efff69f3 	.word	0xefff69f3
 8007260:	40011000 	.word	0x40011000
 8007264:	40023800 	.word	0x40023800
 8007268:	40004400 	.word	0x40004400
 800726c:	40004800 	.word	0x40004800
 8007270:	40004c00 	.word	0x40004c00
 8007274:	40005000 	.word	0x40005000
 8007278:	40011400 	.word	0x40011400
 800727c:	40007800 	.word	0x40007800
 8007280:	40007c00 	.word	0x40007c00
 8007284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007288:	d006      	beq.n	8007298 <UART_SetConfig+0x32c>
 800728a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800728e:	d009      	beq.n	80072a4 <UART_SetConfig+0x338>
 8007290:	e00b      	b.n	80072aa <UART_SetConfig+0x33e>
 8007292:	2300      	movs	r3, #0
 8007294:	77fb      	strb	r3, [r7, #31]
 8007296:	e00e      	b.n	80072b6 <UART_SetConfig+0x34a>
 8007298:	2302      	movs	r3, #2
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e00b      	b.n	80072b6 <UART_SetConfig+0x34a>
 800729e:	2304      	movs	r3, #4
 80072a0:	77fb      	strb	r3, [r7, #31]
 80072a2:	e008      	b.n	80072b6 <UART_SetConfig+0x34a>
 80072a4:	2308      	movs	r3, #8
 80072a6:	77fb      	strb	r3, [r7, #31]
 80072a8:	e005      	b.n	80072b6 <UART_SetConfig+0x34a>
 80072aa:	2310      	movs	r3, #16
 80072ac:	77fb      	strb	r3, [r7, #31]
 80072ae:	bf00      	nop
 80072b0:	e001      	b.n	80072b6 <UART_SetConfig+0x34a>
 80072b2:	2310      	movs	r3, #16
 80072b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072be:	d15b      	bne.n	8007378 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80072c0:	7ffb      	ldrb	r3, [r7, #31]
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d827      	bhi.n	8007316 <UART_SetConfig+0x3aa>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <UART_SetConfig+0x360>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	08007301 	.word	0x08007301
 80072d8:	08007317 	.word	0x08007317
 80072dc:	08007307 	.word	0x08007307
 80072e0:	08007317 	.word	0x08007317
 80072e4:	08007317 	.word	0x08007317
 80072e8:	08007317 	.word	0x08007317
 80072ec:	0800730f 	.word	0x0800730f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f0:	f7fe fa74 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 80072f4:	61b8      	str	r0, [r7, #24]
        break;
 80072f6:	e013      	b.n	8007320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f8:	f7fe fa84 	bl	8005804 <HAL_RCC_GetPCLK2Freq>
 80072fc:	61b8      	str	r0, [r7, #24]
        break;
 80072fe:	e00f      	b.n	8007320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007300:	4b49      	ldr	r3, [pc, #292]	; (8007428 <UART_SetConfig+0x4bc>)
 8007302:	61bb      	str	r3, [r7, #24]
        break;
 8007304:	e00c      	b.n	8007320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007306:	f7fe f987 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 800730a:	61b8      	str	r0, [r7, #24]
        break;
 800730c:	e008      	b.n	8007320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007312:	61bb      	str	r3, [r7, #24]
        break;
 8007314:	e004      	b.n	8007320 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	77bb      	strb	r3, [r7, #30]
        break;
 800731e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d074      	beq.n	8007410 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	005a      	lsls	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	b29b      	uxth	r3, r3
 800733c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b0f      	cmp	r3, #15
 8007342:	d916      	bls.n	8007372 <UART_SetConfig+0x406>
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734a:	d212      	bcs.n	8007372 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f023 030f 	bic.w	r3, r3, #15
 8007354:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	085b      	lsrs	r3, r3, #1
 800735a:	b29b      	uxth	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	b29a      	uxth	r2, r3
 8007362:	89fb      	ldrh	r3, [r7, #14]
 8007364:	4313      	orrs	r3, r2
 8007366:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	89fa      	ldrh	r2, [r7, #14]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	e04e      	b.n	8007410 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	77bb      	strb	r3, [r7, #30]
 8007376:	e04b      	b.n	8007410 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007378:	7ffb      	ldrb	r3, [r7, #31]
 800737a:	2b08      	cmp	r3, #8
 800737c:	d827      	bhi.n	80073ce <UART_SetConfig+0x462>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x418>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073b1 	.word	0x080073b1
 800738c:	080073b9 	.word	0x080073b9
 8007390:	080073cf 	.word	0x080073cf
 8007394:	080073bf 	.word	0x080073bf
 8007398:	080073cf 	.word	0x080073cf
 800739c:	080073cf 	.word	0x080073cf
 80073a0:	080073cf 	.word	0x080073cf
 80073a4:	080073c7 	.word	0x080073c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a8:	f7fe fa18 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 80073ac:	61b8      	str	r0, [r7, #24]
        break;
 80073ae:	e013      	b.n	80073d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b0:	f7fe fa28 	bl	8005804 <HAL_RCC_GetPCLK2Freq>
 80073b4:	61b8      	str	r0, [r7, #24]
        break;
 80073b6:	e00f      	b.n	80073d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b8:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <UART_SetConfig+0x4bc>)
 80073ba:	61bb      	str	r3, [r7, #24]
        break;
 80073bc:	e00c      	b.n	80073d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073be:	f7fe f92b 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 80073c2:	61b8      	str	r0, [r7, #24]
        break;
 80073c4:	e008      	b.n	80073d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ca:	61bb      	str	r3, [r7, #24]
        break;
 80073cc:	e004      	b.n	80073d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	77bb      	strb	r3, [r7, #30]
        break;
 80073d6:	bf00      	nop
    }

    if (pclk != 0U)
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d018      	beq.n	8007410 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085a      	lsrs	r2, r3, #1
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b0f      	cmp	r3, #15
 80073f8:	d908      	bls.n	800740c <UART_SetConfig+0x4a0>
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007400:	d204      	bcs.n	800740c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	e001      	b.n	8007410 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800741c:	7fbb      	ldrb	r3, [r7, #30]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	00f42400 	.word	0x00f42400

0800742c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01a      	beq.n	8007542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800752a:	d10a      	bne.n	8007542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af02      	add	r7, sp, #8
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007580:	f7fb ffbe 	bl	8003500 <HAL_GetTick>
 8007584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b08      	cmp	r3, #8
 8007592:	d10e      	bne.n	80075b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f817 	bl	80075d6 <UART_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e00d      	b.n	80075ce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e6:	e05e      	b.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d05a      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f0:	f7fb ff86 	bl	8003500 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <UART_WaitOnFlagUntilTimeout+0x30>
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d11b      	bne.n	800763e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007614:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0201 	bic.w	r2, r2, #1
 8007624:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2220      	movs	r2, #32
 800762a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e043      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02c      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765a:	d124      	bne.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007664:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007674:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0201 	bic.w	r2, r2, #1
 8007684:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2220      	movs	r2, #32
 800768a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e00f      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4013      	ands	r3, r2
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d091      	beq.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2222      	movs	r2, #34	; 0x22
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d02b      	beq.n	800775a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007706:	4a25      	ldr	r2, [pc, #148]	; (800779c <UART_Start_Receive_DMA+0xcc>)
 8007708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770e:	4a24      	ldr	r2, [pc, #144]	; (80077a0 <UART_Start_Receive_DMA+0xd0>)
 8007710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007716:	4a23      	ldr	r2, [pc, #140]	; (80077a4 <UART_Start_Receive_DMA+0xd4>)
 8007718:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771e:	2200      	movs	r2, #0
 8007720:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3324      	adds	r3, #36	; 0x24
 800772c:	4619      	mov	r1, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007732:	461a      	mov	r2, r3
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	f7fc f8d1 	bl	80038dc <HAL_DMA_Start_IT>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00c      	beq.n	800775a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2210      	movs	r2, #16
 8007744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e01c      	b.n	8007794 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007770:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007790:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	08007831 	.word	0x08007831
 80077a0:	080078c5 	.word	0x080078c5
 80077a4:	080078fd 	.word	0x080078fd

080077a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80077be:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	679a      	str	r2, [r3, #120]	; 0x78
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077e8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0201 	bic.w	r2, r2, #1
 80077f8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d107      	bne.n	8007812 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0210 	bic.w	r2, r2, #16
 8007810:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007846:	d02a      	beq.n	800789e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800785e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788a:	2b01      	cmp	r3, #1
 800788c:	d107      	bne.n	800789e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0210 	bic.w	r2, r2, #16
 800789c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d107      	bne.n	80078b6 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078ac:	4619      	mov	r1, r3
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff fb50 	bl	8006f54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078b4:	e002      	b.n	80078bc <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fb38 	bl	8006f2c <HAL_UART_RxCpltCallback>
}
 80078bc:	bf00      	nop
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d109      	bne.n	80078ee <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078e0:	085b      	lsrs	r3, r3, #1
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fb34 	bl	8006f54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078ec:	e002      	b.n	80078f4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7ff fb26 	bl	8006f40 <HAL_UART_RxHalfCpltCallback>
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007914:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007920:	2b80      	cmp	r3, #128	; 0x80
 8007922:	d109      	bne.n	8007938 <UART_DMAError+0x3c>
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2b21      	cmp	r3, #33	; 0x21
 8007928:	d106      	bne.n	8007938 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2200      	movs	r2, #0
 800792e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007932:	6978      	ldr	r0, [r7, #20]
 8007934:	f7ff ff38 	bl	80077a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d109      	bne.n	800795a <UART_DMAError+0x5e>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b22      	cmp	r3, #34	; 0x22
 800794a:	d106      	bne.n	800795a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2200      	movs	r2, #0
 8007950:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f7ff ff3c 	bl	80077d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007960:	f043 0210 	orr.w	r2, r3, #16
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800796a:	6978      	ldr	r0, [r7, #20]
 800796c:	f7fa fce6 	bl	800233c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007970:	bf00      	nop
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f7fa fcd0 	bl	800233c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800799c:	bf00      	nop
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff faa5 	bl	8006f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <__errno>:
 80079d8:	4b01      	ldr	r3, [pc, #4]	; (80079e0 <__errno+0x8>)
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20002eec 	.word	0x20002eec

080079e4 <__libc_init_array>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	4e0d      	ldr	r6, [pc, #52]	; (8007a1c <__libc_init_array+0x38>)
 80079e8:	4c0d      	ldr	r4, [pc, #52]	; (8007a20 <__libc_init_array+0x3c>)
 80079ea:	1ba4      	subs	r4, r4, r6
 80079ec:	10a4      	asrs	r4, r4, #2
 80079ee:	2500      	movs	r5, #0
 80079f0:	42a5      	cmp	r5, r4
 80079f2:	d109      	bne.n	8007a08 <__libc_init_array+0x24>
 80079f4:	4e0b      	ldr	r6, [pc, #44]	; (8007a24 <__libc_init_array+0x40>)
 80079f6:	4c0c      	ldr	r4, [pc, #48]	; (8007a28 <__libc_init_array+0x44>)
 80079f8:	f006 f804 	bl	800da04 <_init>
 80079fc:	1ba4      	subs	r4, r4, r6
 80079fe:	10a4      	asrs	r4, r4, #2
 8007a00:	2500      	movs	r5, #0
 8007a02:	42a5      	cmp	r5, r4
 8007a04:	d105      	bne.n	8007a12 <__libc_init_array+0x2e>
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a0c:	4798      	blx	r3
 8007a0e:	3501      	adds	r5, #1
 8007a10:	e7ee      	b.n	80079f0 <__libc_init_array+0xc>
 8007a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a16:	4798      	blx	r3
 8007a18:	3501      	adds	r5, #1
 8007a1a:	e7f2      	b.n	8007a02 <__libc_init_array+0x1e>
 8007a1c:	0800dff0 	.word	0x0800dff0
 8007a20:	0800dff0 	.word	0x0800dff0
 8007a24:	0800dff0 	.word	0x0800dff0
 8007a28:	0800dff4 	.word	0x0800dff4

08007a2c <memset>:
 8007a2c:	4402      	add	r2, r0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d100      	bne.n	8007a36 <memset+0xa>
 8007a34:	4770      	bx	lr
 8007a36:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3a:	e7f9      	b.n	8007a30 <memset+0x4>

08007a3c <__cvt>:
 8007a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	ec55 4b10 	vmov	r4, r5, d0
 8007a44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007a46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	460e      	mov	r6, r1
 8007a4e:	4691      	mov	r9, r2
 8007a50:	4619      	mov	r1, r3
 8007a52:	bfb8      	it	lt
 8007a54:	4622      	movlt	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	f027 0720 	bic.w	r7, r7, #32
 8007a5c:	bfbb      	ittet	lt
 8007a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a62:	461d      	movlt	r5, r3
 8007a64:	2300      	movge	r3, #0
 8007a66:	232d      	movlt	r3, #45	; 0x2d
 8007a68:	bfb8      	it	lt
 8007a6a:	4614      	movlt	r4, r2
 8007a6c:	2f46      	cmp	r7, #70	; 0x46
 8007a6e:	700b      	strb	r3, [r1, #0]
 8007a70:	d004      	beq.n	8007a7c <__cvt+0x40>
 8007a72:	2f45      	cmp	r7, #69	; 0x45
 8007a74:	d100      	bne.n	8007a78 <__cvt+0x3c>
 8007a76:	3601      	adds	r6, #1
 8007a78:	2102      	movs	r1, #2
 8007a7a:	e000      	b.n	8007a7e <__cvt+0x42>
 8007a7c:	2103      	movs	r1, #3
 8007a7e:	ab03      	add	r3, sp, #12
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	ab02      	add	r3, sp, #8
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4632      	mov	r2, r6
 8007a88:	4653      	mov	r3, sl
 8007a8a:	ec45 4b10 	vmov	d0, r4, r5
 8007a8e:	f001 fb17 	bl	80090c0 <_dtoa_r>
 8007a92:	2f47      	cmp	r7, #71	; 0x47
 8007a94:	4680      	mov	r8, r0
 8007a96:	d102      	bne.n	8007a9e <__cvt+0x62>
 8007a98:	f019 0f01 	tst.w	r9, #1
 8007a9c:	d026      	beq.n	8007aec <__cvt+0xb0>
 8007a9e:	2f46      	cmp	r7, #70	; 0x46
 8007aa0:	eb08 0906 	add.w	r9, r8, r6
 8007aa4:	d111      	bne.n	8007aca <__cvt+0x8e>
 8007aa6:	f898 3000 	ldrb.w	r3, [r8]
 8007aaa:	2b30      	cmp	r3, #48	; 0x30
 8007aac:	d10a      	bne.n	8007ac4 <__cvt+0x88>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	f7f9 f82f 	bl	8000b18 <__aeabi_dcmpeq>
 8007aba:	b918      	cbnz	r0, 8007ac4 <__cvt+0x88>
 8007abc:	f1c6 0601 	rsb	r6, r6, #1
 8007ac0:	f8ca 6000 	str.w	r6, [sl]
 8007ac4:	f8da 3000 	ldr.w	r3, [sl]
 8007ac8:	4499      	add	r9, r3
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f9 f821 	bl	8000b18 <__aeabi_dcmpeq>
 8007ad6:	b938      	cbnz	r0, 8007ae8 <__cvt+0xac>
 8007ad8:	2230      	movs	r2, #48	; 0x30
 8007ada:	9b03      	ldr	r3, [sp, #12]
 8007adc:	454b      	cmp	r3, r9
 8007ade:	d205      	bcs.n	8007aec <__cvt+0xb0>
 8007ae0:	1c59      	adds	r1, r3, #1
 8007ae2:	9103      	str	r1, [sp, #12]
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	e7f8      	b.n	8007ada <__cvt+0x9e>
 8007ae8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007af0:	eba3 0308 	sub.w	r3, r3, r8
 8007af4:	4640      	mov	r0, r8
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	b004      	add	sp, #16
 8007afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007afe <__exponent>:
 8007afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b00:	2900      	cmp	r1, #0
 8007b02:	4604      	mov	r4, r0
 8007b04:	bfba      	itte	lt
 8007b06:	4249      	neglt	r1, r1
 8007b08:	232d      	movlt	r3, #45	; 0x2d
 8007b0a:	232b      	movge	r3, #43	; 0x2b
 8007b0c:	2909      	cmp	r1, #9
 8007b0e:	f804 2b02 	strb.w	r2, [r4], #2
 8007b12:	7043      	strb	r3, [r0, #1]
 8007b14:	dd20      	ble.n	8007b58 <__exponent+0x5a>
 8007b16:	f10d 0307 	add.w	r3, sp, #7
 8007b1a:	461f      	mov	r7, r3
 8007b1c:	260a      	movs	r6, #10
 8007b1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b22:	fb06 1115 	mls	r1, r6, r5, r1
 8007b26:	3130      	adds	r1, #48	; 0x30
 8007b28:	2d09      	cmp	r5, #9
 8007b2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b2e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007b32:	4629      	mov	r1, r5
 8007b34:	dc09      	bgt.n	8007b4a <__exponent+0x4c>
 8007b36:	3130      	adds	r1, #48	; 0x30
 8007b38:	3b02      	subs	r3, #2
 8007b3a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b3e:	42bb      	cmp	r3, r7
 8007b40:	4622      	mov	r2, r4
 8007b42:	d304      	bcc.n	8007b4e <__exponent+0x50>
 8007b44:	1a10      	subs	r0, r2, r0
 8007b46:	b003      	add	sp, #12
 8007b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	e7e7      	b.n	8007b1e <__exponent+0x20>
 8007b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b52:	f804 2b01 	strb.w	r2, [r4], #1
 8007b56:	e7f2      	b.n	8007b3e <__exponent+0x40>
 8007b58:	2330      	movs	r3, #48	; 0x30
 8007b5a:	4419      	add	r1, r3
 8007b5c:	7083      	strb	r3, [r0, #2]
 8007b5e:	1d02      	adds	r2, r0, #4
 8007b60:	70c1      	strb	r1, [r0, #3]
 8007b62:	e7ef      	b.n	8007b44 <__exponent+0x46>

08007b64 <_printf_float>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	b08d      	sub	sp, #52	; 0x34
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007b70:	4616      	mov	r6, r2
 8007b72:	461f      	mov	r7, r3
 8007b74:	4605      	mov	r5, r0
 8007b76:	f002 fb83 	bl	800a280 <_localeconv_r>
 8007b7a:	6803      	ldr	r3, [r0, #0]
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7f8 fb4e 	bl	8000220 <strlen>
 8007b84:	2300      	movs	r3, #0
 8007b86:	930a      	str	r3, [sp, #40]	; 0x28
 8007b88:	f8d8 3000 	ldr.w	r3, [r8]
 8007b8c:	9005      	str	r0, [sp, #20]
 8007b8e:	3307      	adds	r3, #7
 8007b90:	f023 0307 	bic.w	r3, r3, #7
 8007b94:	f103 0208 	add.w	r2, r3, #8
 8007b98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b9c:	f8d4 b000 	ldr.w	fp, [r4]
 8007ba0:	f8c8 2000 	str.w	r2, [r8]
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bb4:	9307      	str	r3, [sp, #28]
 8007bb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bba:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbe:	4ba7      	ldr	r3, [pc, #668]	; (8007e5c <_printf_float+0x2f8>)
 8007bc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bc4:	f7f8 ffda 	bl	8000b7c <__aeabi_dcmpun>
 8007bc8:	bb70      	cbnz	r0, 8007c28 <_printf_float+0xc4>
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295
 8007bce:	4ba3      	ldr	r3, [pc, #652]	; (8007e5c <_printf_float+0x2f8>)
 8007bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bd4:	f7f8 ffb4 	bl	8000b40 <__aeabi_dcmple>
 8007bd8:	bb30      	cbnz	r0, 8007c28 <_printf_float+0xc4>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 ffa3 	bl	8000b2c <__aeabi_dcmplt>
 8007be6:	b110      	cbz	r0, 8007bee <_printf_float+0x8a>
 8007be8:	232d      	movs	r3, #45	; 0x2d
 8007bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bee:	4a9c      	ldr	r2, [pc, #624]	; (8007e60 <_printf_float+0x2fc>)
 8007bf0:	4b9c      	ldr	r3, [pc, #624]	; (8007e64 <_printf_float+0x300>)
 8007bf2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007bf6:	bf8c      	ite	hi
 8007bf8:	4690      	movhi	r8, r2
 8007bfa:	4698      	movls	r8, r3
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	f02b 0204 	bic.w	r2, fp, #4
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	6022      	str	r2, [r4, #0]
 8007c06:	f04f 0900 	mov.w	r9, #0
 8007c0a:	9700      	str	r7, [sp, #0]
 8007c0c:	4633      	mov	r3, r6
 8007c0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f9e6 	bl	8007fe4 <_printf_common>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	f040 808d 	bne.w	8007d38 <_printf_float+0x1d4>
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	b00d      	add	sp, #52	; 0x34
 8007c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	4649      	mov	r1, r9
 8007c30:	f7f8 ffa4 	bl	8000b7c <__aeabi_dcmpun>
 8007c34:	b110      	cbz	r0, 8007c3c <_printf_float+0xd8>
 8007c36:	4a8c      	ldr	r2, [pc, #560]	; (8007e68 <_printf_float+0x304>)
 8007c38:	4b8c      	ldr	r3, [pc, #560]	; (8007e6c <_printf_float+0x308>)
 8007c3a:	e7da      	b.n	8007bf2 <_printf_float+0x8e>
 8007c3c:	6861      	ldr	r1, [r4, #4]
 8007c3e:	1c4b      	adds	r3, r1, #1
 8007c40:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007c44:	a80a      	add	r0, sp, #40	; 0x28
 8007c46:	d13e      	bne.n	8007cc6 <_printf_float+0x162>
 8007c48:	2306      	movs	r3, #6
 8007c4a:	6063      	str	r3, [r4, #4]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007c52:	ab09      	add	r3, sp, #36	; 0x24
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	ec49 8b10 	vmov	d0, r8, r9
 8007c5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c5e:	6022      	str	r2, [r4, #0]
 8007c60:	f8cd a004 	str.w	sl, [sp, #4]
 8007c64:	6861      	ldr	r1, [r4, #4]
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7ff fee8 	bl	8007a3c <__cvt>
 8007c6c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007c70:	2b47      	cmp	r3, #71	; 0x47
 8007c72:	4680      	mov	r8, r0
 8007c74:	d109      	bne.n	8007c8a <_printf_float+0x126>
 8007c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c78:	1cd8      	adds	r0, r3, #3
 8007c7a:	db02      	blt.n	8007c82 <_printf_float+0x11e>
 8007c7c:	6862      	ldr	r2, [r4, #4]
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	dd47      	ble.n	8007d12 <_printf_float+0x1ae>
 8007c82:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c86:	fa5f fa8a 	uxtb.w	sl, sl
 8007c8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c90:	d824      	bhi.n	8007cdc <_printf_float+0x178>
 8007c92:	3901      	subs	r1, #1
 8007c94:	4652      	mov	r2, sl
 8007c96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c9a:	9109      	str	r1, [sp, #36]	; 0x24
 8007c9c:	f7ff ff2f 	bl	8007afe <__exponent>
 8007ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca2:	1813      	adds	r3, r2, r0
 8007ca4:	2a01      	cmp	r2, #1
 8007ca6:	4681      	mov	r9, r0
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	dc02      	bgt.n	8007cb2 <_printf_float+0x14e>
 8007cac:	6822      	ldr	r2, [r4, #0]
 8007cae:	07d1      	lsls	r1, r2, #31
 8007cb0:	d501      	bpl.n	8007cb6 <_printf_float+0x152>
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	6123      	str	r3, [r4, #16]
 8007cb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0a5      	beq.n	8007c0a <_printf_float+0xa6>
 8007cbe:	232d      	movs	r3, #45	; 0x2d
 8007cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc4:	e7a1      	b.n	8007c0a <_printf_float+0xa6>
 8007cc6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007cca:	f000 8177 	beq.w	8007fbc <_printf_float+0x458>
 8007cce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007cd2:	d1bb      	bne.n	8007c4c <_printf_float+0xe8>
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d1b9      	bne.n	8007c4c <_printf_float+0xe8>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e7b6      	b.n	8007c4a <_printf_float+0xe6>
 8007cdc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007ce0:	d119      	bne.n	8007d16 <_printf_float+0x1b2>
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	6863      	ldr	r3, [r4, #4]
 8007ce6:	dd0c      	ble.n	8007d02 <_printf_float+0x19e>
 8007ce8:	6121      	str	r1, [r4, #16]
 8007cea:	b913      	cbnz	r3, 8007cf2 <_printf_float+0x18e>
 8007cec:	6822      	ldr	r2, [r4, #0]
 8007cee:	07d2      	lsls	r2, r2, #31
 8007cf0:	d502      	bpl.n	8007cf8 <_printf_float+0x194>
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	440b      	add	r3, r1
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfa:	65a3      	str	r3, [r4, #88]	; 0x58
 8007cfc:	f04f 0900 	mov.w	r9, #0
 8007d00:	e7d9      	b.n	8007cb6 <_printf_float+0x152>
 8007d02:	b913      	cbnz	r3, 8007d0a <_printf_float+0x1a6>
 8007d04:	6822      	ldr	r2, [r4, #0]
 8007d06:	07d0      	lsls	r0, r2, #31
 8007d08:	d501      	bpl.n	8007d0e <_printf_float+0x1aa>
 8007d0a:	3302      	adds	r3, #2
 8007d0c:	e7f3      	b.n	8007cf6 <_printf_float+0x192>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e7f1      	b.n	8007cf6 <_printf_float+0x192>
 8007d12:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007d16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	db05      	blt.n	8007d2a <_printf_float+0x1c6>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	07d1      	lsls	r1, r2, #31
 8007d24:	d5e8      	bpl.n	8007cf8 <_printf_float+0x194>
 8007d26:	3301      	adds	r3, #1
 8007d28:	e7e5      	b.n	8007cf6 <_printf_float+0x192>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfd4      	ite	le
 8007d2e:	f1c3 0302 	rsble	r3, r3, #2
 8007d32:	2301      	movgt	r3, #1
 8007d34:	4413      	add	r3, r2
 8007d36:	e7de      	b.n	8007cf6 <_printf_float+0x192>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	055a      	lsls	r2, r3, #21
 8007d3c:	d407      	bmi.n	8007d4e <_printf_float+0x1ea>
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	4642      	mov	r2, r8
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d12b      	bne.n	8007da4 <_printf_float+0x240>
 8007d4c:	e767      	b.n	8007c1e <_printf_float+0xba>
 8007d4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007d52:	f240 80dc 	bls.w	8007f0e <_printf_float+0x3aa>
 8007d56:	2200      	movs	r2, #0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d5e:	f7f8 fedb 	bl	8000b18 <__aeabi_dcmpeq>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d033      	beq.n	8007dce <_printf_float+0x26a>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4a41      	ldr	r2, [pc, #260]	; (8007e70 <_printf_float+0x30c>)
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f af54 	beq.w	8007c1e <_printf_float+0xba>
 8007d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	db02      	blt.n	8007d84 <_printf_float+0x220>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	07d8      	lsls	r0, r3, #31
 8007d82:	d50f      	bpl.n	8007da4 <_printf_float+0x240>
 8007d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	f43f af45 	beq.w	8007c1e <_printf_float+0xba>
 8007d94:	f04f 0800 	mov.w	r8, #0
 8007d98:	f104 091a 	add.w	r9, r4, #26
 8007d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	4543      	cmp	r3, r8
 8007da2:	dc09      	bgt.n	8007db8 <_printf_float+0x254>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	079b      	lsls	r3, r3, #30
 8007da8:	f100 8103 	bmi.w	8007fb2 <_printf_float+0x44e>
 8007dac:	68e0      	ldr	r0, [r4, #12]
 8007dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db0:	4298      	cmp	r0, r3
 8007db2:	bfb8      	it	lt
 8007db4:	4618      	movlt	r0, r3
 8007db6:	e734      	b.n	8007c22 <_printf_float+0xbe>
 8007db8:	2301      	movs	r3, #1
 8007dba:	464a      	mov	r2, r9
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f af2b 	beq.w	8007c1e <_printf_float+0xba>
 8007dc8:	f108 0801 	add.w	r8, r8, #1
 8007dcc:	e7e6      	b.n	8007d9c <_printf_float+0x238>
 8007dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dc2b      	bgt.n	8007e2c <_printf_float+0x2c8>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4a26      	ldr	r2, [pc, #152]	; (8007e70 <_printf_float+0x30c>)
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b8      	blx	r7
 8007dde:	3001      	adds	r0, #1
 8007de0:	f43f af1d 	beq.w	8007c1e <_printf_float+0xba>
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	b923      	cbnz	r3, 8007df2 <_printf_float+0x28e>
 8007de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dea:	b913      	cbnz	r3, 8007df2 <_printf_float+0x28e>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	07d9      	lsls	r1, r3, #31
 8007df0:	d5d8      	bpl.n	8007da4 <_printf_float+0x240>
 8007df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f43f af0e 	beq.w	8007c1e <_printf_float+0xba>
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	f104 0a1a 	add.w	sl, r4, #26
 8007e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0c:	425b      	negs	r3, r3
 8007e0e:	454b      	cmp	r3, r9
 8007e10:	dc01      	bgt.n	8007e16 <_printf_float+0x2b2>
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	e794      	b.n	8007d40 <_printf_float+0x1dc>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4652      	mov	r2, sl
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f aefc 	beq.w	8007c1e <_printf_float+0xba>
 8007e26:	f109 0901 	add.w	r9, r9, #1
 8007e2a:	e7ee      	b.n	8007e0a <_printf_float+0x2a6>
 8007e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e30:	429a      	cmp	r2, r3
 8007e32:	bfa8      	it	ge
 8007e34:	461a      	movge	r2, r3
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	4691      	mov	r9, r2
 8007e3a:	dd07      	ble.n	8007e4c <_printf_float+0x2e8>
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4642      	mov	r2, r8
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	f43f aee9 	beq.w	8007c1e <_printf_float+0xba>
 8007e4c:	f104 031a 	add.w	r3, r4, #26
 8007e50:	f04f 0b00 	mov.w	fp, #0
 8007e54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e58:	9306      	str	r3, [sp, #24]
 8007e5a:	e015      	b.n	8007e88 <_printf_float+0x324>
 8007e5c:	7fefffff 	.word	0x7fefffff
 8007e60:	0800dadc 	.word	0x0800dadc
 8007e64:	0800dad8 	.word	0x0800dad8
 8007e68:	0800dae4 	.word	0x0800dae4
 8007e6c:	0800dae0 	.word	0x0800dae0
 8007e70:	0800dae8 	.word	0x0800dae8
 8007e74:	2301      	movs	r3, #1
 8007e76:	9a06      	ldr	r2, [sp, #24]
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	f43f aecd 	beq.w	8007c1e <_printf_float+0xba>
 8007e84:	f10b 0b01 	add.w	fp, fp, #1
 8007e88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e8c:	ebaa 0309 	sub.w	r3, sl, r9
 8007e90:	455b      	cmp	r3, fp
 8007e92:	dcef      	bgt.n	8007e74 <_printf_float+0x310>
 8007e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	44d0      	add	r8, sl
 8007e9c:	db15      	blt.n	8007eca <_printf_float+0x366>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	07da      	lsls	r2, r3, #31
 8007ea2:	d412      	bmi.n	8007eca <_printf_float+0x366>
 8007ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ea8:	eba3 020a 	sub.w	r2, r3, sl
 8007eac:	eba3 0a01 	sub.w	sl, r3, r1
 8007eb0:	4592      	cmp	sl, r2
 8007eb2:	bfa8      	it	ge
 8007eb4:	4692      	movge	sl, r2
 8007eb6:	f1ba 0f00 	cmp.w	sl, #0
 8007eba:	dc0e      	bgt.n	8007eda <_printf_float+0x376>
 8007ebc:	f04f 0800 	mov.w	r8, #0
 8007ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ec4:	f104 091a 	add.w	r9, r4, #26
 8007ec8:	e019      	b.n	8007efe <_printf_float+0x39a>
 8007eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	47b8      	blx	r7
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d1e5      	bne.n	8007ea4 <_printf_float+0x340>
 8007ed8:	e6a1      	b.n	8007c1e <_printf_float+0xba>
 8007eda:	4653      	mov	r3, sl
 8007edc:	4642      	mov	r2, r8
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b8      	blx	r7
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d1e9      	bne.n	8007ebc <_printf_float+0x358>
 8007ee8:	e699      	b.n	8007c1e <_printf_float+0xba>
 8007eea:	2301      	movs	r3, #1
 8007eec:	464a      	mov	r2, r9
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f43f ae92 	beq.w	8007c1e <_printf_float+0xba>
 8007efa:	f108 0801 	add.w	r8, r8, #1
 8007efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f02:	1a9b      	subs	r3, r3, r2
 8007f04:	eba3 030a 	sub.w	r3, r3, sl
 8007f08:	4543      	cmp	r3, r8
 8007f0a:	dcee      	bgt.n	8007eea <_printf_float+0x386>
 8007f0c:	e74a      	b.n	8007da4 <_printf_float+0x240>
 8007f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f10:	2a01      	cmp	r2, #1
 8007f12:	dc01      	bgt.n	8007f18 <_printf_float+0x3b4>
 8007f14:	07db      	lsls	r3, r3, #31
 8007f16:	d53a      	bpl.n	8007f8e <_printf_float+0x42a>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4642      	mov	r2, r8
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	f43f ae7b 	beq.w	8007c1e <_printf_float+0xba>
 8007f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	f108 0801 	add.w	r8, r8, #1
 8007f38:	f43f ae71 	beq.w	8007c1e <_printf_float+0xba>
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f103 3aff 	add.w	sl, r3, #4294967295
 8007f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f7f8 fde5 	bl	8000b18 <__aeabi_dcmpeq>
 8007f4e:	b9c8      	cbnz	r0, 8007f84 <_printf_float+0x420>
 8007f50:	4653      	mov	r3, sl
 8007f52:	4642      	mov	r2, r8
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d10e      	bne.n	8007f7c <_printf_float+0x418>
 8007f5e:	e65e      	b.n	8007c1e <_printf_float+0xba>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4652      	mov	r2, sl
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f43f ae57 	beq.w	8007c1e <_printf_float+0xba>
 8007f70:	f108 0801 	add.w	r8, r8, #1
 8007f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f76:	3b01      	subs	r3, #1
 8007f78:	4543      	cmp	r3, r8
 8007f7a:	dcf1      	bgt.n	8007f60 <_printf_float+0x3fc>
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f82:	e6de      	b.n	8007d42 <_printf_float+0x1de>
 8007f84:	f04f 0800 	mov.w	r8, #0
 8007f88:	f104 0a1a 	add.w	sl, r4, #26
 8007f8c:	e7f2      	b.n	8007f74 <_printf_float+0x410>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e7df      	b.n	8007f52 <_printf_float+0x3ee>
 8007f92:	2301      	movs	r3, #1
 8007f94:	464a      	mov	r2, r9
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f43f ae3e 	beq.w	8007c1e <_printf_float+0xba>
 8007fa2:	f108 0801 	add.w	r8, r8, #1
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	4543      	cmp	r3, r8
 8007fae:	dcf0      	bgt.n	8007f92 <_printf_float+0x42e>
 8007fb0:	e6fc      	b.n	8007dac <_printf_float+0x248>
 8007fb2:	f04f 0800 	mov.w	r8, #0
 8007fb6:	f104 0919 	add.w	r9, r4, #25
 8007fba:	e7f4      	b.n	8007fa6 <_printf_float+0x442>
 8007fbc:	2900      	cmp	r1, #0
 8007fbe:	f43f ae8b 	beq.w	8007cd8 <_printf_float+0x174>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007fc8:	ab09      	add	r3, sp, #36	; 0x24
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	ec49 8b10 	vmov	d0, r8, r9
 8007fd0:	6022      	str	r2, [r4, #0]
 8007fd2:	f8cd a004 	str.w	sl, [sp, #4]
 8007fd6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7ff fd2e 	bl	8007a3c <__cvt>
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	e648      	b.n	8007c76 <_printf_float+0x112>

08007fe4 <_printf_common>:
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	4691      	mov	r9, r2
 8007fea:	461f      	mov	r7, r3
 8007fec:	688a      	ldr	r2, [r1, #8]
 8007fee:	690b      	ldr	r3, [r1, #16]
 8007ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	bfb8      	it	lt
 8007ff8:	4613      	movlt	r3, r2
 8007ffa:	f8c9 3000 	str.w	r3, [r9]
 8007ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008002:	4606      	mov	r6, r0
 8008004:	460c      	mov	r4, r1
 8008006:	b112      	cbz	r2, 800800e <_printf_common+0x2a>
 8008008:	3301      	adds	r3, #1
 800800a:	f8c9 3000 	str.w	r3, [r9]
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	0699      	lsls	r1, r3, #26
 8008012:	bf42      	ittt	mi
 8008014:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008018:	3302      	addmi	r3, #2
 800801a:	f8c9 3000 	strmi.w	r3, [r9]
 800801e:	6825      	ldr	r5, [r4, #0]
 8008020:	f015 0506 	ands.w	r5, r5, #6
 8008024:	d107      	bne.n	8008036 <_printf_common+0x52>
 8008026:	f104 0a19 	add.w	sl, r4, #25
 800802a:	68e3      	ldr	r3, [r4, #12]
 800802c:	f8d9 2000 	ldr.w	r2, [r9]
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	42ab      	cmp	r3, r5
 8008034:	dc28      	bgt.n	8008088 <_printf_common+0xa4>
 8008036:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	3300      	adds	r3, #0
 800803e:	bf18      	it	ne
 8008040:	2301      	movne	r3, #1
 8008042:	0692      	lsls	r2, r2, #26
 8008044:	d42d      	bmi.n	80080a2 <_printf_common+0xbe>
 8008046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800804a:	4639      	mov	r1, r7
 800804c:	4630      	mov	r0, r6
 800804e:	47c0      	blx	r8
 8008050:	3001      	adds	r0, #1
 8008052:	d020      	beq.n	8008096 <_printf_common+0xb2>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	68e5      	ldr	r5, [r4, #12]
 8008058:	f8d9 2000 	ldr.w	r2, [r9]
 800805c:	f003 0306 	and.w	r3, r3, #6
 8008060:	2b04      	cmp	r3, #4
 8008062:	bf08      	it	eq
 8008064:	1aad      	subeq	r5, r5, r2
 8008066:	68a3      	ldr	r3, [r4, #8]
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	bf0c      	ite	eq
 800806c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008070:	2500      	movne	r5, #0
 8008072:	4293      	cmp	r3, r2
 8008074:	bfc4      	itt	gt
 8008076:	1a9b      	subgt	r3, r3, r2
 8008078:	18ed      	addgt	r5, r5, r3
 800807a:	f04f 0900 	mov.w	r9, #0
 800807e:	341a      	adds	r4, #26
 8008080:	454d      	cmp	r5, r9
 8008082:	d11a      	bne.n	80080ba <_printf_common+0xd6>
 8008084:	2000      	movs	r0, #0
 8008086:	e008      	b.n	800809a <_printf_common+0xb6>
 8008088:	2301      	movs	r3, #1
 800808a:	4652      	mov	r2, sl
 800808c:	4639      	mov	r1, r7
 800808e:	4630      	mov	r0, r6
 8008090:	47c0      	blx	r8
 8008092:	3001      	adds	r0, #1
 8008094:	d103      	bne.n	800809e <_printf_common+0xba>
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809e:	3501      	adds	r5, #1
 80080a0:	e7c3      	b.n	800802a <_printf_common+0x46>
 80080a2:	18e1      	adds	r1, r4, r3
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	2030      	movs	r0, #48	; 0x30
 80080a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ac:	4422      	add	r2, r4
 80080ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080b6:	3302      	adds	r3, #2
 80080b8:	e7c5      	b.n	8008046 <_printf_common+0x62>
 80080ba:	2301      	movs	r3, #1
 80080bc:	4622      	mov	r2, r4
 80080be:	4639      	mov	r1, r7
 80080c0:	4630      	mov	r0, r6
 80080c2:	47c0      	blx	r8
 80080c4:	3001      	adds	r0, #1
 80080c6:	d0e6      	beq.n	8008096 <_printf_common+0xb2>
 80080c8:	f109 0901 	add.w	r9, r9, #1
 80080cc:	e7d8      	b.n	8008080 <_printf_common+0x9c>
	...

080080d0 <_printf_i>:
 80080d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080d8:	460c      	mov	r4, r1
 80080da:	7e09      	ldrb	r1, [r1, #24]
 80080dc:	b085      	sub	sp, #20
 80080de:	296e      	cmp	r1, #110	; 0x6e
 80080e0:	4617      	mov	r7, r2
 80080e2:	4606      	mov	r6, r0
 80080e4:	4698      	mov	r8, r3
 80080e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080e8:	f000 80b3 	beq.w	8008252 <_printf_i+0x182>
 80080ec:	d822      	bhi.n	8008134 <_printf_i+0x64>
 80080ee:	2963      	cmp	r1, #99	; 0x63
 80080f0:	d036      	beq.n	8008160 <_printf_i+0x90>
 80080f2:	d80a      	bhi.n	800810a <_printf_i+0x3a>
 80080f4:	2900      	cmp	r1, #0
 80080f6:	f000 80b9 	beq.w	800826c <_printf_i+0x19c>
 80080fa:	2958      	cmp	r1, #88	; 0x58
 80080fc:	f000 8083 	beq.w	8008206 <_printf_i+0x136>
 8008100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008104:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008108:	e032      	b.n	8008170 <_printf_i+0xa0>
 800810a:	2964      	cmp	r1, #100	; 0x64
 800810c:	d001      	beq.n	8008112 <_printf_i+0x42>
 800810e:	2969      	cmp	r1, #105	; 0x69
 8008110:	d1f6      	bne.n	8008100 <_printf_i+0x30>
 8008112:	6820      	ldr	r0, [r4, #0]
 8008114:	6813      	ldr	r3, [r2, #0]
 8008116:	0605      	lsls	r5, r0, #24
 8008118:	f103 0104 	add.w	r1, r3, #4
 800811c:	d52a      	bpl.n	8008174 <_printf_i+0xa4>
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	da03      	bge.n	800812e <_printf_i+0x5e>
 8008126:	222d      	movs	r2, #45	; 0x2d
 8008128:	425b      	negs	r3, r3
 800812a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800812e:	486f      	ldr	r0, [pc, #444]	; (80082ec <_printf_i+0x21c>)
 8008130:	220a      	movs	r2, #10
 8008132:	e039      	b.n	80081a8 <_printf_i+0xd8>
 8008134:	2973      	cmp	r1, #115	; 0x73
 8008136:	f000 809d 	beq.w	8008274 <_printf_i+0x1a4>
 800813a:	d808      	bhi.n	800814e <_printf_i+0x7e>
 800813c:	296f      	cmp	r1, #111	; 0x6f
 800813e:	d020      	beq.n	8008182 <_printf_i+0xb2>
 8008140:	2970      	cmp	r1, #112	; 0x70
 8008142:	d1dd      	bne.n	8008100 <_printf_i+0x30>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	f043 0320 	orr.w	r3, r3, #32
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	e003      	b.n	8008156 <_printf_i+0x86>
 800814e:	2975      	cmp	r1, #117	; 0x75
 8008150:	d017      	beq.n	8008182 <_printf_i+0xb2>
 8008152:	2978      	cmp	r1, #120	; 0x78
 8008154:	d1d4      	bne.n	8008100 <_printf_i+0x30>
 8008156:	2378      	movs	r3, #120	; 0x78
 8008158:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800815c:	4864      	ldr	r0, [pc, #400]	; (80082f0 <_printf_i+0x220>)
 800815e:	e055      	b.n	800820c <_printf_i+0x13c>
 8008160:	6813      	ldr	r3, [r2, #0]
 8008162:	1d19      	adds	r1, r3, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6011      	str	r1, [r2, #0]
 8008168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800816c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008170:	2301      	movs	r3, #1
 8008172:	e08c      	b.n	800828e <_printf_i+0x1be>
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6011      	str	r1, [r2, #0]
 8008178:	f010 0f40 	tst.w	r0, #64	; 0x40
 800817c:	bf18      	it	ne
 800817e:	b21b      	sxthne	r3, r3
 8008180:	e7cf      	b.n	8008122 <_printf_i+0x52>
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	1d18      	adds	r0, r3, #4
 8008188:	6010      	str	r0, [r2, #0]
 800818a:	0628      	lsls	r0, r5, #24
 800818c:	d501      	bpl.n	8008192 <_printf_i+0xc2>
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	e002      	b.n	8008198 <_printf_i+0xc8>
 8008192:	0668      	lsls	r0, r5, #25
 8008194:	d5fb      	bpl.n	800818e <_printf_i+0xbe>
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	4854      	ldr	r0, [pc, #336]	; (80082ec <_printf_i+0x21c>)
 800819a:	296f      	cmp	r1, #111	; 0x6f
 800819c:	bf14      	ite	ne
 800819e:	220a      	movne	r2, #10
 80081a0:	2208      	moveq	r2, #8
 80081a2:	2100      	movs	r1, #0
 80081a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081a8:	6865      	ldr	r5, [r4, #4]
 80081aa:	60a5      	str	r5, [r4, #8]
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	f2c0 8095 	blt.w	80082dc <_printf_i+0x20c>
 80081b2:	6821      	ldr	r1, [r4, #0]
 80081b4:	f021 0104 	bic.w	r1, r1, #4
 80081b8:	6021      	str	r1, [r4, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d13d      	bne.n	800823a <_printf_i+0x16a>
 80081be:	2d00      	cmp	r5, #0
 80081c0:	f040 808e 	bne.w	80082e0 <_printf_i+0x210>
 80081c4:	4665      	mov	r5, ip
 80081c6:	2a08      	cmp	r2, #8
 80081c8:	d10b      	bne.n	80081e2 <_printf_i+0x112>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	07db      	lsls	r3, r3, #31
 80081ce:	d508      	bpl.n	80081e2 <_printf_i+0x112>
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	6862      	ldr	r2, [r4, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	bfde      	ittt	le
 80081d8:	2330      	movle	r3, #48	; 0x30
 80081da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081e2:	ebac 0305 	sub.w	r3, ip, r5
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	f8cd 8000 	str.w	r8, [sp]
 80081ec:	463b      	mov	r3, r7
 80081ee:	aa03      	add	r2, sp, #12
 80081f0:	4621      	mov	r1, r4
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff fef6 	bl	8007fe4 <_printf_common>
 80081f8:	3001      	adds	r0, #1
 80081fa:	d14d      	bne.n	8008298 <_printf_i+0x1c8>
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	b005      	add	sp, #20
 8008202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008206:	4839      	ldr	r0, [pc, #228]	; (80082ec <_printf_i+0x21c>)
 8008208:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800820c:	6813      	ldr	r3, [r2, #0]
 800820e:	6821      	ldr	r1, [r4, #0]
 8008210:	1d1d      	adds	r5, r3, #4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6015      	str	r5, [r2, #0]
 8008216:	060a      	lsls	r2, r1, #24
 8008218:	d50b      	bpl.n	8008232 <_printf_i+0x162>
 800821a:	07ca      	lsls	r2, r1, #31
 800821c:	bf44      	itt	mi
 800821e:	f041 0120 	orrmi.w	r1, r1, #32
 8008222:	6021      	strmi	r1, [r4, #0]
 8008224:	b91b      	cbnz	r3, 800822e <_printf_i+0x15e>
 8008226:	6822      	ldr	r2, [r4, #0]
 8008228:	f022 0220 	bic.w	r2, r2, #32
 800822c:	6022      	str	r2, [r4, #0]
 800822e:	2210      	movs	r2, #16
 8008230:	e7b7      	b.n	80081a2 <_printf_i+0xd2>
 8008232:	064d      	lsls	r5, r1, #25
 8008234:	bf48      	it	mi
 8008236:	b29b      	uxthmi	r3, r3
 8008238:	e7ef      	b.n	800821a <_printf_i+0x14a>
 800823a:	4665      	mov	r5, ip
 800823c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008240:	fb02 3311 	mls	r3, r2, r1, r3
 8008244:	5cc3      	ldrb	r3, [r0, r3]
 8008246:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800824a:	460b      	mov	r3, r1
 800824c:	2900      	cmp	r1, #0
 800824e:	d1f5      	bne.n	800823c <_printf_i+0x16c>
 8008250:	e7b9      	b.n	80081c6 <_printf_i+0xf6>
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	6825      	ldr	r5, [r4, #0]
 8008256:	6961      	ldr	r1, [r4, #20]
 8008258:	1d18      	adds	r0, r3, #4
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	0628      	lsls	r0, r5, #24
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	d501      	bpl.n	8008266 <_printf_i+0x196>
 8008262:	6019      	str	r1, [r3, #0]
 8008264:	e002      	b.n	800826c <_printf_i+0x19c>
 8008266:	066a      	lsls	r2, r5, #25
 8008268:	d5fb      	bpl.n	8008262 <_printf_i+0x192>
 800826a:	8019      	strh	r1, [r3, #0]
 800826c:	2300      	movs	r3, #0
 800826e:	6123      	str	r3, [r4, #16]
 8008270:	4665      	mov	r5, ip
 8008272:	e7b9      	b.n	80081e8 <_printf_i+0x118>
 8008274:	6813      	ldr	r3, [r2, #0]
 8008276:	1d19      	adds	r1, r3, #4
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	681d      	ldr	r5, [r3, #0]
 800827c:	6862      	ldr	r2, [r4, #4]
 800827e:	2100      	movs	r1, #0
 8008280:	4628      	mov	r0, r5
 8008282:	f7f7 ffd5 	bl	8000230 <memchr>
 8008286:	b108      	cbz	r0, 800828c <_printf_i+0x1bc>
 8008288:	1b40      	subs	r0, r0, r5
 800828a:	6060      	str	r0, [r4, #4]
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	2300      	movs	r3, #0
 8008292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008296:	e7a7      	b.n	80081e8 <_printf_i+0x118>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	462a      	mov	r2, r5
 800829c:	4639      	mov	r1, r7
 800829e:	4630      	mov	r0, r6
 80082a0:	47c0      	blx	r8
 80082a2:	3001      	adds	r0, #1
 80082a4:	d0aa      	beq.n	80081fc <_printf_i+0x12c>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	079b      	lsls	r3, r3, #30
 80082aa:	d413      	bmi.n	80082d4 <_printf_i+0x204>
 80082ac:	68e0      	ldr	r0, [r4, #12]
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	4298      	cmp	r0, r3
 80082b2:	bfb8      	it	lt
 80082b4:	4618      	movlt	r0, r3
 80082b6:	e7a3      	b.n	8008200 <_printf_i+0x130>
 80082b8:	2301      	movs	r3, #1
 80082ba:	464a      	mov	r2, r9
 80082bc:	4639      	mov	r1, r7
 80082be:	4630      	mov	r0, r6
 80082c0:	47c0      	blx	r8
 80082c2:	3001      	adds	r0, #1
 80082c4:	d09a      	beq.n	80081fc <_printf_i+0x12c>
 80082c6:	3501      	adds	r5, #1
 80082c8:	68e3      	ldr	r3, [r4, #12]
 80082ca:	9a03      	ldr	r2, [sp, #12]
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	42ab      	cmp	r3, r5
 80082d0:	dcf2      	bgt.n	80082b8 <_printf_i+0x1e8>
 80082d2:	e7eb      	b.n	80082ac <_printf_i+0x1dc>
 80082d4:	2500      	movs	r5, #0
 80082d6:	f104 0919 	add.w	r9, r4, #25
 80082da:	e7f5      	b.n	80082c8 <_printf_i+0x1f8>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1ac      	bne.n	800823a <_printf_i+0x16a>
 80082e0:	7803      	ldrb	r3, [r0, #0]
 80082e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ea:	e76c      	b.n	80081c6 <_printf_i+0xf6>
 80082ec:	0800daea 	.word	0x0800daea
 80082f0:	0800dafb 	.word	0x0800dafb

080082f4 <sniprintf>:
 80082f4:	b40c      	push	{r2, r3}
 80082f6:	b530      	push	{r4, r5, lr}
 80082f8:	4b17      	ldr	r3, [pc, #92]	; (8008358 <sniprintf+0x64>)
 80082fa:	1e0c      	subs	r4, r1, #0
 80082fc:	b09d      	sub	sp, #116	; 0x74
 80082fe:	681d      	ldr	r5, [r3, #0]
 8008300:	da08      	bge.n	8008314 <sniprintf+0x20>
 8008302:	238b      	movs	r3, #139	; 0x8b
 8008304:	602b      	str	r3, [r5, #0]
 8008306:	f04f 30ff 	mov.w	r0, #4294967295
 800830a:	b01d      	add	sp, #116	; 0x74
 800830c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008310:	b002      	add	sp, #8
 8008312:	4770      	bx	lr
 8008314:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008318:	f8ad 3014 	strh.w	r3, [sp, #20]
 800831c:	bf14      	ite	ne
 800831e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008322:	4623      	moveq	r3, r4
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	9307      	str	r3, [sp, #28]
 8008328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	9006      	str	r0, [sp, #24]
 8008330:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008334:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008336:	ab21      	add	r3, sp, #132	; 0x84
 8008338:	a902      	add	r1, sp, #8
 800833a:	4628      	mov	r0, r5
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	f002 fce1 	bl	800ad04 <_svfiprintf_r>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	bfbc      	itt	lt
 8008346:	238b      	movlt	r3, #139	; 0x8b
 8008348:	602b      	strlt	r3, [r5, #0]
 800834a:	2c00      	cmp	r4, #0
 800834c:	d0dd      	beq.n	800830a <sniprintf+0x16>
 800834e:	9b02      	ldr	r3, [sp, #8]
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
 8008354:	e7d9      	b.n	800830a <sniprintf+0x16>
 8008356:	bf00      	nop
 8008358:	20002eec 	.word	0x20002eec

0800835c <sulp>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	ec45 4b10 	vmov	d0, r4, r5
 8008366:	4616      	mov	r6, r2
 8008368:	f002 fa88 	bl	800a87c <__ulp>
 800836c:	ec51 0b10 	vmov	r0, r1, d0
 8008370:	b17e      	cbz	r6, 8008392 <sulp+0x36>
 8008372:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008376:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd09      	ble.n	8008392 <sulp+0x36>
 800837e:	051b      	lsls	r3, r3, #20
 8008380:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008384:	2400      	movs	r4, #0
 8008386:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800838a:	4622      	mov	r2, r4
 800838c:	462b      	mov	r3, r5
 800838e:	f7f8 f95b 	bl	8000648 <__aeabi_dmul>
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	0000      	movs	r0, r0
	...

08008398 <_strtod_l>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	461f      	mov	r7, r3
 800839e:	b0a1      	sub	sp, #132	; 0x84
 80083a0:	2300      	movs	r3, #0
 80083a2:	4681      	mov	r9, r0
 80083a4:	4638      	mov	r0, r7
 80083a6:	460e      	mov	r6, r1
 80083a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80083aa:	931c      	str	r3, [sp, #112]	; 0x70
 80083ac:	f001 ff66 	bl	800a27c <__localeconv_l>
 80083b0:	4680      	mov	r8, r0
 80083b2:	6800      	ldr	r0, [r0, #0]
 80083b4:	f7f7 ff34 	bl	8000220 <strlen>
 80083b8:	f04f 0a00 	mov.w	sl, #0
 80083bc:	4604      	mov	r4, r0
 80083be:	f04f 0b00 	mov.w	fp, #0
 80083c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80083c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	2a0d      	cmp	r2, #13
 80083ca:	d832      	bhi.n	8008432 <_strtod_l+0x9a>
 80083cc:	2a09      	cmp	r2, #9
 80083ce:	d236      	bcs.n	800843e <_strtod_l+0xa6>
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d03e      	beq.n	8008452 <_strtod_l+0xba>
 80083d4:	2300      	movs	r3, #0
 80083d6:	930d      	str	r3, [sp, #52]	; 0x34
 80083d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80083da:	782b      	ldrb	r3, [r5, #0]
 80083dc:	2b30      	cmp	r3, #48	; 0x30
 80083de:	f040 80ac 	bne.w	800853a <_strtod_l+0x1a2>
 80083e2:	786b      	ldrb	r3, [r5, #1]
 80083e4:	2b58      	cmp	r3, #88	; 0x58
 80083e6:	d001      	beq.n	80083ec <_strtod_l+0x54>
 80083e8:	2b78      	cmp	r3, #120	; 0x78
 80083ea:	d167      	bne.n	80084bc <_strtod_l+0x124>
 80083ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	ab1c      	add	r3, sp, #112	; 0x70
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	9702      	str	r7, [sp, #8]
 80083f6:	ab1d      	add	r3, sp, #116	; 0x74
 80083f8:	4a88      	ldr	r2, [pc, #544]	; (800861c <_strtod_l+0x284>)
 80083fa:	a91b      	add	r1, sp, #108	; 0x6c
 80083fc:	4648      	mov	r0, r9
 80083fe:	f001 fc66 	bl	8009cce <__gethex>
 8008402:	f010 0407 	ands.w	r4, r0, #7
 8008406:	4606      	mov	r6, r0
 8008408:	d005      	beq.n	8008416 <_strtod_l+0x7e>
 800840a:	2c06      	cmp	r4, #6
 800840c:	d12b      	bne.n	8008466 <_strtod_l+0xce>
 800840e:	3501      	adds	r5, #1
 8008410:	2300      	movs	r3, #0
 8008412:	951b      	str	r5, [sp, #108]	; 0x6c
 8008414:	930d      	str	r3, [sp, #52]	; 0x34
 8008416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 859a 	bne.w	8008f52 <_strtod_l+0xbba>
 800841e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008420:	b1e3      	cbz	r3, 800845c <_strtod_l+0xc4>
 8008422:	4652      	mov	r2, sl
 8008424:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008428:	ec43 2b10 	vmov	d0, r2, r3
 800842c:	b021      	add	sp, #132	; 0x84
 800842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008432:	2a2b      	cmp	r2, #43	; 0x2b
 8008434:	d015      	beq.n	8008462 <_strtod_l+0xca>
 8008436:	2a2d      	cmp	r2, #45	; 0x2d
 8008438:	d004      	beq.n	8008444 <_strtod_l+0xac>
 800843a:	2a20      	cmp	r2, #32
 800843c:	d1ca      	bne.n	80083d4 <_strtod_l+0x3c>
 800843e:	3301      	adds	r3, #1
 8008440:	931b      	str	r3, [sp, #108]	; 0x6c
 8008442:	e7bf      	b.n	80083c4 <_strtod_l+0x2c>
 8008444:	2201      	movs	r2, #1
 8008446:	920d      	str	r2, [sp, #52]	; 0x34
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	921b      	str	r2, [sp, #108]	; 0x6c
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1c2      	bne.n	80083d8 <_strtod_l+0x40>
 8008452:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008454:	961b      	str	r6, [sp, #108]	; 0x6c
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 8579 	bne.w	8008f4e <_strtod_l+0xbb6>
 800845c:	4652      	mov	r2, sl
 800845e:	465b      	mov	r3, fp
 8008460:	e7e2      	b.n	8008428 <_strtod_l+0x90>
 8008462:	2200      	movs	r2, #0
 8008464:	e7ef      	b.n	8008446 <_strtod_l+0xae>
 8008466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008468:	b13a      	cbz	r2, 800847a <_strtod_l+0xe2>
 800846a:	2135      	movs	r1, #53	; 0x35
 800846c:	a81e      	add	r0, sp, #120	; 0x78
 800846e:	f002 fafd 	bl	800aa6c <__copybits>
 8008472:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008474:	4648      	mov	r0, r9
 8008476:	f001 ff6a 	bl	800a34e <_Bfree>
 800847a:	3c01      	subs	r4, #1
 800847c:	2c04      	cmp	r4, #4
 800847e:	d806      	bhi.n	800848e <_strtod_l+0xf6>
 8008480:	e8df f004 	tbb	[pc, r4]
 8008484:	1714030a 	.word	0x1714030a
 8008488:	0a          	.byte	0x0a
 8008489:	00          	.byte	0x00
 800848a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800848e:	0730      	lsls	r0, r6, #28
 8008490:	d5c1      	bpl.n	8008416 <_strtod_l+0x7e>
 8008492:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008496:	e7be      	b.n	8008416 <_strtod_l+0x7e>
 8008498:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800849c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800849e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084aa:	e7f0      	b.n	800848e <_strtod_l+0xf6>
 80084ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008620 <_strtod_l+0x288>
 80084b0:	e7ed      	b.n	800848e <_strtod_l+0xf6>
 80084b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80084b6:	f04f 3aff 	mov.w	sl, #4294967295
 80084ba:	e7e8      	b.n	800848e <_strtod_l+0xf6>
 80084bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	2b30      	cmp	r3, #48	; 0x30
 80084c6:	d0f9      	beq.n	80084bc <_strtod_l+0x124>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0a4      	beq.n	8008416 <_strtod_l+0x7e>
 80084cc:	2301      	movs	r3, #1
 80084ce:	2500      	movs	r5, #0
 80084d0:	9306      	str	r3, [sp, #24]
 80084d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084d4:	9308      	str	r3, [sp, #32]
 80084d6:	9507      	str	r5, [sp, #28]
 80084d8:	9505      	str	r5, [sp, #20]
 80084da:	220a      	movs	r2, #10
 80084dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80084de:	7807      	ldrb	r7, [r0, #0]
 80084e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80084e4:	b2d9      	uxtb	r1, r3
 80084e6:	2909      	cmp	r1, #9
 80084e8:	d929      	bls.n	800853e <_strtod_l+0x1a6>
 80084ea:	4622      	mov	r2, r4
 80084ec:	f8d8 1000 	ldr.w	r1, [r8]
 80084f0:	f002 fd10 	bl	800af14 <strncmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d031      	beq.n	800855c <_strtod_l+0x1c4>
 80084f8:	2000      	movs	r0, #0
 80084fa:	9c05      	ldr	r4, [sp, #20]
 80084fc:	9004      	str	r0, [sp, #16]
 80084fe:	463b      	mov	r3, r7
 8008500:	4602      	mov	r2, r0
 8008502:	2b65      	cmp	r3, #101	; 0x65
 8008504:	d001      	beq.n	800850a <_strtod_l+0x172>
 8008506:	2b45      	cmp	r3, #69	; 0x45
 8008508:	d114      	bne.n	8008534 <_strtod_l+0x19c>
 800850a:	b924      	cbnz	r4, 8008516 <_strtod_l+0x17e>
 800850c:	b910      	cbnz	r0, 8008514 <_strtod_l+0x17c>
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d09e      	beq.n	8008452 <_strtod_l+0xba>
 8008514:	2400      	movs	r4, #0
 8008516:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008518:	1c73      	adds	r3, r6, #1
 800851a:	931b      	str	r3, [sp, #108]	; 0x6c
 800851c:	7873      	ldrb	r3, [r6, #1]
 800851e:	2b2b      	cmp	r3, #43	; 0x2b
 8008520:	d078      	beq.n	8008614 <_strtod_l+0x27c>
 8008522:	2b2d      	cmp	r3, #45	; 0x2d
 8008524:	d070      	beq.n	8008608 <_strtod_l+0x270>
 8008526:	f04f 0c00 	mov.w	ip, #0
 800852a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800852e:	2f09      	cmp	r7, #9
 8008530:	d97c      	bls.n	800862c <_strtod_l+0x294>
 8008532:	961b      	str	r6, [sp, #108]	; 0x6c
 8008534:	f04f 0e00 	mov.w	lr, #0
 8008538:	e09a      	b.n	8008670 <_strtod_l+0x2d8>
 800853a:	2300      	movs	r3, #0
 800853c:	e7c7      	b.n	80084ce <_strtod_l+0x136>
 800853e:	9905      	ldr	r1, [sp, #20]
 8008540:	2908      	cmp	r1, #8
 8008542:	bfdd      	ittte	le
 8008544:	9907      	ldrle	r1, [sp, #28]
 8008546:	fb02 3301 	mlale	r3, r2, r1, r3
 800854a:	9307      	strle	r3, [sp, #28]
 800854c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008550:	9b05      	ldr	r3, [sp, #20]
 8008552:	3001      	adds	r0, #1
 8008554:	3301      	adds	r3, #1
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	901b      	str	r0, [sp, #108]	; 0x6c
 800855a:	e7bf      	b.n	80084dc <_strtod_l+0x144>
 800855c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800855e:	191a      	adds	r2, r3, r4
 8008560:	921b      	str	r2, [sp, #108]	; 0x6c
 8008562:	9a05      	ldr	r2, [sp, #20]
 8008564:	5d1b      	ldrb	r3, [r3, r4]
 8008566:	2a00      	cmp	r2, #0
 8008568:	d037      	beq.n	80085da <_strtod_l+0x242>
 800856a:	9c05      	ldr	r4, [sp, #20]
 800856c:	4602      	mov	r2, r0
 800856e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008572:	2909      	cmp	r1, #9
 8008574:	d913      	bls.n	800859e <_strtod_l+0x206>
 8008576:	2101      	movs	r1, #1
 8008578:	9104      	str	r1, [sp, #16]
 800857a:	e7c2      	b.n	8008502 <_strtod_l+0x16a>
 800857c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	921b      	str	r2, [sp, #108]	; 0x6c
 8008582:	785b      	ldrb	r3, [r3, #1]
 8008584:	3001      	adds	r0, #1
 8008586:	2b30      	cmp	r3, #48	; 0x30
 8008588:	d0f8      	beq.n	800857c <_strtod_l+0x1e4>
 800858a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800858e:	2a08      	cmp	r2, #8
 8008590:	f200 84e4 	bhi.w	8008f5c <_strtod_l+0xbc4>
 8008594:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008596:	9208      	str	r2, [sp, #32]
 8008598:	4602      	mov	r2, r0
 800859a:	2000      	movs	r0, #0
 800859c:	4604      	mov	r4, r0
 800859e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80085a2:	f100 0101 	add.w	r1, r0, #1
 80085a6:	d012      	beq.n	80085ce <_strtod_l+0x236>
 80085a8:	440a      	add	r2, r1
 80085aa:	eb00 0c04 	add.w	ip, r0, r4
 80085ae:	4621      	mov	r1, r4
 80085b0:	270a      	movs	r7, #10
 80085b2:	458c      	cmp	ip, r1
 80085b4:	d113      	bne.n	80085de <_strtod_l+0x246>
 80085b6:	1821      	adds	r1, r4, r0
 80085b8:	2908      	cmp	r1, #8
 80085ba:	f104 0401 	add.w	r4, r4, #1
 80085be:	4404      	add	r4, r0
 80085c0:	dc19      	bgt.n	80085f6 <_strtod_l+0x25e>
 80085c2:	9b07      	ldr	r3, [sp, #28]
 80085c4:	210a      	movs	r1, #10
 80085c6:	fb01 e303 	mla	r3, r1, r3, lr
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	2100      	movs	r1, #0
 80085ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085d0:	1c58      	adds	r0, r3, #1
 80085d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	4608      	mov	r0, r1
 80085d8:	e7c9      	b.n	800856e <_strtod_l+0x1d6>
 80085da:	9805      	ldr	r0, [sp, #20]
 80085dc:	e7d3      	b.n	8008586 <_strtod_l+0x1ee>
 80085de:	2908      	cmp	r1, #8
 80085e0:	f101 0101 	add.w	r1, r1, #1
 80085e4:	dc03      	bgt.n	80085ee <_strtod_l+0x256>
 80085e6:	9b07      	ldr	r3, [sp, #28]
 80085e8:	437b      	muls	r3, r7
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	e7e1      	b.n	80085b2 <_strtod_l+0x21a>
 80085ee:	2910      	cmp	r1, #16
 80085f0:	bfd8      	it	le
 80085f2:	437d      	mulle	r5, r7
 80085f4:	e7dd      	b.n	80085b2 <_strtod_l+0x21a>
 80085f6:	2c10      	cmp	r4, #16
 80085f8:	bfdc      	itt	le
 80085fa:	210a      	movle	r1, #10
 80085fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8008600:	e7e4      	b.n	80085cc <_strtod_l+0x234>
 8008602:	2301      	movs	r3, #1
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	e781      	b.n	800850c <_strtod_l+0x174>
 8008608:	f04f 0c01 	mov.w	ip, #1
 800860c:	1cb3      	adds	r3, r6, #2
 800860e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008610:	78b3      	ldrb	r3, [r6, #2]
 8008612:	e78a      	b.n	800852a <_strtod_l+0x192>
 8008614:	f04f 0c00 	mov.w	ip, #0
 8008618:	e7f8      	b.n	800860c <_strtod_l+0x274>
 800861a:	bf00      	nop
 800861c:	0800db0c 	.word	0x0800db0c
 8008620:	7ff00000 	.word	0x7ff00000
 8008624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008626:	1c5f      	adds	r7, r3, #1
 8008628:	971b      	str	r7, [sp, #108]	; 0x6c
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2b30      	cmp	r3, #48	; 0x30
 800862e:	d0f9      	beq.n	8008624 <_strtod_l+0x28c>
 8008630:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008634:	2f08      	cmp	r7, #8
 8008636:	f63f af7d 	bhi.w	8008534 <_strtod_l+0x19c>
 800863a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800863e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008640:	930a      	str	r3, [sp, #40]	; 0x28
 8008642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008644:	1c5f      	adds	r7, r3, #1
 8008646:	971b      	str	r7, [sp, #108]	; 0x6c
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800864e:	f1b8 0f09 	cmp.w	r8, #9
 8008652:	d937      	bls.n	80086c4 <_strtod_l+0x32c>
 8008654:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008656:	1a7f      	subs	r7, r7, r1
 8008658:	2f08      	cmp	r7, #8
 800865a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800865e:	dc37      	bgt.n	80086d0 <_strtod_l+0x338>
 8008660:	45be      	cmp	lr, r7
 8008662:	bfa8      	it	ge
 8008664:	46be      	movge	lr, r7
 8008666:	f1bc 0f00 	cmp.w	ip, #0
 800866a:	d001      	beq.n	8008670 <_strtod_l+0x2d8>
 800866c:	f1ce 0e00 	rsb	lr, lr, #0
 8008670:	2c00      	cmp	r4, #0
 8008672:	d151      	bne.n	8008718 <_strtod_l+0x380>
 8008674:	2800      	cmp	r0, #0
 8008676:	f47f aece 	bne.w	8008416 <_strtod_l+0x7e>
 800867a:	9a06      	ldr	r2, [sp, #24]
 800867c:	2a00      	cmp	r2, #0
 800867e:	f47f aeca 	bne.w	8008416 <_strtod_l+0x7e>
 8008682:	9a04      	ldr	r2, [sp, #16]
 8008684:	2a00      	cmp	r2, #0
 8008686:	f47f aee4 	bne.w	8008452 <_strtod_l+0xba>
 800868a:	2b4e      	cmp	r3, #78	; 0x4e
 800868c:	d027      	beq.n	80086de <_strtod_l+0x346>
 800868e:	dc21      	bgt.n	80086d4 <_strtod_l+0x33c>
 8008690:	2b49      	cmp	r3, #73	; 0x49
 8008692:	f47f aede 	bne.w	8008452 <_strtod_l+0xba>
 8008696:	49a0      	ldr	r1, [pc, #640]	; (8008918 <_strtod_l+0x580>)
 8008698:	a81b      	add	r0, sp, #108	; 0x6c
 800869a:	f001 fd4b 	bl	800a134 <__match>
 800869e:	2800      	cmp	r0, #0
 80086a0:	f43f aed7 	beq.w	8008452 <_strtod_l+0xba>
 80086a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086a6:	499d      	ldr	r1, [pc, #628]	; (800891c <_strtod_l+0x584>)
 80086a8:	3b01      	subs	r3, #1
 80086aa:	a81b      	add	r0, sp, #108	; 0x6c
 80086ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80086ae:	f001 fd41 	bl	800a134 <__match>
 80086b2:	b910      	cbnz	r0, 80086ba <_strtod_l+0x322>
 80086b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086b6:	3301      	adds	r3, #1
 80086b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80086ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008930 <_strtod_l+0x598>
 80086be:	f04f 0a00 	mov.w	sl, #0
 80086c2:	e6a8      	b.n	8008416 <_strtod_l+0x7e>
 80086c4:	210a      	movs	r1, #10
 80086c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80086ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80086ce:	e7b8      	b.n	8008642 <_strtod_l+0x2aa>
 80086d0:	46be      	mov	lr, r7
 80086d2:	e7c8      	b.n	8008666 <_strtod_l+0x2ce>
 80086d4:	2b69      	cmp	r3, #105	; 0x69
 80086d6:	d0de      	beq.n	8008696 <_strtod_l+0x2fe>
 80086d8:	2b6e      	cmp	r3, #110	; 0x6e
 80086da:	f47f aeba 	bne.w	8008452 <_strtod_l+0xba>
 80086de:	4990      	ldr	r1, [pc, #576]	; (8008920 <_strtod_l+0x588>)
 80086e0:	a81b      	add	r0, sp, #108	; 0x6c
 80086e2:	f001 fd27 	bl	800a134 <__match>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f43f aeb3 	beq.w	8008452 <_strtod_l+0xba>
 80086ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b28      	cmp	r3, #40	; 0x28
 80086f2:	d10e      	bne.n	8008712 <_strtod_l+0x37a>
 80086f4:	aa1e      	add	r2, sp, #120	; 0x78
 80086f6:	498b      	ldr	r1, [pc, #556]	; (8008924 <_strtod_l+0x58c>)
 80086f8:	a81b      	add	r0, sp, #108	; 0x6c
 80086fa:	f001 fd2f 	bl	800a15c <__hexnan>
 80086fe:	2805      	cmp	r0, #5
 8008700:	d107      	bne.n	8008712 <_strtod_l+0x37a>
 8008702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008704:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008708:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800870c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008710:	e681      	b.n	8008416 <_strtod_l+0x7e>
 8008712:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008938 <_strtod_l+0x5a0>
 8008716:	e7d2      	b.n	80086be <_strtod_l+0x326>
 8008718:	ebae 0302 	sub.w	r3, lr, r2
 800871c:	9306      	str	r3, [sp, #24]
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	9807      	ldr	r0, [sp, #28]
 8008722:	2b00      	cmp	r3, #0
 8008724:	bf08      	it	eq
 8008726:	4623      	moveq	r3, r4
 8008728:	2c10      	cmp	r4, #16
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	46a0      	mov	r8, r4
 800872e:	bfa8      	it	ge
 8008730:	f04f 0810 	movge.w	r8, #16
 8008734:	f7f7 ff0e 	bl	8000554 <__aeabi_ui2d>
 8008738:	2c09      	cmp	r4, #9
 800873a:	4682      	mov	sl, r0
 800873c:	468b      	mov	fp, r1
 800873e:	dc13      	bgt.n	8008768 <_strtod_l+0x3d0>
 8008740:	9b06      	ldr	r3, [sp, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f43f ae67 	beq.w	8008416 <_strtod_l+0x7e>
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	dd7a      	ble.n	8008842 <_strtod_l+0x4aa>
 800874c:	2b16      	cmp	r3, #22
 800874e:	dc61      	bgt.n	8008814 <_strtod_l+0x47c>
 8008750:	4a75      	ldr	r2, [pc, #468]	; (8008928 <_strtod_l+0x590>)
 8008752:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008756:	e9de 0100 	ldrd	r0, r1, [lr]
 800875a:	4652      	mov	r2, sl
 800875c:	465b      	mov	r3, fp
 800875e:	f7f7 ff73 	bl	8000648 <__aeabi_dmul>
 8008762:	4682      	mov	sl, r0
 8008764:	468b      	mov	fp, r1
 8008766:	e656      	b.n	8008416 <_strtod_l+0x7e>
 8008768:	4b6f      	ldr	r3, [pc, #444]	; (8008928 <_strtod_l+0x590>)
 800876a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800876e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008772:	f7f7 ff69 	bl	8000648 <__aeabi_dmul>
 8008776:	4606      	mov	r6, r0
 8008778:	4628      	mov	r0, r5
 800877a:	460f      	mov	r7, r1
 800877c:	f7f7 feea 	bl	8000554 <__aeabi_ui2d>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f7 fda8 	bl	80002dc <__adddf3>
 800878c:	2c0f      	cmp	r4, #15
 800878e:	4682      	mov	sl, r0
 8008790:	468b      	mov	fp, r1
 8008792:	ddd5      	ble.n	8008740 <_strtod_l+0x3a8>
 8008794:	9b06      	ldr	r3, [sp, #24]
 8008796:	eba4 0808 	sub.w	r8, r4, r8
 800879a:	4498      	add	r8, r3
 800879c:	f1b8 0f00 	cmp.w	r8, #0
 80087a0:	f340 8096 	ble.w	80088d0 <_strtod_l+0x538>
 80087a4:	f018 030f 	ands.w	r3, r8, #15
 80087a8:	d00a      	beq.n	80087c0 <_strtod_l+0x428>
 80087aa:	495f      	ldr	r1, [pc, #380]	; (8008928 <_strtod_l+0x590>)
 80087ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087b0:	4652      	mov	r2, sl
 80087b2:	465b      	mov	r3, fp
 80087b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b8:	f7f7 ff46 	bl	8000648 <__aeabi_dmul>
 80087bc:	4682      	mov	sl, r0
 80087be:	468b      	mov	fp, r1
 80087c0:	f038 080f 	bics.w	r8, r8, #15
 80087c4:	d073      	beq.n	80088ae <_strtod_l+0x516>
 80087c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80087ca:	dd47      	ble.n	800885c <_strtod_l+0x4c4>
 80087cc:	2400      	movs	r4, #0
 80087ce:	46a0      	mov	r8, r4
 80087d0:	9407      	str	r4, [sp, #28]
 80087d2:	9405      	str	r4, [sp, #20]
 80087d4:	2322      	movs	r3, #34	; 0x22
 80087d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008930 <_strtod_l+0x598>
 80087da:	f8c9 3000 	str.w	r3, [r9]
 80087de:	f04f 0a00 	mov.w	sl, #0
 80087e2:	9b07      	ldr	r3, [sp, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f43f ae16 	beq.w	8008416 <_strtod_l+0x7e>
 80087ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087ec:	4648      	mov	r0, r9
 80087ee:	f001 fdae 	bl	800a34e <_Bfree>
 80087f2:	9905      	ldr	r1, [sp, #20]
 80087f4:	4648      	mov	r0, r9
 80087f6:	f001 fdaa 	bl	800a34e <_Bfree>
 80087fa:	4641      	mov	r1, r8
 80087fc:	4648      	mov	r0, r9
 80087fe:	f001 fda6 	bl	800a34e <_Bfree>
 8008802:	9907      	ldr	r1, [sp, #28]
 8008804:	4648      	mov	r0, r9
 8008806:	f001 fda2 	bl	800a34e <_Bfree>
 800880a:	4621      	mov	r1, r4
 800880c:	4648      	mov	r0, r9
 800880e:	f001 fd9e 	bl	800a34e <_Bfree>
 8008812:	e600      	b.n	8008416 <_strtod_l+0x7e>
 8008814:	9a06      	ldr	r2, [sp, #24]
 8008816:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800881a:	4293      	cmp	r3, r2
 800881c:	dbba      	blt.n	8008794 <_strtod_l+0x3fc>
 800881e:	4d42      	ldr	r5, [pc, #264]	; (8008928 <_strtod_l+0x590>)
 8008820:	f1c4 040f 	rsb	r4, r4, #15
 8008824:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008828:	4652      	mov	r2, sl
 800882a:	465b      	mov	r3, fp
 800882c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008830:	f7f7 ff0a 	bl	8000648 <__aeabi_dmul>
 8008834:	9b06      	ldr	r3, [sp, #24]
 8008836:	1b1c      	subs	r4, r3, r4
 8008838:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800883c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008840:	e78d      	b.n	800875e <_strtod_l+0x3c6>
 8008842:	f113 0f16 	cmn.w	r3, #22
 8008846:	dba5      	blt.n	8008794 <_strtod_l+0x3fc>
 8008848:	4a37      	ldr	r2, [pc, #220]	; (8008928 <_strtod_l+0x590>)
 800884a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800884e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008852:	4650      	mov	r0, sl
 8008854:	4659      	mov	r1, fp
 8008856:	f7f8 f821 	bl	800089c <__aeabi_ddiv>
 800885a:	e782      	b.n	8008762 <_strtod_l+0x3ca>
 800885c:	2300      	movs	r3, #0
 800885e:	4e33      	ldr	r6, [pc, #204]	; (800892c <_strtod_l+0x594>)
 8008860:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008864:	4650      	mov	r0, sl
 8008866:	4659      	mov	r1, fp
 8008868:	461d      	mov	r5, r3
 800886a:	f1b8 0f01 	cmp.w	r8, #1
 800886e:	dc21      	bgt.n	80088b4 <_strtod_l+0x51c>
 8008870:	b10b      	cbz	r3, 8008876 <_strtod_l+0x4de>
 8008872:	4682      	mov	sl, r0
 8008874:	468b      	mov	fp, r1
 8008876:	4b2d      	ldr	r3, [pc, #180]	; (800892c <_strtod_l+0x594>)
 8008878:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800887c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008880:	4652      	mov	r2, sl
 8008882:	465b      	mov	r3, fp
 8008884:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008888:	f7f7 fede 	bl	8000648 <__aeabi_dmul>
 800888c:	4b28      	ldr	r3, [pc, #160]	; (8008930 <_strtod_l+0x598>)
 800888e:	460a      	mov	r2, r1
 8008890:	400b      	ands	r3, r1
 8008892:	4928      	ldr	r1, [pc, #160]	; (8008934 <_strtod_l+0x59c>)
 8008894:	428b      	cmp	r3, r1
 8008896:	4682      	mov	sl, r0
 8008898:	d898      	bhi.n	80087cc <_strtod_l+0x434>
 800889a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800889e:	428b      	cmp	r3, r1
 80088a0:	bf86      	itte	hi
 80088a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800893c <_strtod_l+0x5a4>
 80088a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80088aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80088ae:	2300      	movs	r3, #0
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	e077      	b.n	80089a4 <_strtod_l+0x60c>
 80088b4:	f018 0f01 	tst.w	r8, #1
 80088b8:	d006      	beq.n	80088c8 <_strtod_l+0x530>
 80088ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 fec1 	bl	8000648 <__aeabi_dmul>
 80088c6:	2301      	movs	r3, #1
 80088c8:	3501      	adds	r5, #1
 80088ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088ce:	e7cc      	b.n	800886a <_strtod_l+0x4d2>
 80088d0:	d0ed      	beq.n	80088ae <_strtod_l+0x516>
 80088d2:	f1c8 0800 	rsb	r8, r8, #0
 80088d6:	f018 020f 	ands.w	r2, r8, #15
 80088da:	d00a      	beq.n	80088f2 <_strtod_l+0x55a>
 80088dc:	4b12      	ldr	r3, [pc, #72]	; (8008928 <_strtod_l+0x590>)
 80088de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088e2:	4650      	mov	r0, sl
 80088e4:	4659      	mov	r1, fp
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 ffd7 	bl	800089c <__aeabi_ddiv>
 80088ee:	4682      	mov	sl, r0
 80088f0:	468b      	mov	fp, r1
 80088f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80088f6:	d0da      	beq.n	80088ae <_strtod_l+0x516>
 80088f8:	f1b8 0f1f 	cmp.w	r8, #31
 80088fc:	dd20      	ble.n	8008940 <_strtod_l+0x5a8>
 80088fe:	2400      	movs	r4, #0
 8008900:	46a0      	mov	r8, r4
 8008902:	9407      	str	r4, [sp, #28]
 8008904:	9405      	str	r4, [sp, #20]
 8008906:	2322      	movs	r3, #34	; 0x22
 8008908:	f04f 0a00 	mov.w	sl, #0
 800890c:	f04f 0b00 	mov.w	fp, #0
 8008910:	f8c9 3000 	str.w	r3, [r9]
 8008914:	e765      	b.n	80087e2 <_strtod_l+0x44a>
 8008916:	bf00      	nop
 8008918:	0800dadd 	.word	0x0800dadd
 800891c:	0800db63 	.word	0x0800db63
 8008920:	0800dae5 	.word	0x0800dae5
 8008924:	0800db20 	.word	0x0800db20
 8008928:	0800dba0 	.word	0x0800dba0
 800892c:	0800db78 	.word	0x0800db78
 8008930:	7ff00000 	.word	0x7ff00000
 8008934:	7ca00000 	.word	0x7ca00000
 8008938:	fff80000 	.word	0xfff80000
 800893c:	7fefffff 	.word	0x7fefffff
 8008940:	f018 0310 	ands.w	r3, r8, #16
 8008944:	bf18      	it	ne
 8008946:	236a      	movne	r3, #106	; 0x6a
 8008948:	4da0      	ldr	r5, [pc, #640]	; (8008bcc <_strtod_l+0x834>)
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	4650      	mov	r0, sl
 800894e:	4659      	mov	r1, fp
 8008950:	2300      	movs	r3, #0
 8008952:	f1b8 0f00 	cmp.w	r8, #0
 8008956:	f300 810a 	bgt.w	8008b6e <_strtod_l+0x7d6>
 800895a:	b10b      	cbz	r3, 8008960 <_strtod_l+0x5c8>
 800895c:	4682      	mov	sl, r0
 800895e:	468b      	mov	fp, r1
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	b1bb      	cbz	r3, 8008994 <_strtod_l+0x5fc>
 8008964:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008968:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800896c:	2b00      	cmp	r3, #0
 800896e:	4659      	mov	r1, fp
 8008970:	dd10      	ble.n	8008994 <_strtod_l+0x5fc>
 8008972:	2b1f      	cmp	r3, #31
 8008974:	f340 8107 	ble.w	8008b86 <_strtod_l+0x7ee>
 8008978:	2b34      	cmp	r3, #52	; 0x34
 800897a:	bfde      	ittt	le
 800897c:	3b20      	suble	r3, #32
 800897e:	f04f 32ff 	movle.w	r2, #4294967295
 8008982:	fa02 f303 	lslle.w	r3, r2, r3
 8008986:	f04f 0a00 	mov.w	sl, #0
 800898a:	bfcc      	ite	gt
 800898c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008990:	ea03 0b01 	andle.w	fp, r3, r1
 8008994:	2200      	movs	r2, #0
 8008996:	2300      	movs	r3, #0
 8008998:	4650      	mov	r0, sl
 800899a:	4659      	mov	r1, fp
 800899c:	f7f8 f8bc 	bl	8000b18 <__aeabi_dcmpeq>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d1ac      	bne.n	80088fe <_strtod_l+0x566>
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	9a05      	ldr	r2, [sp, #20]
 80089aa:	9908      	ldr	r1, [sp, #32]
 80089ac:	4623      	mov	r3, r4
 80089ae:	4648      	mov	r0, r9
 80089b0:	f001 fd1f 	bl	800a3f2 <__s2b>
 80089b4:	9007      	str	r0, [sp, #28]
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f43f af08 	beq.w	80087cc <_strtod_l+0x434>
 80089bc:	9a06      	ldr	r2, [sp, #24]
 80089be:	9b06      	ldr	r3, [sp, #24]
 80089c0:	2a00      	cmp	r2, #0
 80089c2:	f1c3 0300 	rsb	r3, r3, #0
 80089c6:	bfa8      	it	ge
 80089c8:	2300      	movge	r3, #0
 80089ca:	930e      	str	r3, [sp, #56]	; 0x38
 80089cc:	2400      	movs	r4, #0
 80089ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089d2:	9316      	str	r3, [sp, #88]	; 0x58
 80089d4:	46a0      	mov	r8, r4
 80089d6:	9b07      	ldr	r3, [sp, #28]
 80089d8:	4648      	mov	r0, r9
 80089da:	6859      	ldr	r1, [r3, #4]
 80089dc:	f001 fc83 	bl	800a2e6 <_Balloc>
 80089e0:	9005      	str	r0, [sp, #20]
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f43f aef6 	beq.w	80087d4 <_strtod_l+0x43c>
 80089e8:	9b07      	ldr	r3, [sp, #28]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	3202      	adds	r2, #2
 80089ee:	f103 010c 	add.w	r1, r3, #12
 80089f2:	0092      	lsls	r2, r2, #2
 80089f4:	300c      	adds	r0, #12
 80089f6:	f001 fc6b 	bl	800a2d0 <memcpy>
 80089fa:	aa1e      	add	r2, sp, #120	; 0x78
 80089fc:	a91d      	add	r1, sp, #116	; 0x74
 80089fe:	ec4b ab10 	vmov	d0, sl, fp
 8008a02:	4648      	mov	r0, r9
 8008a04:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008a08:	f001 ffae 	bl	800a968 <__d2b>
 8008a0c:	901c      	str	r0, [sp, #112]	; 0x70
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f aee0 	beq.w	80087d4 <_strtod_l+0x43c>
 8008a14:	2101      	movs	r1, #1
 8008a16:	4648      	mov	r0, r9
 8008a18:	f001 fd77 	bl	800a50a <__i2b>
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f43f aed8 	beq.w	80087d4 <_strtod_l+0x43c>
 8008a24:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008a26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a28:	2e00      	cmp	r6, #0
 8008a2a:	bfab      	itete	ge
 8008a2c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008a2e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008a30:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008a32:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008a34:	bfac      	ite	ge
 8008a36:	18f7      	addge	r7, r6, r3
 8008a38:	1b9d      	sublt	r5, r3, r6
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	1af6      	subs	r6, r6, r3
 8008a3e:	4416      	add	r6, r2
 8008a40:	4b63      	ldr	r3, [pc, #396]	; (8008bd0 <_strtod_l+0x838>)
 8008a42:	3e01      	subs	r6, #1
 8008a44:	429e      	cmp	r6, r3
 8008a46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a4a:	f280 80af 	bge.w	8008bac <_strtod_l+0x814>
 8008a4e:	1b9b      	subs	r3, r3, r6
 8008a50:	2b1f      	cmp	r3, #31
 8008a52:	eba2 0203 	sub.w	r2, r2, r3
 8008a56:	f04f 0101 	mov.w	r1, #1
 8008a5a:	f300 809b 	bgt.w	8008b94 <_strtod_l+0x7fc>
 8008a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a62:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a64:	2300      	movs	r3, #0
 8008a66:	930a      	str	r3, [sp, #40]	; 0x28
 8008a68:	18be      	adds	r6, r7, r2
 8008a6a:	9b04      	ldr	r3, [sp, #16]
 8008a6c:	42b7      	cmp	r7, r6
 8008a6e:	4415      	add	r5, r2
 8008a70:	441d      	add	r5, r3
 8008a72:	463b      	mov	r3, r7
 8008a74:	bfa8      	it	ge
 8008a76:	4633      	movge	r3, r6
 8008a78:	42ab      	cmp	r3, r5
 8008a7a:	bfa8      	it	ge
 8008a7c:	462b      	movge	r3, r5
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfc2      	ittt	gt
 8008a82:	1af6      	subgt	r6, r6, r3
 8008a84:	1aed      	subgt	r5, r5, r3
 8008a86:	1aff      	subgt	r7, r7, r3
 8008a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a8a:	b1bb      	cbz	r3, 8008abc <_strtod_l+0x724>
 8008a8c:	4641      	mov	r1, r8
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4648      	mov	r0, r9
 8008a92:	f001 fdd9 	bl	800a648 <__pow5mult>
 8008a96:	4680      	mov	r8, r0
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f43f ae9b 	beq.w	80087d4 <_strtod_l+0x43c>
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008aa2:	4648      	mov	r0, r9
 8008aa4:	f001 fd3a 	bl	800a51c <__multiply>
 8008aa8:	900c      	str	r0, [sp, #48]	; 0x30
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	f43f ae92 	beq.w	80087d4 <_strtod_l+0x43c>
 8008ab0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ab2:	4648      	mov	r0, r9
 8008ab4:	f001 fc4b 	bl	800a34e <_Bfree>
 8008ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aba:	931c      	str	r3, [sp, #112]	; 0x70
 8008abc:	2e00      	cmp	r6, #0
 8008abe:	dc7a      	bgt.n	8008bb6 <_strtod_l+0x81e>
 8008ac0:	9b06      	ldr	r3, [sp, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dd08      	ble.n	8008ad8 <_strtod_l+0x740>
 8008ac6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ac8:	9905      	ldr	r1, [sp, #20]
 8008aca:	4648      	mov	r0, r9
 8008acc:	f001 fdbc 	bl	800a648 <__pow5mult>
 8008ad0:	9005      	str	r0, [sp, #20]
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f43f ae7e 	beq.w	80087d4 <_strtod_l+0x43c>
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	dd08      	ble.n	8008aee <_strtod_l+0x756>
 8008adc:	462a      	mov	r2, r5
 8008ade:	9905      	ldr	r1, [sp, #20]
 8008ae0:	4648      	mov	r0, r9
 8008ae2:	f001 fdff 	bl	800a6e4 <__lshift>
 8008ae6:	9005      	str	r0, [sp, #20]
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f43f ae73 	beq.w	80087d4 <_strtod_l+0x43c>
 8008aee:	2f00      	cmp	r7, #0
 8008af0:	dd08      	ble.n	8008b04 <_strtod_l+0x76c>
 8008af2:	4641      	mov	r1, r8
 8008af4:	463a      	mov	r2, r7
 8008af6:	4648      	mov	r0, r9
 8008af8:	f001 fdf4 	bl	800a6e4 <__lshift>
 8008afc:	4680      	mov	r8, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f43f ae68 	beq.w	80087d4 <_strtod_l+0x43c>
 8008b04:	9a05      	ldr	r2, [sp, #20]
 8008b06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b08:	4648      	mov	r0, r9
 8008b0a:	f001 fe59 	bl	800a7c0 <__mdiff>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f43f ae5f 	beq.w	80087d4 <_strtod_l+0x43c>
 8008b16:	68c3      	ldr	r3, [r0, #12]
 8008b18:	930c      	str	r3, [sp, #48]	; 0x30
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60c3      	str	r3, [r0, #12]
 8008b1e:	4641      	mov	r1, r8
 8008b20:	f001 fe34 	bl	800a78c <__mcmp>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	da55      	bge.n	8008bd4 <_strtod_l+0x83c>
 8008b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b2a:	b9e3      	cbnz	r3, 8008b66 <_strtod_l+0x7ce>
 8008b2c:	f1ba 0f00 	cmp.w	sl, #0
 8008b30:	d119      	bne.n	8008b66 <_strtod_l+0x7ce>
 8008b32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b36:	b9b3      	cbnz	r3, 8008b66 <_strtod_l+0x7ce>
 8008b38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b3c:	0d1b      	lsrs	r3, r3, #20
 8008b3e:	051b      	lsls	r3, r3, #20
 8008b40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b44:	d90f      	bls.n	8008b66 <_strtod_l+0x7ce>
 8008b46:	6963      	ldr	r3, [r4, #20]
 8008b48:	b913      	cbnz	r3, 8008b50 <_strtod_l+0x7b8>
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	dd0a      	ble.n	8008b66 <_strtod_l+0x7ce>
 8008b50:	4621      	mov	r1, r4
 8008b52:	2201      	movs	r2, #1
 8008b54:	4648      	mov	r0, r9
 8008b56:	f001 fdc5 	bl	800a6e4 <__lshift>
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	f001 fe15 	bl	800a78c <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	dc67      	bgt.n	8008c36 <_strtod_l+0x89e>
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d171      	bne.n	8008c50 <_strtod_l+0x8b8>
 8008b6c:	e63d      	b.n	80087ea <_strtod_l+0x452>
 8008b6e:	f018 0f01 	tst.w	r8, #1
 8008b72:	d004      	beq.n	8008b7e <_strtod_l+0x7e6>
 8008b74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b78:	f7f7 fd66 	bl	8000648 <__aeabi_dmul>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b82:	3508      	adds	r5, #8
 8008b84:	e6e5      	b.n	8008952 <_strtod_l+0x5ba>
 8008b86:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8e:	ea03 0a0a 	and.w	sl, r3, sl
 8008b92:	e6ff      	b.n	8008994 <_strtod_l+0x5fc>
 8008b94:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008b98:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008b9c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008ba0:	36e2      	adds	r6, #226	; 0xe2
 8008ba2:	fa01 f306 	lsl.w	r3, r1, r6
 8008ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba8:	910f      	str	r1, [sp, #60]	; 0x3c
 8008baa:	e75d      	b.n	8008a68 <_strtod_l+0x6d0>
 8008bac:	2300      	movs	r3, #0
 8008bae:	930a      	str	r3, [sp, #40]	; 0x28
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bb4:	e758      	b.n	8008a68 <_strtod_l+0x6d0>
 8008bb6:	4632      	mov	r2, r6
 8008bb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bba:	4648      	mov	r0, r9
 8008bbc:	f001 fd92 	bl	800a6e4 <__lshift>
 8008bc0:	901c      	str	r0, [sp, #112]	; 0x70
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f47f af7c 	bne.w	8008ac0 <_strtod_l+0x728>
 8008bc8:	e604      	b.n	80087d4 <_strtod_l+0x43c>
 8008bca:	bf00      	nop
 8008bcc:	0800db38 	.word	0x0800db38
 8008bd0:	fffffc02 	.word	0xfffffc02
 8008bd4:	465d      	mov	r5, fp
 8008bd6:	f040 8086 	bne.w	8008ce6 <_strtod_l+0x94e>
 8008bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008be0:	b32a      	cbz	r2, 8008c2e <_strtod_l+0x896>
 8008be2:	4aaf      	ldr	r2, [pc, #700]	; (8008ea0 <_strtod_l+0xb08>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d153      	bne.n	8008c90 <_strtod_l+0x8f8>
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	4650      	mov	r0, sl
 8008bec:	b1d3      	cbz	r3, 8008c24 <_strtod_l+0x88c>
 8008bee:	4aad      	ldr	r2, [pc, #692]	; (8008ea4 <_strtod_l+0xb0c>)
 8008bf0:	402a      	ands	r2, r5
 8008bf2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bfa:	d816      	bhi.n	8008c2a <_strtod_l+0x892>
 8008bfc:	0d12      	lsrs	r2, r2, #20
 8008bfe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c02:	fa01 f303 	lsl.w	r3, r1, r3
 8008c06:	4298      	cmp	r0, r3
 8008c08:	d142      	bne.n	8008c90 <_strtod_l+0x8f8>
 8008c0a:	4ba7      	ldr	r3, [pc, #668]	; (8008ea8 <_strtod_l+0xb10>)
 8008c0c:	429d      	cmp	r5, r3
 8008c0e:	d102      	bne.n	8008c16 <_strtod_l+0x87e>
 8008c10:	3001      	adds	r0, #1
 8008c12:	f43f addf 	beq.w	80087d4 <_strtod_l+0x43c>
 8008c16:	4ba3      	ldr	r3, [pc, #652]	; (8008ea4 <_strtod_l+0xb0c>)
 8008c18:	402b      	ands	r3, r5
 8008c1a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008c1e:	f04f 0a00 	mov.w	sl, #0
 8008c22:	e7a0      	b.n	8008b66 <_strtod_l+0x7ce>
 8008c24:	f04f 33ff 	mov.w	r3, #4294967295
 8008c28:	e7ed      	b.n	8008c06 <_strtod_l+0x86e>
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	e7eb      	b.n	8008c06 <_strtod_l+0x86e>
 8008c2e:	bb7b      	cbnz	r3, 8008c90 <_strtod_l+0x8f8>
 8008c30:	f1ba 0f00 	cmp.w	sl, #0
 8008c34:	d12c      	bne.n	8008c90 <_strtod_l+0x8f8>
 8008c36:	9904      	ldr	r1, [sp, #16]
 8008c38:	4a9a      	ldr	r2, [pc, #616]	; (8008ea4 <_strtod_l+0xb0c>)
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	b1f1      	cbz	r1, 8008c7c <_strtod_l+0x8e4>
 8008c3e:	ea02 010b 	and.w	r1, r2, fp
 8008c42:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c46:	dc19      	bgt.n	8008c7c <_strtod_l+0x8e4>
 8008c48:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c4c:	f77f ae5b 	ble.w	8008906 <_strtod_l+0x56e>
 8008c50:	4a96      	ldr	r2, [pc, #600]	; (8008eac <_strtod_l+0xb14>)
 8008c52:	2300      	movs	r3, #0
 8008c54:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008c58:	4650      	mov	r0, sl
 8008c5a:	4659      	mov	r1, fp
 8008c5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c60:	f7f7 fcf2 	bl	8000648 <__aeabi_dmul>
 8008c64:	4682      	mov	sl, r0
 8008c66:	468b      	mov	fp, r1
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	f47f adbe 	bne.w	80087ea <_strtod_l+0x452>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f47f adbb 	bne.w	80087ea <_strtod_l+0x452>
 8008c74:	2322      	movs	r3, #34	; 0x22
 8008c76:	f8c9 3000 	str.w	r3, [r9]
 8008c7a:	e5b6      	b.n	80087ea <_strtod_l+0x452>
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c82:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c8a:	f04f 3aff 	mov.w	sl, #4294967295
 8008c8e:	e76a      	b.n	8008b66 <_strtod_l+0x7ce>
 8008c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c92:	b193      	cbz	r3, 8008cba <_strtod_l+0x922>
 8008c94:	422b      	tst	r3, r5
 8008c96:	f43f af66 	beq.w	8008b66 <_strtod_l+0x7ce>
 8008c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c9c:	9a04      	ldr	r2, [sp, #16]
 8008c9e:	4650      	mov	r0, sl
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	b173      	cbz	r3, 8008cc2 <_strtod_l+0x92a>
 8008ca4:	f7ff fb5a 	bl	800835c <sulp>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cb0:	f7f7 fb14 	bl	80002dc <__adddf3>
 8008cb4:	4682      	mov	sl, r0
 8008cb6:	468b      	mov	fp, r1
 8008cb8:	e755      	b.n	8008b66 <_strtod_l+0x7ce>
 8008cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cbc:	ea13 0f0a 	tst.w	r3, sl
 8008cc0:	e7e9      	b.n	8008c96 <_strtod_l+0x8fe>
 8008cc2:	f7ff fb4b 	bl	800835c <sulp>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cce:	f7f7 fb03 	bl	80002d8 <__aeabi_dsub>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4682      	mov	sl, r0
 8008cd8:	468b      	mov	fp, r1
 8008cda:	f7f7 ff1d 	bl	8000b18 <__aeabi_dcmpeq>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f47f ae11 	bne.w	8008906 <_strtod_l+0x56e>
 8008ce4:	e73f      	b.n	8008b66 <_strtod_l+0x7ce>
 8008ce6:	4641      	mov	r1, r8
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 fe8c 	bl	800aa06 <__ratio>
 8008cee:	ec57 6b10 	vmov	r6, r7, d0
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cf8:	ee10 0a10 	vmov	r0, s0
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	f7f7 ff1f 	bl	8000b40 <__aeabi_dcmple>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d077      	beq.n	8008df6 <_strtod_l+0xa5e>
 8008d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d04a      	beq.n	8008da2 <_strtod_l+0xa0a>
 8008d0c:	4b68      	ldr	r3, [pc, #416]	; (8008eb0 <_strtod_l+0xb18>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008d14:	4f66      	ldr	r7, [pc, #408]	; (8008eb0 <_strtod_l+0xb18>)
 8008d16:	2600      	movs	r6, #0
 8008d18:	4b62      	ldr	r3, [pc, #392]	; (8008ea4 <_strtod_l+0xb0c>)
 8008d1a:	402b      	ands	r3, r5
 8008d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d20:	4b64      	ldr	r3, [pc, #400]	; (8008eb4 <_strtod_l+0xb1c>)
 8008d22:	429a      	cmp	r2, r3
 8008d24:	f040 80ce 	bne.w	8008ec4 <_strtod_l+0xb2c>
 8008d28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d30:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008d34:	ec4b ab10 	vmov	d0, sl, fp
 8008d38:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008d3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d40:	f001 fd9c 	bl	800a87c <__ulp>
 8008d44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d48:	ec53 2b10 	vmov	r2, r3, d0
 8008d4c:	f7f7 fc7c 	bl	8000648 <__aeabi_dmul>
 8008d50:	4652      	mov	r2, sl
 8008d52:	465b      	mov	r3, fp
 8008d54:	f7f7 fac2 	bl	80002dc <__adddf3>
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4952      	ldr	r1, [pc, #328]	; (8008ea4 <_strtod_l+0xb0c>)
 8008d5c:	4a56      	ldr	r2, [pc, #344]	; (8008eb8 <_strtod_l+0xb20>)
 8008d5e:	4019      	ands	r1, r3
 8008d60:	4291      	cmp	r1, r2
 8008d62:	4682      	mov	sl, r0
 8008d64:	d95b      	bls.n	8008e1e <_strtod_l+0xa86>
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d103      	bne.n	8008d78 <_strtod_l+0x9e0>
 8008d70:	9b08      	ldr	r3, [sp, #32]
 8008d72:	3301      	adds	r3, #1
 8008d74:	f43f ad2e 	beq.w	80087d4 <_strtod_l+0x43c>
 8008d78:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008ea8 <_strtod_l+0xb10>
 8008d7c:	f04f 3aff 	mov.w	sl, #4294967295
 8008d80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d82:	4648      	mov	r0, r9
 8008d84:	f001 fae3 	bl	800a34e <_Bfree>
 8008d88:	9905      	ldr	r1, [sp, #20]
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	f001 fadf 	bl	800a34e <_Bfree>
 8008d90:	4641      	mov	r1, r8
 8008d92:	4648      	mov	r0, r9
 8008d94:	f001 fadb 	bl	800a34e <_Bfree>
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4648      	mov	r0, r9
 8008d9c:	f001 fad7 	bl	800a34e <_Bfree>
 8008da0:	e619      	b.n	80089d6 <_strtod_l+0x63e>
 8008da2:	f1ba 0f00 	cmp.w	sl, #0
 8008da6:	d11a      	bne.n	8008dde <_strtod_l+0xa46>
 8008da8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dac:	b9eb      	cbnz	r3, 8008dea <_strtod_l+0xa52>
 8008dae:	2200      	movs	r2, #0
 8008db0:	4b3f      	ldr	r3, [pc, #252]	; (8008eb0 <_strtod_l+0xb18>)
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7f7 feb9 	bl	8000b2c <__aeabi_dcmplt>
 8008dba:	b9c8      	cbnz	r0, 8008df0 <_strtod_l+0xa58>
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b3e      	ldr	r3, [pc, #248]	; (8008ebc <_strtod_l+0xb24>)
 8008dc4:	f7f7 fc40 	bl	8000648 <__aeabi_dmul>
 8008dc8:	4606      	mov	r6, r0
 8008dca:	460f      	mov	r7, r1
 8008dcc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008dd0:	9618      	str	r6, [sp, #96]	; 0x60
 8008dd2:	9319      	str	r3, [sp, #100]	; 0x64
 8008dd4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008dd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ddc:	e79c      	b.n	8008d18 <_strtod_l+0x980>
 8008dde:	f1ba 0f01 	cmp.w	sl, #1
 8008de2:	d102      	bne.n	8008dea <_strtod_l+0xa52>
 8008de4:	2d00      	cmp	r5, #0
 8008de6:	f43f ad8e 	beq.w	8008906 <_strtod_l+0x56e>
 8008dea:	2200      	movs	r2, #0
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <_strtod_l+0xb28>)
 8008dee:	e78f      	b.n	8008d10 <_strtod_l+0x978>
 8008df0:	2600      	movs	r6, #0
 8008df2:	4f32      	ldr	r7, [pc, #200]	; (8008ebc <_strtod_l+0xb24>)
 8008df4:	e7ea      	b.n	8008dcc <_strtod_l+0xa34>
 8008df6:	4b31      	ldr	r3, [pc, #196]	; (8008ebc <_strtod_l+0xb24>)
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f7f7 fc23 	bl	8000648 <__aeabi_dmul>
 8008e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e04:	4606      	mov	r6, r0
 8008e06:	460f      	mov	r7, r1
 8008e08:	b933      	cbnz	r3, 8008e18 <_strtod_l+0xa80>
 8008e0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e0e:	9010      	str	r0, [sp, #64]	; 0x40
 8008e10:	9311      	str	r3, [sp, #68]	; 0x44
 8008e12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e16:	e7df      	b.n	8008dd8 <_strtod_l+0xa40>
 8008e18:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008e1c:	e7f9      	b.n	8008e12 <_strtod_l+0xa7a>
 8008e1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1ab      	bne.n	8008d80 <_strtod_l+0x9e8>
 8008e28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e2c:	0d1b      	lsrs	r3, r3, #20
 8008e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e30:	051b      	lsls	r3, r3, #20
 8008e32:	429a      	cmp	r2, r3
 8008e34:	465d      	mov	r5, fp
 8008e36:	d1a3      	bne.n	8008d80 <_strtod_l+0x9e8>
 8008e38:	4639      	mov	r1, r7
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7f7 feb4 	bl	8000ba8 <__aeabi_d2iz>
 8008e40:	f7f7 fb98 	bl	8000574 <__aeabi_i2d>
 8008e44:	460b      	mov	r3, r1
 8008e46:	4602      	mov	r2, r0
 8008e48:	4639      	mov	r1, r7
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f7f7 fa44 	bl	80002d8 <__aeabi_dsub>
 8008e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	b933      	cbnz	r3, 8008e66 <_strtod_l+0xace>
 8008e58:	f1ba 0f00 	cmp.w	sl, #0
 8008e5c:	d103      	bne.n	8008e66 <_strtod_l+0xace>
 8008e5e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008e62:	2d00      	cmp	r5, #0
 8008e64:	d06d      	beq.n	8008f42 <_strtod_l+0xbaa>
 8008e66:	a30a      	add	r3, pc, #40	; (adr r3, 8008e90 <_strtod_l+0xaf8>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	4639      	mov	r1, r7
 8008e70:	f7f7 fe5c 	bl	8000b2c <__aeabi_dcmplt>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	f47f acb8 	bne.w	80087ea <_strtod_l+0x452>
 8008e7a:	a307      	add	r3, pc, #28	; (adr r3, 8008e98 <_strtod_l+0xb00>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 fe70 	bl	8000b68 <__aeabi_dcmpgt>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f43f af79 	beq.w	8008d80 <_strtod_l+0x9e8>
 8008e8e:	e4ac      	b.n	80087ea <_strtod_l+0x452>
 8008e90:	94a03595 	.word	0x94a03595
 8008e94:	3fdfffff 	.word	0x3fdfffff
 8008e98:	35afe535 	.word	0x35afe535
 8008e9c:	3fe00000 	.word	0x3fe00000
 8008ea0:	000fffff 	.word	0x000fffff
 8008ea4:	7ff00000 	.word	0x7ff00000
 8008ea8:	7fefffff 	.word	0x7fefffff
 8008eac:	39500000 	.word	0x39500000
 8008eb0:	3ff00000 	.word	0x3ff00000
 8008eb4:	7fe00000 	.word	0x7fe00000
 8008eb8:	7c9fffff 	.word	0x7c9fffff
 8008ebc:	3fe00000 	.word	0x3fe00000
 8008ec0:	bff00000 	.word	0xbff00000
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	b333      	cbz	r3, 8008f16 <_strtod_l+0xb7e>
 8008ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ece:	d822      	bhi.n	8008f16 <_strtod_l+0xb7e>
 8008ed0:	a327      	add	r3, pc, #156	; (adr r3, 8008f70 <_strtod_l+0xbd8>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	f7f7 fe31 	bl	8000b40 <__aeabi_dcmple>
 8008ede:	b1a0      	cbz	r0, 8008f0a <_strtod_l+0xb72>
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7f7 fe88 	bl	8000bf8 <__aeabi_d2uiz>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	bf08      	it	eq
 8008eec:	2001      	moveq	r0, #1
 8008eee:	f7f7 fb31 	bl	8000554 <__aeabi_ui2d>
 8008ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	bb03      	cbnz	r3, 8008f3c <_strtod_l+0xba4>
 8008efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008efe:	9012      	str	r0, [sp, #72]	; 0x48
 8008f00:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f0e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f12:	1a9b      	subs	r3, r3, r2
 8008f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f16:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008f1a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008f1e:	f001 fcad 	bl	800a87c <__ulp>
 8008f22:	4650      	mov	r0, sl
 8008f24:	ec53 2b10 	vmov	r2, r3, d0
 8008f28:	4659      	mov	r1, fp
 8008f2a:	f7f7 fb8d 	bl	8000648 <__aeabi_dmul>
 8008f2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f32:	f7f7 f9d3 	bl	80002dc <__adddf3>
 8008f36:	4682      	mov	sl, r0
 8008f38:	468b      	mov	fp, r1
 8008f3a:	e772      	b.n	8008e22 <_strtod_l+0xa8a>
 8008f3c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008f40:	e7df      	b.n	8008f02 <_strtod_l+0xb6a>
 8008f42:	a30d      	add	r3, pc, #52	; (adr r3, 8008f78 <_strtod_l+0xbe0>)
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f7f7 fdf0 	bl	8000b2c <__aeabi_dcmplt>
 8008f4c:	e79c      	b.n	8008e88 <_strtod_l+0xaf0>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	930d      	str	r3, [sp, #52]	; 0x34
 8008f52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	f7ff ba61 	b.w	800841e <_strtod_l+0x86>
 8008f5c:	2b65      	cmp	r3, #101	; 0x65
 8008f5e:	f04f 0200 	mov.w	r2, #0
 8008f62:	f43f ab4e 	beq.w	8008602 <_strtod_l+0x26a>
 8008f66:	2101      	movs	r1, #1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	9104      	str	r1, [sp, #16]
 8008f6c:	f7ff bacb 	b.w	8008506 <_strtod_l+0x16e>
 8008f70:	ffc00000 	.word	0xffc00000
 8008f74:	41dfffff 	.word	0x41dfffff
 8008f78:	94a03595 	.word	0x94a03595
 8008f7c:	3fcfffff 	.word	0x3fcfffff

08008f80 <strtod>:
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <strtod+0x20>)
 8008f82:	4a08      	ldr	r2, [pc, #32]	; (8008fa4 <strtod+0x24>)
 8008f84:	b410      	push	{r4}
 8008f86:	681c      	ldr	r4, [r3, #0]
 8008f88:	6a23      	ldr	r3, [r4, #32]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bf08      	it	eq
 8008f8e:	4613      	moveq	r3, r2
 8008f90:	460a      	mov	r2, r1
 8008f92:	4601      	mov	r1, r0
 8008f94:	4620      	mov	r0, r4
 8008f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f9a:	f7ff b9fd 	b.w	8008398 <_strtod_l>
 8008f9e:	bf00      	nop
 8008fa0:	20002eec 	.word	0x20002eec
 8008fa4:	20002f50 	.word	0x20002f50

08008fa8 <quorem>:
 8008fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	6903      	ldr	r3, [r0, #16]
 8008fae:	690c      	ldr	r4, [r1, #16]
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	f2c0 8082 	blt.w	80090bc <quorem+0x114>
 8008fb8:	3c01      	subs	r4, #1
 8008fba:	f101 0714 	add.w	r7, r1, #20
 8008fbe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008fc2:	f100 0614 	add.w	r6, r0, #20
 8008fc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008fca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008fce:	eb06 030c 	add.w	r3, r6, ip
 8008fd2:	3501      	adds	r5, #1
 8008fd4:	eb07 090c 	add.w	r9, r7, ip
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	fbb0 f5f5 	udiv	r5, r0, r5
 8008fde:	b395      	cbz	r5, 8009046 <quorem+0x9e>
 8008fe0:	f04f 0a00 	mov.w	sl, #0
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	46b6      	mov	lr, r6
 8008fe8:	46d3      	mov	fp, sl
 8008fea:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fee:	b293      	uxth	r3, r2
 8008ff0:	fb05 a303 	mla	r3, r5, r3, sl
 8008ff4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	ebab 0303 	sub.w	r3, fp, r3
 8008ffe:	0c12      	lsrs	r2, r2, #16
 8009000:	f8de b000 	ldr.w	fp, [lr]
 8009004:	fb05 a202 	mla	r2, r5, r2, sl
 8009008:	fa13 f38b 	uxtah	r3, r3, fp
 800900c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009010:	fa1f fb82 	uxth.w	fp, r2
 8009014:	f8de 2000 	ldr.w	r2, [lr]
 8009018:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800901c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009020:	b29b      	uxth	r3, r3
 8009022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009026:	4581      	cmp	r9, r0
 8009028:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800902c:	f84e 3b04 	str.w	r3, [lr], #4
 8009030:	d2db      	bcs.n	8008fea <quorem+0x42>
 8009032:	f856 300c 	ldr.w	r3, [r6, ip]
 8009036:	b933      	cbnz	r3, 8009046 <quorem+0x9e>
 8009038:	9b01      	ldr	r3, [sp, #4]
 800903a:	3b04      	subs	r3, #4
 800903c:	429e      	cmp	r6, r3
 800903e:	461a      	mov	r2, r3
 8009040:	d330      	bcc.n	80090a4 <quorem+0xfc>
 8009042:	f8c8 4010 	str.w	r4, [r8, #16]
 8009046:	4640      	mov	r0, r8
 8009048:	f001 fba0 	bl	800a78c <__mcmp>
 800904c:	2800      	cmp	r0, #0
 800904e:	db25      	blt.n	800909c <quorem+0xf4>
 8009050:	3501      	adds	r5, #1
 8009052:	4630      	mov	r0, r6
 8009054:	f04f 0c00 	mov.w	ip, #0
 8009058:	f857 2b04 	ldr.w	r2, [r7], #4
 800905c:	f8d0 e000 	ldr.w	lr, [r0]
 8009060:	b293      	uxth	r3, r2
 8009062:	ebac 0303 	sub.w	r3, ip, r3
 8009066:	0c12      	lsrs	r2, r2, #16
 8009068:	fa13 f38e 	uxtah	r3, r3, lr
 800906c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009074:	b29b      	uxth	r3, r3
 8009076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800907a:	45b9      	cmp	r9, r7
 800907c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009080:	f840 3b04 	str.w	r3, [r0], #4
 8009084:	d2e8      	bcs.n	8009058 <quorem+0xb0>
 8009086:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800908a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800908e:	b92a      	cbnz	r2, 800909c <quorem+0xf4>
 8009090:	3b04      	subs	r3, #4
 8009092:	429e      	cmp	r6, r3
 8009094:	461a      	mov	r2, r3
 8009096:	d30b      	bcc.n	80090b0 <quorem+0x108>
 8009098:	f8c8 4010 	str.w	r4, [r8, #16]
 800909c:	4628      	mov	r0, r5
 800909e:	b003      	add	sp, #12
 80090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a4:	6812      	ldr	r2, [r2, #0]
 80090a6:	3b04      	subs	r3, #4
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d1ca      	bne.n	8009042 <quorem+0x9a>
 80090ac:	3c01      	subs	r4, #1
 80090ae:	e7c5      	b.n	800903c <quorem+0x94>
 80090b0:	6812      	ldr	r2, [r2, #0]
 80090b2:	3b04      	subs	r3, #4
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	d1ef      	bne.n	8009098 <quorem+0xf0>
 80090b8:	3c01      	subs	r4, #1
 80090ba:	e7ea      	b.n	8009092 <quorem+0xea>
 80090bc:	2000      	movs	r0, #0
 80090be:	e7ee      	b.n	800909e <quorem+0xf6>

080090c0 <_dtoa_r>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	ec57 6b10 	vmov	r6, r7, d0
 80090c8:	b097      	sub	sp, #92	; 0x5c
 80090ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090cc:	9106      	str	r1, [sp, #24]
 80090ce:	4604      	mov	r4, r0
 80090d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80090d2:	9312      	str	r3, [sp, #72]	; 0x48
 80090d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090d8:	e9cd 6700 	strd	r6, r7, [sp]
 80090dc:	b93d      	cbnz	r5, 80090ee <_dtoa_r+0x2e>
 80090de:	2010      	movs	r0, #16
 80090e0:	f001 f8dc 	bl	800a29c <malloc>
 80090e4:	6260      	str	r0, [r4, #36]	; 0x24
 80090e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090ea:	6005      	str	r5, [r0, #0]
 80090ec:	60c5      	str	r5, [r0, #12]
 80090ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f0:	6819      	ldr	r1, [r3, #0]
 80090f2:	b151      	cbz	r1, 800910a <_dtoa_r+0x4a>
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	604a      	str	r2, [r1, #4]
 80090f8:	2301      	movs	r3, #1
 80090fa:	4093      	lsls	r3, r2
 80090fc:	608b      	str	r3, [r1, #8]
 80090fe:	4620      	mov	r0, r4
 8009100:	f001 f925 	bl	800a34e <_Bfree>
 8009104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	1e3b      	subs	r3, r7, #0
 800910c:	bfbb      	ittet	lt
 800910e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009112:	9301      	strlt	r3, [sp, #4]
 8009114:	2300      	movge	r3, #0
 8009116:	2201      	movlt	r2, #1
 8009118:	bfac      	ite	ge
 800911a:	f8c8 3000 	strge.w	r3, [r8]
 800911e:	f8c8 2000 	strlt.w	r2, [r8]
 8009122:	4baf      	ldr	r3, [pc, #700]	; (80093e0 <_dtoa_r+0x320>)
 8009124:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009128:	ea33 0308 	bics.w	r3, r3, r8
 800912c:	d114      	bne.n	8009158 <_dtoa_r+0x98>
 800912e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009130:	f242 730f 	movw	r3, #9999	; 0x270f
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	b923      	cbnz	r3, 8009144 <_dtoa_r+0x84>
 800913a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800913e:	2800      	cmp	r0, #0
 8009140:	f000 8542 	beq.w	8009bc8 <_dtoa_r+0xb08>
 8009144:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009146:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80093f4 <_dtoa_r+0x334>
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8544 	beq.w	8009bd8 <_dtoa_r+0xb18>
 8009150:	f10b 0303 	add.w	r3, fp, #3
 8009154:	f000 bd3e 	b.w	8009bd4 <_dtoa_r+0xb14>
 8009158:	e9dd 6700 	ldrd	r6, r7, [sp]
 800915c:	2200      	movs	r2, #0
 800915e:	2300      	movs	r3, #0
 8009160:	4630      	mov	r0, r6
 8009162:	4639      	mov	r1, r7
 8009164:	f7f7 fcd8 	bl	8000b18 <__aeabi_dcmpeq>
 8009168:	4681      	mov	r9, r0
 800916a:	b168      	cbz	r0, 8009188 <_dtoa_r+0xc8>
 800916c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800916e:	2301      	movs	r3, #1
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8524 	beq.w	8009bc2 <_dtoa_r+0xb02>
 800917a:	4b9a      	ldr	r3, [pc, #616]	; (80093e4 <_dtoa_r+0x324>)
 800917c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800917e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	f000 bd28 	b.w	8009bd8 <_dtoa_r+0xb18>
 8009188:	aa14      	add	r2, sp, #80	; 0x50
 800918a:	a915      	add	r1, sp, #84	; 0x54
 800918c:	ec47 6b10 	vmov	d0, r6, r7
 8009190:	4620      	mov	r0, r4
 8009192:	f001 fbe9 	bl	800a968 <__d2b>
 8009196:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800919a:	9004      	str	r0, [sp, #16]
 800919c:	2d00      	cmp	r5, #0
 800919e:	d07c      	beq.n	800929a <_dtoa_r+0x1da>
 80091a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80091a8:	46b2      	mov	sl, r6
 80091aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80091ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80091b6:	2200      	movs	r2, #0
 80091b8:	4b8b      	ldr	r3, [pc, #556]	; (80093e8 <_dtoa_r+0x328>)
 80091ba:	4650      	mov	r0, sl
 80091bc:	4659      	mov	r1, fp
 80091be:	f7f7 f88b 	bl	80002d8 <__aeabi_dsub>
 80091c2:	a381      	add	r3, pc, #516	; (adr r3, 80093c8 <_dtoa_r+0x308>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f7f7 fa3e 	bl	8000648 <__aeabi_dmul>
 80091cc:	a380      	add	r3, pc, #512	; (adr r3, 80093d0 <_dtoa_r+0x310>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 f883 	bl	80002dc <__adddf3>
 80091d6:	4606      	mov	r6, r0
 80091d8:	4628      	mov	r0, r5
 80091da:	460f      	mov	r7, r1
 80091dc:	f7f7 f9ca 	bl	8000574 <__aeabi_i2d>
 80091e0:	a37d      	add	r3, pc, #500	; (adr r3, 80093d8 <_dtoa_r+0x318>)
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f7f7 fa2f 	bl	8000648 <__aeabi_dmul>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 f873 	bl	80002dc <__adddf3>
 80091f6:	4606      	mov	r6, r0
 80091f8:	460f      	mov	r7, r1
 80091fa:	f7f7 fcd5 	bl	8000ba8 <__aeabi_d2iz>
 80091fe:	2200      	movs	r2, #0
 8009200:	4682      	mov	sl, r0
 8009202:	2300      	movs	r3, #0
 8009204:	4630      	mov	r0, r6
 8009206:	4639      	mov	r1, r7
 8009208:	f7f7 fc90 	bl	8000b2c <__aeabi_dcmplt>
 800920c:	b148      	cbz	r0, 8009222 <_dtoa_r+0x162>
 800920e:	4650      	mov	r0, sl
 8009210:	f7f7 f9b0 	bl	8000574 <__aeabi_i2d>
 8009214:	4632      	mov	r2, r6
 8009216:	463b      	mov	r3, r7
 8009218:	f7f7 fc7e 	bl	8000b18 <__aeabi_dcmpeq>
 800921c:	b908      	cbnz	r0, 8009222 <_dtoa_r+0x162>
 800921e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009222:	f1ba 0f16 	cmp.w	sl, #22
 8009226:	d859      	bhi.n	80092dc <_dtoa_r+0x21c>
 8009228:	4970      	ldr	r1, [pc, #448]	; (80093ec <_dtoa_r+0x32c>)
 800922a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800922e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009236:	f7f7 fc97 	bl	8000b68 <__aeabi_dcmpgt>
 800923a:	2800      	cmp	r0, #0
 800923c:	d050      	beq.n	80092e0 <_dtoa_r+0x220>
 800923e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009242:	2300      	movs	r3, #0
 8009244:	930f      	str	r3, [sp, #60]	; 0x3c
 8009246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009248:	1b5d      	subs	r5, r3, r5
 800924a:	f1b5 0801 	subs.w	r8, r5, #1
 800924e:	bf49      	itett	mi
 8009250:	f1c5 0301 	rsbmi	r3, r5, #1
 8009254:	2300      	movpl	r3, #0
 8009256:	9305      	strmi	r3, [sp, #20]
 8009258:	f04f 0800 	movmi.w	r8, #0
 800925c:	bf58      	it	pl
 800925e:	9305      	strpl	r3, [sp, #20]
 8009260:	f1ba 0f00 	cmp.w	sl, #0
 8009264:	db3e      	blt.n	80092e4 <_dtoa_r+0x224>
 8009266:	2300      	movs	r3, #0
 8009268:	44d0      	add	r8, sl
 800926a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800926e:	9307      	str	r3, [sp, #28]
 8009270:	9b06      	ldr	r3, [sp, #24]
 8009272:	2b09      	cmp	r3, #9
 8009274:	f200 8090 	bhi.w	8009398 <_dtoa_r+0x2d8>
 8009278:	2b05      	cmp	r3, #5
 800927a:	bfc4      	itt	gt
 800927c:	3b04      	subgt	r3, #4
 800927e:	9306      	strgt	r3, [sp, #24]
 8009280:	9b06      	ldr	r3, [sp, #24]
 8009282:	f1a3 0302 	sub.w	r3, r3, #2
 8009286:	bfcc      	ite	gt
 8009288:	2500      	movgt	r5, #0
 800928a:	2501      	movle	r5, #1
 800928c:	2b03      	cmp	r3, #3
 800928e:	f200 808f 	bhi.w	80093b0 <_dtoa_r+0x2f0>
 8009292:	e8df f003 	tbb	[pc, r3]
 8009296:	7f7d      	.short	0x7f7d
 8009298:	7131      	.short	0x7131
 800929a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800929e:	441d      	add	r5, r3
 80092a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80092a4:	2820      	cmp	r0, #32
 80092a6:	dd13      	ble.n	80092d0 <_dtoa_r+0x210>
 80092a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80092ac:	9b00      	ldr	r3, [sp, #0]
 80092ae:	fa08 f800 	lsl.w	r8, r8, r0
 80092b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80092b6:	fa23 f000 	lsr.w	r0, r3, r0
 80092ba:	ea48 0000 	orr.w	r0, r8, r0
 80092be:	f7f7 f949 	bl	8000554 <__aeabi_ui2d>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4682      	mov	sl, r0
 80092c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80092ca:	3d01      	subs	r5, #1
 80092cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80092ce:	e772      	b.n	80091b6 <_dtoa_r+0xf6>
 80092d0:	9b00      	ldr	r3, [sp, #0]
 80092d2:	f1c0 0020 	rsb	r0, r0, #32
 80092d6:	fa03 f000 	lsl.w	r0, r3, r0
 80092da:	e7f0      	b.n	80092be <_dtoa_r+0x1fe>
 80092dc:	2301      	movs	r3, #1
 80092de:	e7b1      	b.n	8009244 <_dtoa_r+0x184>
 80092e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80092e2:	e7b0      	b.n	8009246 <_dtoa_r+0x186>
 80092e4:	9b05      	ldr	r3, [sp, #20]
 80092e6:	eba3 030a 	sub.w	r3, r3, sl
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	f1ca 0300 	rsb	r3, sl, #0
 80092f0:	9307      	str	r3, [sp, #28]
 80092f2:	2300      	movs	r3, #0
 80092f4:	930e      	str	r3, [sp, #56]	; 0x38
 80092f6:	e7bb      	b.n	8009270 <_dtoa_r+0x1b0>
 80092f8:	2301      	movs	r3, #1
 80092fa:	930a      	str	r3, [sp, #40]	; 0x28
 80092fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd59      	ble.n	80093b6 <_dtoa_r+0x2f6>
 8009302:	9302      	str	r3, [sp, #8]
 8009304:	4699      	mov	r9, r3
 8009306:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009308:	2200      	movs	r2, #0
 800930a:	6072      	str	r2, [r6, #4]
 800930c:	2204      	movs	r2, #4
 800930e:	f102 0014 	add.w	r0, r2, #20
 8009312:	4298      	cmp	r0, r3
 8009314:	6871      	ldr	r1, [r6, #4]
 8009316:	d953      	bls.n	80093c0 <_dtoa_r+0x300>
 8009318:	4620      	mov	r0, r4
 800931a:	f000 ffe4 	bl	800a2e6 <_Balloc>
 800931e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009320:	6030      	str	r0, [r6, #0]
 8009322:	f1b9 0f0e 	cmp.w	r9, #14
 8009326:	f8d3 b000 	ldr.w	fp, [r3]
 800932a:	f200 80e6 	bhi.w	80094fa <_dtoa_r+0x43a>
 800932e:	2d00      	cmp	r5, #0
 8009330:	f000 80e3 	beq.w	80094fa <_dtoa_r+0x43a>
 8009334:	ed9d 7b00 	vldr	d7, [sp]
 8009338:	f1ba 0f00 	cmp.w	sl, #0
 800933c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009340:	dd74      	ble.n	800942c <_dtoa_r+0x36c>
 8009342:	4a2a      	ldr	r2, [pc, #168]	; (80093ec <_dtoa_r+0x32c>)
 8009344:	f00a 030f 	and.w	r3, sl, #15
 8009348:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800934c:	ed93 7b00 	vldr	d7, [r3]
 8009350:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009354:	06f0      	lsls	r0, r6, #27
 8009356:	ed8d 7b08 	vstr	d7, [sp, #32]
 800935a:	d565      	bpl.n	8009428 <_dtoa_r+0x368>
 800935c:	4b24      	ldr	r3, [pc, #144]	; (80093f0 <_dtoa_r+0x330>)
 800935e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009362:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009366:	f7f7 fa99 	bl	800089c <__aeabi_ddiv>
 800936a:	e9cd 0100 	strd	r0, r1, [sp]
 800936e:	f006 060f 	and.w	r6, r6, #15
 8009372:	2503      	movs	r5, #3
 8009374:	4f1e      	ldr	r7, [pc, #120]	; (80093f0 <_dtoa_r+0x330>)
 8009376:	e04c      	b.n	8009412 <_dtoa_r+0x352>
 8009378:	2301      	movs	r3, #1
 800937a:	930a      	str	r3, [sp, #40]	; 0x28
 800937c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800937e:	4453      	add	r3, sl
 8009380:	f103 0901 	add.w	r9, r3, #1
 8009384:	9302      	str	r3, [sp, #8]
 8009386:	464b      	mov	r3, r9
 8009388:	2b01      	cmp	r3, #1
 800938a:	bfb8      	it	lt
 800938c:	2301      	movlt	r3, #1
 800938e:	e7ba      	b.n	8009306 <_dtoa_r+0x246>
 8009390:	2300      	movs	r3, #0
 8009392:	e7b2      	b.n	80092fa <_dtoa_r+0x23a>
 8009394:	2300      	movs	r3, #0
 8009396:	e7f0      	b.n	800937a <_dtoa_r+0x2ba>
 8009398:	2501      	movs	r5, #1
 800939a:	2300      	movs	r3, #0
 800939c:	9306      	str	r3, [sp, #24]
 800939e:	950a      	str	r5, [sp, #40]	; 0x28
 80093a0:	f04f 33ff 	mov.w	r3, #4294967295
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	4699      	mov	r9, r3
 80093a8:	2200      	movs	r2, #0
 80093aa:	2312      	movs	r3, #18
 80093ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80093ae:	e7aa      	b.n	8009306 <_dtoa_r+0x246>
 80093b0:	2301      	movs	r3, #1
 80093b2:	930a      	str	r3, [sp, #40]	; 0x28
 80093b4:	e7f4      	b.n	80093a0 <_dtoa_r+0x2e0>
 80093b6:	2301      	movs	r3, #1
 80093b8:	9302      	str	r3, [sp, #8]
 80093ba:	4699      	mov	r9, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	e7f5      	b.n	80093ac <_dtoa_r+0x2ec>
 80093c0:	3101      	adds	r1, #1
 80093c2:	6071      	str	r1, [r6, #4]
 80093c4:	0052      	lsls	r2, r2, #1
 80093c6:	e7a2      	b.n	800930e <_dtoa_r+0x24e>
 80093c8:	636f4361 	.word	0x636f4361
 80093cc:	3fd287a7 	.word	0x3fd287a7
 80093d0:	8b60c8b3 	.word	0x8b60c8b3
 80093d4:	3fc68a28 	.word	0x3fc68a28
 80093d8:	509f79fb 	.word	0x509f79fb
 80093dc:	3fd34413 	.word	0x3fd34413
 80093e0:	7ff00000 	.word	0x7ff00000
 80093e4:	0800dae9 	.word	0x0800dae9
 80093e8:	3ff80000 	.word	0x3ff80000
 80093ec:	0800dba0 	.word	0x0800dba0
 80093f0:	0800db78 	.word	0x0800db78
 80093f4:	0800db69 	.word	0x0800db69
 80093f8:	07f1      	lsls	r1, r6, #31
 80093fa:	d508      	bpl.n	800940e <_dtoa_r+0x34e>
 80093fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009404:	f7f7 f920 	bl	8000648 <__aeabi_dmul>
 8009408:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800940c:	3501      	adds	r5, #1
 800940e:	1076      	asrs	r6, r6, #1
 8009410:	3708      	adds	r7, #8
 8009412:	2e00      	cmp	r6, #0
 8009414:	d1f0      	bne.n	80093f8 <_dtoa_r+0x338>
 8009416:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800941a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800941e:	f7f7 fa3d 	bl	800089c <__aeabi_ddiv>
 8009422:	e9cd 0100 	strd	r0, r1, [sp]
 8009426:	e01a      	b.n	800945e <_dtoa_r+0x39e>
 8009428:	2502      	movs	r5, #2
 800942a:	e7a3      	b.n	8009374 <_dtoa_r+0x2b4>
 800942c:	f000 80a0 	beq.w	8009570 <_dtoa_r+0x4b0>
 8009430:	f1ca 0600 	rsb	r6, sl, #0
 8009434:	4b9f      	ldr	r3, [pc, #636]	; (80096b4 <_dtoa_r+0x5f4>)
 8009436:	4fa0      	ldr	r7, [pc, #640]	; (80096b8 <_dtoa_r+0x5f8>)
 8009438:	f006 020f 	and.w	r2, r6, #15
 800943c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009448:	f7f7 f8fe 	bl	8000648 <__aeabi_dmul>
 800944c:	e9cd 0100 	strd	r0, r1, [sp]
 8009450:	1136      	asrs	r6, r6, #4
 8009452:	2300      	movs	r3, #0
 8009454:	2502      	movs	r5, #2
 8009456:	2e00      	cmp	r6, #0
 8009458:	d17f      	bne.n	800955a <_dtoa_r+0x49a>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e1      	bne.n	8009422 <_dtoa_r+0x362>
 800945e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 8087 	beq.w	8009574 <_dtoa_r+0x4b4>
 8009466:	e9dd 6700 	ldrd	r6, r7, [sp]
 800946a:	2200      	movs	r2, #0
 800946c:	4b93      	ldr	r3, [pc, #588]	; (80096bc <_dtoa_r+0x5fc>)
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7f7 fb5b 	bl	8000b2c <__aeabi_dcmplt>
 8009476:	2800      	cmp	r0, #0
 8009478:	d07c      	beq.n	8009574 <_dtoa_r+0x4b4>
 800947a:	f1b9 0f00 	cmp.w	r9, #0
 800947e:	d079      	beq.n	8009574 <_dtoa_r+0x4b4>
 8009480:	9b02      	ldr	r3, [sp, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd35      	ble.n	80094f2 <_dtoa_r+0x432>
 8009486:	f10a 33ff 	add.w	r3, sl, #4294967295
 800948a:	9308      	str	r3, [sp, #32]
 800948c:	4639      	mov	r1, r7
 800948e:	2200      	movs	r2, #0
 8009490:	4b8b      	ldr	r3, [pc, #556]	; (80096c0 <_dtoa_r+0x600>)
 8009492:	4630      	mov	r0, r6
 8009494:	f7f7 f8d8 	bl	8000648 <__aeabi_dmul>
 8009498:	e9cd 0100 	strd	r0, r1, [sp]
 800949c:	9f02      	ldr	r7, [sp, #8]
 800949e:	3501      	adds	r5, #1
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7f7 f867 	bl	8000574 <__aeabi_i2d>
 80094a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094aa:	f7f7 f8cd 	bl	8000648 <__aeabi_dmul>
 80094ae:	2200      	movs	r2, #0
 80094b0:	4b84      	ldr	r3, [pc, #528]	; (80096c4 <_dtoa_r+0x604>)
 80094b2:	f7f6 ff13 	bl	80002dc <__adddf3>
 80094b6:	4605      	mov	r5, r0
 80094b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80094bc:	2f00      	cmp	r7, #0
 80094be:	d15d      	bne.n	800957c <_dtoa_r+0x4bc>
 80094c0:	2200      	movs	r2, #0
 80094c2:	4b81      	ldr	r3, [pc, #516]	; (80096c8 <_dtoa_r+0x608>)
 80094c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094c8:	f7f6 ff06 	bl	80002d8 <__aeabi_dsub>
 80094cc:	462a      	mov	r2, r5
 80094ce:	4633      	mov	r3, r6
 80094d0:	e9cd 0100 	strd	r0, r1, [sp]
 80094d4:	f7f7 fb48 	bl	8000b68 <__aeabi_dcmpgt>
 80094d8:	2800      	cmp	r0, #0
 80094da:	f040 8288 	bne.w	80099ee <_dtoa_r+0x92e>
 80094de:	462a      	mov	r2, r5
 80094e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80094e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094e8:	f7f7 fb20 	bl	8000b2c <__aeabi_dcmplt>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f040 827c 	bne.w	80099ea <_dtoa_r+0x92a>
 80094f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094f6:	e9cd 2300 	strd	r2, r3, [sp]
 80094fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f2c0 8150 	blt.w	80097a2 <_dtoa_r+0x6e2>
 8009502:	f1ba 0f0e 	cmp.w	sl, #14
 8009506:	f300 814c 	bgt.w	80097a2 <_dtoa_r+0x6e2>
 800950a:	4b6a      	ldr	r3, [pc, #424]	; (80096b4 <_dtoa_r+0x5f4>)
 800950c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009510:	ed93 7b00 	vldr	d7, [r3]
 8009514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009516:	2b00      	cmp	r3, #0
 8009518:	ed8d 7b02 	vstr	d7, [sp, #8]
 800951c:	f280 80d8 	bge.w	80096d0 <_dtoa_r+0x610>
 8009520:	f1b9 0f00 	cmp.w	r9, #0
 8009524:	f300 80d4 	bgt.w	80096d0 <_dtoa_r+0x610>
 8009528:	f040 825e 	bne.w	80099e8 <_dtoa_r+0x928>
 800952c:	2200      	movs	r2, #0
 800952e:	4b66      	ldr	r3, [pc, #408]	; (80096c8 <_dtoa_r+0x608>)
 8009530:	ec51 0b17 	vmov	r0, r1, d7
 8009534:	f7f7 f888 	bl	8000648 <__aeabi_dmul>
 8009538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800953c:	f7f7 fb0a 	bl	8000b54 <__aeabi_dcmpge>
 8009540:	464f      	mov	r7, r9
 8009542:	464e      	mov	r6, r9
 8009544:	2800      	cmp	r0, #0
 8009546:	f040 8234 	bne.w	80099b2 <_dtoa_r+0x8f2>
 800954a:	2331      	movs	r3, #49	; 0x31
 800954c:	f10b 0501 	add.w	r5, fp, #1
 8009550:	f88b 3000 	strb.w	r3, [fp]
 8009554:	f10a 0a01 	add.w	sl, sl, #1
 8009558:	e22f      	b.n	80099ba <_dtoa_r+0x8fa>
 800955a:	07f2      	lsls	r2, r6, #31
 800955c:	d505      	bpl.n	800956a <_dtoa_r+0x4aa>
 800955e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009562:	f7f7 f871 	bl	8000648 <__aeabi_dmul>
 8009566:	3501      	adds	r5, #1
 8009568:	2301      	movs	r3, #1
 800956a:	1076      	asrs	r6, r6, #1
 800956c:	3708      	adds	r7, #8
 800956e:	e772      	b.n	8009456 <_dtoa_r+0x396>
 8009570:	2502      	movs	r5, #2
 8009572:	e774      	b.n	800945e <_dtoa_r+0x39e>
 8009574:	f8cd a020 	str.w	sl, [sp, #32]
 8009578:	464f      	mov	r7, r9
 800957a:	e791      	b.n	80094a0 <_dtoa_r+0x3e0>
 800957c:	4b4d      	ldr	r3, [pc, #308]	; (80096b4 <_dtoa_r+0x5f4>)
 800957e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009582:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009588:	2b00      	cmp	r3, #0
 800958a:	d047      	beq.n	800961c <_dtoa_r+0x55c>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	2000      	movs	r0, #0
 8009592:	494e      	ldr	r1, [pc, #312]	; (80096cc <_dtoa_r+0x60c>)
 8009594:	f7f7 f982 	bl	800089c <__aeabi_ddiv>
 8009598:	462a      	mov	r2, r5
 800959a:	4633      	mov	r3, r6
 800959c:	f7f6 fe9c 	bl	80002d8 <__aeabi_dsub>
 80095a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80095a4:	465d      	mov	r5, fp
 80095a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095aa:	f7f7 fafd 	bl	8000ba8 <__aeabi_d2iz>
 80095ae:	4606      	mov	r6, r0
 80095b0:	f7f6 ffe0 	bl	8000574 <__aeabi_i2d>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095bc:	f7f6 fe8c 	bl	80002d8 <__aeabi_dsub>
 80095c0:	3630      	adds	r6, #48	; 0x30
 80095c2:	f805 6b01 	strb.w	r6, [r5], #1
 80095c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095ca:	e9cd 0100 	strd	r0, r1, [sp]
 80095ce:	f7f7 faad 	bl	8000b2c <__aeabi_dcmplt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d163      	bne.n	800969e <_dtoa_r+0x5de>
 80095d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095da:	2000      	movs	r0, #0
 80095dc:	4937      	ldr	r1, [pc, #220]	; (80096bc <_dtoa_r+0x5fc>)
 80095de:	f7f6 fe7b 	bl	80002d8 <__aeabi_dsub>
 80095e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095e6:	f7f7 faa1 	bl	8000b2c <__aeabi_dcmplt>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f040 80b7 	bne.w	800975e <_dtoa_r+0x69e>
 80095f0:	eba5 030b 	sub.w	r3, r5, fp
 80095f4:	429f      	cmp	r7, r3
 80095f6:	f77f af7c 	ble.w	80094f2 <_dtoa_r+0x432>
 80095fa:	2200      	movs	r2, #0
 80095fc:	4b30      	ldr	r3, [pc, #192]	; (80096c0 <_dtoa_r+0x600>)
 80095fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009602:	f7f7 f821 	bl	8000648 <__aeabi_dmul>
 8009606:	2200      	movs	r2, #0
 8009608:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800960c:	4b2c      	ldr	r3, [pc, #176]	; (80096c0 <_dtoa_r+0x600>)
 800960e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009612:	f7f7 f819 	bl	8000648 <__aeabi_dmul>
 8009616:	e9cd 0100 	strd	r0, r1, [sp]
 800961a:	e7c4      	b.n	80095a6 <_dtoa_r+0x4e6>
 800961c:	462a      	mov	r2, r5
 800961e:	4633      	mov	r3, r6
 8009620:	f7f7 f812 	bl	8000648 <__aeabi_dmul>
 8009624:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009628:	eb0b 0507 	add.w	r5, fp, r7
 800962c:	465e      	mov	r6, fp
 800962e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009632:	f7f7 fab9 	bl	8000ba8 <__aeabi_d2iz>
 8009636:	4607      	mov	r7, r0
 8009638:	f7f6 ff9c 	bl	8000574 <__aeabi_i2d>
 800963c:	3730      	adds	r7, #48	; 0x30
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009646:	f7f6 fe47 	bl	80002d8 <__aeabi_dsub>
 800964a:	f806 7b01 	strb.w	r7, [r6], #1
 800964e:	42ae      	cmp	r6, r5
 8009650:	e9cd 0100 	strd	r0, r1, [sp]
 8009654:	f04f 0200 	mov.w	r2, #0
 8009658:	d126      	bne.n	80096a8 <_dtoa_r+0x5e8>
 800965a:	4b1c      	ldr	r3, [pc, #112]	; (80096cc <_dtoa_r+0x60c>)
 800965c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009660:	f7f6 fe3c 	bl	80002dc <__adddf3>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800966c:	f7f7 fa7c 	bl	8000b68 <__aeabi_dcmpgt>
 8009670:	2800      	cmp	r0, #0
 8009672:	d174      	bne.n	800975e <_dtoa_r+0x69e>
 8009674:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009678:	2000      	movs	r0, #0
 800967a:	4914      	ldr	r1, [pc, #80]	; (80096cc <_dtoa_r+0x60c>)
 800967c:	f7f6 fe2c 	bl	80002d8 <__aeabi_dsub>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009688:	f7f7 fa50 	bl	8000b2c <__aeabi_dcmplt>
 800968c:	2800      	cmp	r0, #0
 800968e:	f43f af30 	beq.w	80094f2 <_dtoa_r+0x432>
 8009692:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009696:	2b30      	cmp	r3, #48	; 0x30
 8009698:	f105 32ff 	add.w	r2, r5, #4294967295
 800969c:	d002      	beq.n	80096a4 <_dtoa_r+0x5e4>
 800969e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80096a2:	e04a      	b.n	800973a <_dtoa_r+0x67a>
 80096a4:	4615      	mov	r5, r2
 80096a6:	e7f4      	b.n	8009692 <_dtoa_r+0x5d2>
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <_dtoa_r+0x600>)
 80096aa:	f7f6 ffcd 	bl	8000648 <__aeabi_dmul>
 80096ae:	e9cd 0100 	strd	r0, r1, [sp]
 80096b2:	e7bc      	b.n	800962e <_dtoa_r+0x56e>
 80096b4:	0800dba0 	.word	0x0800dba0
 80096b8:	0800db78 	.word	0x0800db78
 80096bc:	3ff00000 	.word	0x3ff00000
 80096c0:	40240000 	.word	0x40240000
 80096c4:	401c0000 	.word	0x401c0000
 80096c8:	40140000 	.word	0x40140000
 80096cc:	3fe00000 	.word	0x3fe00000
 80096d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80096d4:	465d      	mov	r5, fp
 80096d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096da:	4630      	mov	r0, r6
 80096dc:	4639      	mov	r1, r7
 80096de:	f7f7 f8dd 	bl	800089c <__aeabi_ddiv>
 80096e2:	f7f7 fa61 	bl	8000ba8 <__aeabi_d2iz>
 80096e6:	4680      	mov	r8, r0
 80096e8:	f7f6 ff44 	bl	8000574 <__aeabi_i2d>
 80096ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096f0:	f7f6 ffaa 	bl	8000648 <__aeabi_dmul>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009700:	f7f6 fdea 	bl	80002d8 <__aeabi_dsub>
 8009704:	f805 6b01 	strb.w	r6, [r5], #1
 8009708:	eba5 060b 	sub.w	r6, r5, fp
 800970c:	45b1      	cmp	r9, r6
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	d139      	bne.n	8009788 <_dtoa_r+0x6c8>
 8009714:	f7f6 fde2 	bl	80002dc <__adddf3>
 8009718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800971c:	4606      	mov	r6, r0
 800971e:	460f      	mov	r7, r1
 8009720:	f7f7 fa22 	bl	8000b68 <__aeabi_dcmpgt>
 8009724:	b9c8      	cbnz	r0, 800975a <_dtoa_r+0x69a>
 8009726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f7 f9f3 	bl	8000b18 <__aeabi_dcmpeq>
 8009732:	b110      	cbz	r0, 800973a <_dtoa_r+0x67a>
 8009734:	f018 0f01 	tst.w	r8, #1
 8009738:	d10f      	bne.n	800975a <_dtoa_r+0x69a>
 800973a:	9904      	ldr	r1, [sp, #16]
 800973c:	4620      	mov	r0, r4
 800973e:	f000 fe06 	bl	800a34e <_Bfree>
 8009742:	2300      	movs	r3, #0
 8009744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009746:	702b      	strb	r3, [r5, #0]
 8009748:	f10a 0301 	add.w	r3, sl, #1
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 8241 	beq.w	8009bd8 <_dtoa_r+0xb18>
 8009756:	601d      	str	r5, [r3, #0]
 8009758:	e23e      	b.n	8009bd8 <_dtoa_r+0xb18>
 800975a:	f8cd a020 	str.w	sl, [sp, #32]
 800975e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009762:	2a39      	cmp	r2, #57	; 0x39
 8009764:	f105 33ff 	add.w	r3, r5, #4294967295
 8009768:	d108      	bne.n	800977c <_dtoa_r+0x6bc>
 800976a:	459b      	cmp	fp, r3
 800976c:	d10a      	bne.n	8009784 <_dtoa_r+0x6c4>
 800976e:	9b08      	ldr	r3, [sp, #32]
 8009770:	3301      	adds	r3, #1
 8009772:	9308      	str	r3, [sp, #32]
 8009774:	2330      	movs	r3, #48	; 0x30
 8009776:	f88b 3000 	strb.w	r3, [fp]
 800977a:	465b      	mov	r3, fp
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	3201      	adds	r2, #1
 8009780:	701a      	strb	r2, [r3, #0]
 8009782:	e78c      	b.n	800969e <_dtoa_r+0x5de>
 8009784:	461d      	mov	r5, r3
 8009786:	e7ea      	b.n	800975e <_dtoa_r+0x69e>
 8009788:	2200      	movs	r2, #0
 800978a:	4b9b      	ldr	r3, [pc, #620]	; (80099f8 <_dtoa_r+0x938>)
 800978c:	f7f6 ff5c 	bl	8000648 <__aeabi_dmul>
 8009790:	2200      	movs	r2, #0
 8009792:	2300      	movs	r3, #0
 8009794:	4606      	mov	r6, r0
 8009796:	460f      	mov	r7, r1
 8009798:	f7f7 f9be 	bl	8000b18 <__aeabi_dcmpeq>
 800979c:	2800      	cmp	r0, #0
 800979e:	d09a      	beq.n	80096d6 <_dtoa_r+0x616>
 80097a0:	e7cb      	b.n	800973a <_dtoa_r+0x67a>
 80097a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	f000 808b 	beq.w	80098c0 <_dtoa_r+0x800>
 80097aa:	9a06      	ldr	r2, [sp, #24]
 80097ac:	2a01      	cmp	r2, #1
 80097ae:	dc6e      	bgt.n	800988e <_dtoa_r+0x7ce>
 80097b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	d067      	beq.n	8009886 <_dtoa_r+0x7c6>
 80097b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097ba:	9f07      	ldr	r7, [sp, #28]
 80097bc:	9d05      	ldr	r5, [sp, #20]
 80097be:	9a05      	ldr	r2, [sp, #20]
 80097c0:	2101      	movs	r1, #1
 80097c2:	441a      	add	r2, r3
 80097c4:	4620      	mov	r0, r4
 80097c6:	9205      	str	r2, [sp, #20]
 80097c8:	4498      	add	r8, r3
 80097ca:	f000 fe9e 	bl	800a50a <__i2b>
 80097ce:	4606      	mov	r6, r0
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	dd0c      	ble.n	80097ee <_dtoa_r+0x72e>
 80097d4:	f1b8 0f00 	cmp.w	r8, #0
 80097d8:	dd09      	ble.n	80097ee <_dtoa_r+0x72e>
 80097da:	4545      	cmp	r5, r8
 80097dc:	9a05      	ldr	r2, [sp, #20]
 80097de:	462b      	mov	r3, r5
 80097e0:	bfa8      	it	ge
 80097e2:	4643      	movge	r3, r8
 80097e4:	1ad2      	subs	r2, r2, r3
 80097e6:	9205      	str	r2, [sp, #20]
 80097e8:	1aed      	subs	r5, r5, r3
 80097ea:	eba8 0803 	sub.w	r8, r8, r3
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	b1eb      	cbz	r3, 800982e <_dtoa_r+0x76e>
 80097f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d067      	beq.n	80098c8 <_dtoa_r+0x808>
 80097f8:	b18f      	cbz	r7, 800981e <_dtoa_r+0x75e>
 80097fa:	4631      	mov	r1, r6
 80097fc:	463a      	mov	r2, r7
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 ff22 	bl	800a648 <__pow5mult>
 8009804:	9a04      	ldr	r2, [sp, #16]
 8009806:	4601      	mov	r1, r0
 8009808:	4606      	mov	r6, r0
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fe86 	bl	800a51c <__multiply>
 8009810:	9904      	ldr	r1, [sp, #16]
 8009812:	9008      	str	r0, [sp, #32]
 8009814:	4620      	mov	r0, r4
 8009816:	f000 fd9a 	bl	800a34e <_Bfree>
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	9b07      	ldr	r3, [sp, #28]
 8009820:	1bda      	subs	r2, r3, r7
 8009822:	d004      	beq.n	800982e <_dtoa_r+0x76e>
 8009824:	9904      	ldr	r1, [sp, #16]
 8009826:	4620      	mov	r0, r4
 8009828:	f000 ff0e 	bl	800a648 <__pow5mult>
 800982c:	9004      	str	r0, [sp, #16]
 800982e:	2101      	movs	r1, #1
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fe6a 	bl	800a50a <__i2b>
 8009836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009838:	4607      	mov	r7, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 81d0 	beq.w	8009be0 <_dtoa_r+0xb20>
 8009840:	461a      	mov	r2, r3
 8009842:	4601      	mov	r1, r0
 8009844:	4620      	mov	r0, r4
 8009846:	f000 feff 	bl	800a648 <__pow5mult>
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2b01      	cmp	r3, #1
 800984e:	4607      	mov	r7, r0
 8009850:	dc40      	bgt.n	80098d4 <_dtoa_r+0x814>
 8009852:	9b00      	ldr	r3, [sp, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d139      	bne.n	80098cc <_dtoa_r+0x80c>
 8009858:	9b01      	ldr	r3, [sp, #4]
 800985a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800985e:	2b00      	cmp	r3, #0
 8009860:	d136      	bne.n	80098d0 <_dtoa_r+0x810>
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009868:	0d1b      	lsrs	r3, r3, #20
 800986a:	051b      	lsls	r3, r3, #20
 800986c:	b12b      	cbz	r3, 800987a <_dtoa_r+0x7ba>
 800986e:	9b05      	ldr	r3, [sp, #20]
 8009870:	3301      	adds	r3, #1
 8009872:	9305      	str	r3, [sp, #20]
 8009874:	f108 0801 	add.w	r8, r8, #1
 8009878:	2301      	movs	r3, #1
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800987e:	2b00      	cmp	r3, #0
 8009880:	d12a      	bne.n	80098d8 <_dtoa_r+0x818>
 8009882:	2001      	movs	r0, #1
 8009884:	e030      	b.n	80098e8 <_dtoa_r+0x828>
 8009886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009888:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800988c:	e795      	b.n	80097ba <_dtoa_r+0x6fa>
 800988e:	9b07      	ldr	r3, [sp, #28]
 8009890:	f109 37ff 	add.w	r7, r9, #4294967295
 8009894:	42bb      	cmp	r3, r7
 8009896:	bfbf      	itttt	lt
 8009898:	9b07      	ldrlt	r3, [sp, #28]
 800989a:	9707      	strlt	r7, [sp, #28]
 800989c:	1afa      	sublt	r2, r7, r3
 800989e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80098a0:	bfbb      	ittet	lt
 80098a2:	189b      	addlt	r3, r3, r2
 80098a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80098a6:	1bdf      	subge	r7, r3, r7
 80098a8:	2700      	movlt	r7, #0
 80098aa:	f1b9 0f00 	cmp.w	r9, #0
 80098ae:	bfb5      	itete	lt
 80098b0:	9b05      	ldrlt	r3, [sp, #20]
 80098b2:	9d05      	ldrge	r5, [sp, #20]
 80098b4:	eba3 0509 	sublt.w	r5, r3, r9
 80098b8:	464b      	movge	r3, r9
 80098ba:	bfb8      	it	lt
 80098bc:	2300      	movlt	r3, #0
 80098be:	e77e      	b.n	80097be <_dtoa_r+0x6fe>
 80098c0:	9f07      	ldr	r7, [sp, #28]
 80098c2:	9d05      	ldr	r5, [sp, #20]
 80098c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80098c6:	e783      	b.n	80097d0 <_dtoa_r+0x710>
 80098c8:	9a07      	ldr	r2, [sp, #28]
 80098ca:	e7ab      	b.n	8009824 <_dtoa_r+0x764>
 80098cc:	2300      	movs	r3, #0
 80098ce:	e7d4      	b.n	800987a <_dtoa_r+0x7ba>
 80098d0:	9b00      	ldr	r3, [sp, #0]
 80098d2:	e7d2      	b.n	800987a <_dtoa_r+0x7ba>
 80098d4:	2300      	movs	r3, #0
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80098de:	6918      	ldr	r0, [r3, #16]
 80098e0:	f000 fdc5 	bl	800a46e <__hi0bits>
 80098e4:	f1c0 0020 	rsb	r0, r0, #32
 80098e8:	4440      	add	r0, r8
 80098ea:	f010 001f 	ands.w	r0, r0, #31
 80098ee:	d047      	beq.n	8009980 <_dtoa_r+0x8c0>
 80098f0:	f1c0 0320 	rsb	r3, r0, #32
 80098f4:	2b04      	cmp	r3, #4
 80098f6:	dd3b      	ble.n	8009970 <_dtoa_r+0x8b0>
 80098f8:	9b05      	ldr	r3, [sp, #20]
 80098fa:	f1c0 001c 	rsb	r0, r0, #28
 80098fe:	4403      	add	r3, r0
 8009900:	9305      	str	r3, [sp, #20]
 8009902:	4405      	add	r5, r0
 8009904:	4480      	add	r8, r0
 8009906:	9b05      	ldr	r3, [sp, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	dd05      	ble.n	8009918 <_dtoa_r+0x858>
 800990c:	461a      	mov	r2, r3
 800990e:	9904      	ldr	r1, [sp, #16]
 8009910:	4620      	mov	r0, r4
 8009912:	f000 fee7 	bl	800a6e4 <__lshift>
 8009916:	9004      	str	r0, [sp, #16]
 8009918:	f1b8 0f00 	cmp.w	r8, #0
 800991c:	dd05      	ble.n	800992a <_dtoa_r+0x86a>
 800991e:	4639      	mov	r1, r7
 8009920:	4642      	mov	r2, r8
 8009922:	4620      	mov	r0, r4
 8009924:	f000 fede 	bl	800a6e4 <__lshift>
 8009928:	4607      	mov	r7, r0
 800992a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800992c:	b353      	cbz	r3, 8009984 <_dtoa_r+0x8c4>
 800992e:	4639      	mov	r1, r7
 8009930:	9804      	ldr	r0, [sp, #16]
 8009932:	f000 ff2b 	bl	800a78c <__mcmp>
 8009936:	2800      	cmp	r0, #0
 8009938:	da24      	bge.n	8009984 <_dtoa_r+0x8c4>
 800993a:	2300      	movs	r3, #0
 800993c:	220a      	movs	r2, #10
 800993e:	9904      	ldr	r1, [sp, #16]
 8009940:	4620      	mov	r0, r4
 8009942:	f000 fd1b 	bl	800a37c <__multadd>
 8009946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009948:	9004      	str	r0, [sp, #16]
 800994a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 814d 	beq.w	8009bee <_dtoa_r+0xb2e>
 8009954:	2300      	movs	r3, #0
 8009956:	4631      	mov	r1, r6
 8009958:	220a      	movs	r2, #10
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fd0e 	bl	800a37c <__multadd>
 8009960:	9b02      	ldr	r3, [sp, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	4606      	mov	r6, r0
 8009966:	dc4f      	bgt.n	8009a08 <_dtoa_r+0x948>
 8009968:	9b06      	ldr	r3, [sp, #24]
 800996a:	2b02      	cmp	r3, #2
 800996c:	dd4c      	ble.n	8009a08 <_dtoa_r+0x948>
 800996e:	e011      	b.n	8009994 <_dtoa_r+0x8d4>
 8009970:	d0c9      	beq.n	8009906 <_dtoa_r+0x846>
 8009972:	9a05      	ldr	r2, [sp, #20]
 8009974:	331c      	adds	r3, #28
 8009976:	441a      	add	r2, r3
 8009978:	9205      	str	r2, [sp, #20]
 800997a:	441d      	add	r5, r3
 800997c:	4498      	add	r8, r3
 800997e:	e7c2      	b.n	8009906 <_dtoa_r+0x846>
 8009980:	4603      	mov	r3, r0
 8009982:	e7f6      	b.n	8009972 <_dtoa_r+0x8b2>
 8009984:	f1b9 0f00 	cmp.w	r9, #0
 8009988:	dc38      	bgt.n	80099fc <_dtoa_r+0x93c>
 800998a:	9b06      	ldr	r3, [sp, #24]
 800998c:	2b02      	cmp	r3, #2
 800998e:	dd35      	ble.n	80099fc <_dtoa_r+0x93c>
 8009990:	f8cd 9008 	str.w	r9, [sp, #8]
 8009994:	9b02      	ldr	r3, [sp, #8]
 8009996:	b963      	cbnz	r3, 80099b2 <_dtoa_r+0x8f2>
 8009998:	4639      	mov	r1, r7
 800999a:	2205      	movs	r2, #5
 800999c:	4620      	mov	r0, r4
 800999e:	f000 fced 	bl	800a37c <__multadd>
 80099a2:	4601      	mov	r1, r0
 80099a4:	4607      	mov	r7, r0
 80099a6:	9804      	ldr	r0, [sp, #16]
 80099a8:	f000 fef0 	bl	800a78c <__mcmp>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f73f adcc 	bgt.w	800954a <_dtoa_r+0x48a>
 80099b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b4:	465d      	mov	r5, fp
 80099b6:	ea6f 0a03 	mvn.w	sl, r3
 80099ba:	f04f 0900 	mov.w	r9, #0
 80099be:	4639      	mov	r1, r7
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fcc4 	bl	800a34e <_Bfree>
 80099c6:	2e00      	cmp	r6, #0
 80099c8:	f43f aeb7 	beq.w	800973a <_dtoa_r+0x67a>
 80099cc:	f1b9 0f00 	cmp.w	r9, #0
 80099d0:	d005      	beq.n	80099de <_dtoa_r+0x91e>
 80099d2:	45b1      	cmp	r9, r6
 80099d4:	d003      	beq.n	80099de <_dtoa_r+0x91e>
 80099d6:	4649      	mov	r1, r9
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 fcb8 	bl	800a34e <_Bfree>
 80099de:	4631      	mov	r1, r6
 80099e0:	4620      	mov	r0, r4
 80099e2:	f000 fcb4 	bl	800a34e <_Bfree>
 80099e6:	e6a8      	b.n	800973a <_dtoa_r+0x67a>
 80099e8:	2700      	movs	r7, #0
 80099ea:	463e      	mov	r6, r7
 80099ec:	e7e1      	b.n	80099b2 <_dtoa_r+0x8f2>
 80099ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80099f2:	463e      	mov	r6, r7
 80099f4:	e5a9      	b.n	800954a <_dtoa_r+0x48a>
 80099f6:	bf00      	nop
 80099f8:	40240000 	.word	0x40240000
 80099fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80fa 	beq.w	8009bfc <_dtoa_r+0xb3c>
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	dd05      	ble.n	8009a18 <_dtoa_r+0x958>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	462a      	mov	r2, r5
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fe67 	bl	800a6e4 <__lshift>
 8009a16:	4606      	mov	r6, r0
 8009a18:	9b07      	ldr	r3, [sp, #28]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d04c      	beq.n	8009ab8 <_dtoa_r+0x9f8>
 8009a1e:	6871      	ldr	r1, [r6, #4]
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 fc60 	bl	800a2e6 <_Balloc>
 8009a26:	6932      	ldr	r2, [r6, #16]
 8009a28:	3202      	adds	r2, #2
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	0092      	lsls	r2, r2, #2
 8009a2e:	f106 010c 	add.w	r1, r6, #12
 8009a32:	300c      	adds	r0, #12
 8009a34:	f000 fc4c 	bl	800a2d0 <memcpy>
 8009a38:	2201      	movs	r2, #1
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 fe51 	bl	800a6e4 <__lshift>
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	f8cd b014 	str.w	fp, [sp, #20]
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	46b1      	mov	r9, r6
 8009a4e:	9307      	str	r3, [sp, #28]
 8009a50:	4606      	mov	r6, r0
 8009a52:	4639      	mov	r1, r7
 8009a54:	9804      	ldr	r0, [sp, #16]
 8009a56:	f7ff faa7 	bl	8008fa8 <quorem>
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a62:	9804      	ldr	r0, [sp, #16]
 8009a64:	f000 fe92 	bl	800a78c <__mcmp>
 8009a68:	4632      	mov	r2, r6
 8009a6a:	9000      	str	r0, [sp, #0]
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 fea6 	bl	800a7c0 <__mdiff>
 8009a74:	68c3      	ldr	r3, [r0, #12]
 8009a76:	4602      	mov	r2, r0
 8009a78:	bb03      	cbnz	r3, 8009abc <_dtoa_r+0x9fc>
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	9008      	str	r0, [sp, #32]
 8009a7e:	9804      	ldr	r0, [sp, #16]
 8009a80:	f000 fe84 	bl	800a78c <__mcmp>
 8009a84:	9a08      	ldr	r2, [sp, #32]
 8009a86:	4603      	mov	r3, r0
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	f000 fc5e 	bl	800a34e <_Bfree>
 8009a92:	9b08      	ldr	r3, [sp, #32]
 8009a94:	b9a3      	cbnz	r3, 8009ac0 <_dtoa_r+0xa00>
 8009a96:	9a06      	ldr	r2, [sp, #24]
 8009a98:	b992      	cbnz	r2, 8009ac0 <_dtoa_r+0xa00>
 8009a9a:	9a07      	ldr	r2, [sp, #28]
 8009a9c:	b982      	cbnz	r2, 8009ac0 <_dtoa_r+0xa00>
 8009a9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009aa2:	d029      	beq.n	8009af8 <_dtoa_r+0xa38>
 8009aa4:	9b00      	ldr	r3, [sp, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	dd01      	ble.n	8009aae <_dtoa_r+0x9ee>
 8009aaa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009aae:	9b05      	ldr	r3, [sp, #20]
 8009ab0:	1c5d      	adds	r5, r3, #1
 8009ab2:	f883 8000 	strb.w	r8, [r3]
 8009ab6:	e782      	b.n	80099be <_dtoa_r+0x8fe>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	e7c2      	b.n	8009a42 <_dtoa_r+0x982>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e7e3      	b.n	8009a88 <_dtoa_r+0x9c8>
 8009ac0:	9a00      	ldr	r2, [sp, #0]
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	db04      	blt.n	8009ad0 <_dtoa_r+0xa10>
 8009ac6:	d125      	bne.n	8009b14 <_dtoa_r+0xa54>
 8009ac8:	9a06      	ldr	r2, [sp, #24]
 8009aca:	bb1a      	cbnz	r2, 8009b14 <_dtoa_r+0xa54>
 8009acc:	9a07      	ldr	r2, [sp, #28]
 8009ace:	bb0a      	cbnz	r2, 8009b14 <_dtoa_r+0xa54>
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	ddec      	ble.n	8009aae <_dtoa_r+0x9ee>
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	9904      	ldr	r1, [sp, #16]
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fe03 	bl	800a6e4 <__lshift>
 8009ade:	4639      	mov	r1, r7
 8009ae0:	9004      	str	r0, [sp, #16]
 8009ae2:	f000 fe53 	bl	800a78c <__mcmp>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	dc03      	bgt.n	8009af2 <_dtoa_r+0xa32>
 8009aea:	d1e0      	bne.n	8009aae <_dtoa_r+0x9ee>
 8009aec:	f018 0f01 	tst.w	r8, #1
 8009af0:	d0dd      	beq.n	8009aae <_dtoa_r+0x9ee>
 8009af2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009af6:	d1d8      	bne.n	8009aaa <_dtoa_r+0x9ea>
 8009af8:	9b05      	ldr	r3, [sp, #20]
 8009afa:	9a05      	ldr	r2, [sp, #20]
 8009afc:	1c5d      	adds	r5, r3, #1
 8009afe:	2339      	movs	r3, #57	; 0x39
 8009b00:	7013      	strb	r3, [r2, #0]
 8009b02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b06:	2b39      	cmp	r3, #57	; 0x39
 8009b08:	f105 32ff 	add.w	r2, r5, #4294967295
 8009b0c:	d04f      	beq.n	8009bae <_dtoa_r+0xaee>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	7013      	strb	r3, [r2, #0]
 8009b12:	e754      	b.n	80099be <_dtoa_r+0x8fe>
 8009b14:	9a05      	ldr	r2, [sp, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f102 0501 	add.w	r5, r2, #1
 8009b1c:	dd06      	ble.n	8009b2c <_dtoa_r+0xa6c>
 8009b1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b22:	d0e9      	beq.n	8009af8 <_dtoa_r+0xa38>
 8009b24:	f108 0801 	add.w	r8, r8, #1
 8009b28:	9b05      	ldr	r3, [sp, #20]
 8009b2a:	e7c2      	b.n	8009ab2 <_dtoa_r+0x9f2>
 8009b2c:	9a02      	ldr	r2, [sp, #8]
 8009b2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009b32:	eba5 030b 	sub.w	r3, r5, fp
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d021      	beq.n	8009b7e <_dtoa_r+0xabe>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	220a      	movs	r2, #10
 8009b3e:	9904      	ldr	r1, [sp, #16]
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fc1b 	bl	800a37c <__multadd>
 8009b46:	45b1      	cmp	r9, r6
 8009b48:	9004      	str	r0, [sp, #16]
 8009b4a:	f04f 0300 	mov.w	r3, #0
 8009b4e:	f04f 020a 	mov.w	r2, #10
 8009b52:	4649      	mov	r1, r9
 8009b54:	4620      	mov	r0, r4
 8009b56:	d105      	bne.n	8009b64 <_dtoa_r+0xaa4>
 8009b58:	f000 fc10 	bl	800a37c <__multadd>
 8009b5c:	4681      	mov	r9, r0
 8009b5e:	4606      	mov	r6, r0
 8009b60:	9505      	str	r5, [sp, #20]
 8009b62:	e776      	b.n	8009a52 <_dtoa_r+0x992>
 8009b64:	f000 fc0a 	bl	800a37c <__multadd>
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4681      	mov	r9, r0
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	220a      	movs	r2, #10
 8009b70:	4620      	mov	r0, r4
 8009b72:	f000 fc03 	bl	800a37c <__multadd>
 8009b76:	4606      	mov	r6, r0
 8009b78:	e7f2      	b.n	8009b60 <_dtoa_r+0xaa0>
 8009b7a:	f04f 0900 	mov.w	r9, #0
 8009b7e:	2201      	movs	r2, #1
 8009b80:	9904      	ldr	r1, [sp, #16]
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 fdae 	bl	800a6e4 <__lshift>
 8009b88:	4639      	mov	r1, r7
 8009b8a:	9004      	str	r0, [sp, #16]
 8009b8c:	f000 fdfe 	bl	800a78c <__mcmp>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	dcb6      	bgt.n	8009b02 <_dtoa_r+0xa42>
 8009b94:	d102      	bne.n	8009b9c <_dtoa_r+0xadc>
 8009b96:	f018 0f01 	tst.w	r8, #1
 8009b9a:	d1b2      	bne.n	8009b02 <_dtoa_r+0xa42>
 8009b9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ba0:	2b30      	cmp	r3, #48	; 0x30
 8009ba2:	f105 32ff 	add.w	r2, r5, #4294967295
 8009ba6:	f47f af0a 	bne.w	80099be <_dtoa_r+0x8fe>
 8009baa:	4615      	mov	r5, r2
 8009bac:	e7f6      	b.n	8009b9c <_dtoa_r+0xadc>
 8009bae:	4593      	cmp	fp, r2
 8009bb0:	d105      	bne.n	8009bbe <_dtoa_r+0xafe>
 8009bb2:	2331      	movs	r3, #49	; 0x31
 8009bb4:	f10a 0a01 	add.w	sl, sl, #1
 8009bb8:	f88b 3000 	strb.w	r3, [fp]
 8009bbc:	e6ff      	b.n	80099be <_dtoa_r+0x8fe>
 8009bbe:	4615      	mov	r5, r2
 8009bc0:	e79f      	b.n	8009b02 <_dtoa_r+0xa42>
 8009bc2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009c28 <_dtoa_r+0xb68>
 8009bc6:	e007      	b.n	8009bd8 <_dtoa_r+0xb18>
 8009bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bca:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009c2c <_dtoa_r+0xb6c>
 8009bce:	b11b      	cbz	r3, 8009bd8 <_dtoa_r+0xb18>
 8009bd0:	f10b 0308 	add.w	r3, fp, #8
 8009bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	4658      	mov	r0, fp
 8009bda:	b017      	add	sp, #92	; 0x5c
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	9b06      	ldr	r3, [sp, #24]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	f77f ae35 	ble.w	8009852 <_dtoa_r+0x792>
 8009be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bea:	9307      	str	r3, [sp, #28]
 8009bec:	e649      	b.n	8009882 <_dtoa_r+0x7c2>
 8009bee:	9b02      	ldr	r3, [sp, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc03      	bgt.n	8009bfc <_dtoa_r+0xb3c>
 8009bf4:	9b06      	ldr	r3, [sp, #24]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	f73f aecc 	bgt.w	8009994 <_dtoa_r+0x8d4>
 8009bfc:	465d      	mov	r5, fp
 8009bfe:	4639      	mov	r1, r7
 8009c00:	9804      	ldr	r0, [sp, #16]
 8009c02:	f7ff f9d1 	bl	8008fa8 <quorem>
 8009c06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c0a:	f805 8b01 	strb.w	r8, [r5], #1
 8009c0e:	9a02      	ldr	r2, [sp, #8]
 8009c10:	eba5 030b 	sub.w	r3, r5, fp
 8009c14:	429a      	cmp	r2, r3
 8009c16:	ddb0      	ble.n	8009b7a <_dtoa_r+0xaba>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	220a      	movs	r2, #10
 8009c1c:	9904      	ldr	r1, [sp, #16]
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 fbac 	bl	800a37c <__multadd>
 8009c24:	9004      	str	r0, [sp, #16]
 8009c26:	e7ea      	b.n	8009bfe <_dtoa_r+0xb3e>
 8009c28:	0800dae8 	.word	0x0800dae8
 8009c2c:	0800db60 	.word	0x0800db60

08009c30 <rshift>:
 8009c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c32:	6906      	ldr	r6, [r0, #16]
 8009c34:	114b      	asrs	r3, r1, #5
 8009c36:	429e      	cmp	r6, r3
 8009c38:	f100 0414 	add.w	r4, r0, #20
 8009c3c:	dd30      	ble.n	8009ca0 <rshift+0x70>
 8009c3e:	f011 011f 	ands.w	r1, r1, #31
 8009c42:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009c46:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009c4a:	d108      	bne.n	8009c5e <rshift+0x2e>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	42b2      	cmp	r2, r6
 8009c50:	460b      	mov	r3, r1
 8009c52:	d211      	bcs.n	8009c78 <rshift+0x48>
 8009c54:	f852 3b04 	ldr.w	r3, [r2], #4
 8009c58:	f841 3b04 	str.w	r3, [r1], #4
 8009c5c:	e7f7      	b.n	8009c4e <rshift+0x1e>
 8009c5e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009c62:	f1c1 0c20 	rsb	ip, r1, #32
 8009c66:	40cd      	lsrs	r5, r1
 8009c68:	3204      	adds	r2, #4
 8009c6a:	4623      	mov	r3, r4
 8009c6c:	42b2      	cmp	r2, r6
 8009c6e:	4617      	mov	r7, r2
 8009c70:	d30c      	bcc.n	8009c8c <rshift+0x5c>
 8009c72:	601d      	str	r5, [r3, #0]
 8009c74:	b105      	cbz	r5, 8009c78 <rshift+0x48>
 8009c76:	3304      	adds	r3, #4
 8009c78:	1b1a      	subs	r2, r3, r4
 8009c7a:	42a3      	cmp	r3, r4
 8009c7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c80:	bf08      	it	eq
 8009c82:	2300      	moveq	r3, #0
 8009c84:	6102      	str	r2, [r0, #16]
 8009c86:	bf08      	it	eq
 8009c88:	6143      	streq	r3, [r0, #20]
 8009c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8c:	683f      	ldr	r7, [r7, #0]
 8009c8e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009c92:	433d      	orrs	r5, r7
 8009c94:	f843 5b04 	str.w	r5, [r3], #4
 8009c98:	f852 5b04 	ldr.w	r5, [r2], #4
 8009c9c:	40cd      	lsrs	r5, r1
 8009c9e:	e7e5      	b.n	8009c6c <rshift+0x3c>
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	e7e9      	b.n	8009c78 <rshift+0x48>

08009ca4 <__hexdig_fun>:
 8009ca4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ca8:	2b09      	cmp	r3, #9
 8009caa:	d802      	bhi.n	8009cb2 <__hexdig_fun+0xe>
 8009cac:	3820      	subs	r0, #32
 8009cae:	b2c0      	uxtb	r0, r0
 8009cb0:	4770      	bx	lr
 8009cb2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	d801      	bhi.n	8009cbe <__hexdig_fun+0x1a>
 8009cba:	3847      	subs	r0, #71	; 0x47
 8009cbc:	e7f7      	b.n	8009cae <__hexdig_fun+0xa>
 8009cbe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009cc2:	2b05      	cmp	r3, #5
 8009cc4:	d801      	bhi.n	8009cca <__hexdig_fun+0x26>
 8009cc6:	3827      	subs	r0, #39	; 0x27
 8009cc8:	e7f1      	b.n	8009cae <__hexdig_fun+0xa>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	4770      	bx	lr

08009cce <__gethex>:
 8009cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd2:	b08b      	sub	sp, #44	; 0x2c
 8009cd4:	468a      	mov	sl, r1
 8009cd6:	9002      	str	r0, [sp, #8]
 8009cd8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009cda:	9306      	str	r3, [sp, #24]
 8009cdc:	4690      	mov	r8, r2
 8009cde:	f000 facd 	bl	800a27c <__localeconv_l>
 8009ce2:	6803      	ldr	r3, [r0, #0]
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f6 fa9a 	bl	8000220 <strlen>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	9001      	str	r0, [sp, #4]
 8009cf0:	4403      	add	r3, r0
 8009cf2:	f04f 0b00 	mov.w	fp, #0
 8009cf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cfa:	9307      	str	r3, [sp, #28]
 8009cfc:	f8da 3000 	ldr.w	r3, [sl]
 8009d00:	3302      	adds	r3, #2
 8009d02:	461f      	mov	r7, r3
 8009d04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d08:	2830      	cmp	r0, #48	; 0x30
 8009d0a:	d06c      	beq.n	8009de6 <__gethex+0x118>
 8009d0c:	f7ff ffca 	bl	8009ca4 <__hexdig_fun>
 8009d10:	4604      	mov	r4, r0
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d16a      	bne.n	8009dec <__gethex+0x11e>
 8009d16:	9a01      	ldr	r2, [sp, #4]
 8009d18:	9903      	ldr	r1, [sp, #12]
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f001 f8fa 	bl	800af14 <strncmp>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d166      	bne.n	8009df2 <__gethex+0x124>
 8009d24:	9b01      	ldr	r3, [sp, #4]
 8009d26:	5cf8      	ldrb	r0, [r7, r3]
 8009d28:	18fe      	adds	r6, r7, r3
 8009d2a:	f7ff ffbb 	bl	8009ca4 <__hexdig_fun>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d062      	beq.n	8009df8 <__gethex+0x12a>
 8009d32:	4633      	mov	r3, r6
 8009d34:	7818      	ldrb	r0, [r3, #0]
 8009d36:	2830      	cmp	r0, #48	; 0x30
 8009d38:	461f      	mov	r7, r3
 8009d3a:	f103 0301 	add.w	r3, r3, #1
 8009d3e:	d0f9      	beq.n	8009d34 <__gethex+0x66>
 8009d40:	f7ff ffb0 	bl	8009ca4 <__hexdig_fun>
 8009d44:	fab0 f580 	clz	r5, r0
 8009d48:	096d      	lsrs	r5, r5, #5
 8009d4a:	4634      	mov	r4, r6
 8009d4c:	f04f 0b01 	mov.w	fp, #1
 8009d50:	463a      	mov	r2, r7
 8009d52:	4616      	mov	r6, r2
 8009d54:	3201      	adds	r2, #1
 8009d56:	7830      	ldrb	r0, [r6, #0]
 8009d58:	f7ff ffa4 	bl	8009ca4 <__hexdig_fun>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1f8      	bne.n	8009d52 <__gethex+0x84>
 8009d60:	9a01      	ldr	r2, [sp, #4]
 8009d62:	9903      	ldr	r1, [sp, #12]
 8009d64:	4630      	mov	r0, r6
 8009d66:	f001 f8d5 	bl	800af14 <strncmp>
 8009d6a:	b950      	cbnz	r0, 8009d82 <__gethex+0xb4>
 8009d6c:	b954      	cbnz	r4, 8009d84 <__gethex+0xb6>
 8009d6e:	9b01      	ldr	r3, [sp, #4]
 8009d70:	18f4      	adds	r4, r6, r3
 8009d72:	4622      	mov	r2, r4
 8009d74:	4616      	mov	r6, r2
 8009d76:	3201      	adds	r2, #1
 8009d78:	7830      	ldrb	r0, [r6, #0]
 8009d7a:	f7ff ff93 	bl	8009ca4 <__hexdig_fun>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d1f8      	bne.n	8009d74 <__gethex+0xa6>
 8009d82:	b10c      	cbz	r4, 8009d88 <__gethex+0xba>
 8009d84:	1ba4      	subs	r4, r4, r6
 8009d86:	00a4      	lsls	r4, r4, #2
 8009d88:	7833      	ldrb	r3, [r6, #0]
 8009d8a:	2b50      	cmp	r3, #80	; 0x50
 8009d8c:	d001      	beq.n	8009d92 <__gethex+0xc4>
 8009d8e:	2b70      	cmp	r3, #112	; 0x70
 8009d90:	d140      	bne.n	8009e14 <__gethex+0x146>
 8009d92:	7873      	ldrb	r3, [r6, #1]
 8009d94:	2b2b      	cmp	r3, #43	; 0x2b
 8009d96:	d031      	beq.n	8009dfc <__gethex+0x12e>
 8009d98:	2b2d      	cmp	r3, #45	; 0x2d
 8009d9a:	d033      	beq.n	8009e04 <__gethex+0x136>
 8009d9c:	1c71      	adds	r1, r6, #1
 8009d9e:	f04f 0900 	mov.w	r9, #0
 8009da2:	7808      	ldrb	r0, [r1, #0]
 8009da4:	f7ff ff7e 	bl	8009ca4 <__hexdig_fun>
 8009da8:	1e43      	subs	r3, r0, #1
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b18      	cmp	r3, #24
 8009dae:	d831      	bhi.n	8009e14 <__gethex+0x146>
 8009db0:	f1a0 0210 	sub.w	r2, r0, #16
 8009db4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009db8:	f7ff ff74 	bl	8009ca4 <__hexdig_fun>
 8009dbc:	1e43      	subs	r3, r0, #1
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b18      	cmp	r3, #24
 8009dc2:	d922      	bls.n	8009e0a <__gethex+0x13c>
 8009dc4:	f1b9 0f00 	cmp.w	r9, #0
 8009dc8:	d000      	beq.n	8009dcc <__gethex+0xfe>
 8009dca:	4252      	negs	r2, r2
 8009dcc:	4414      	add	r4, r2
 8009dce:	f8ca 1000 	str.w	r1, [sl]
 8009dd2:	b30d      	cbz	r5, 8009e18 <__gethex+0x14a>
 8009dd4:	f1bb 0f00 	cmp.w	fp, #0
 8009dd8:	bf0c      	ite	eq
 8009dda:	2706      	moveq	r7, #6
 8009ddc:	2700      	movne	r7, #0
 8009dde:	4638      	mov	r0, r7
 8009de0:	b00b      	add	sp, #44	; 0x2c
 8009de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de6:	f10b 0b01 	add.w	fp, fp, #1
 8009dea:	e78a      	b.n	8009d02 <__gethex+0x34>
 8009dec:	2500      	movs	r5, #0
 8009dee:	462c      	mov	r4, r5
 8009df0:	e7ae      	b.n	8009d50 <__gethex+0x82>
 8009df2:	463e      	mov	r6, r7
 8009df4:	2501      	movs	r5, #1
 8009df6:	e7c7      	b.n	8009d88 <__gethex+0xba>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	e7fb      	b.n	8009df4 <__gethex+0x126>
 8009dfc:	f04f 0900 	mov.w	r9, #0
 8009e00:	1cb1      	adds	r1, r6, #2
 8009e02:	e7ce      	b.n	8009da2 <__gethex+0xd4>
 8009e04:	f04f 0901 	mov.w	r9, #1
 8009e08:	e7fa      	b.n	8009e00 <__gethex+0x132>
 8009e0a:	230a      	movs	r3, #10
 8009e0c:	fb03 0202 	mla	r2, r3, r2, r0
 8009e10:	3a10      	subs	r2, #16
 8009e12:	e7cf      	b.n	8009db4 <__gethex+0xe6>
 8009e14:	4631      	mov	r1, r6
 8009e16:	e7da      	b.n	8009dce <__gethex+0x100>
 8009e18:	1bf3      	subs	r3, r6, r7
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	2b07      	cmp	r3, #7
 8009e20:	dc49      	bgt.n	8009eb6 <__gethex+0x1e8>
 8009e22:	9802      	ldr	r0, [sp, #8]
 8009e24:	f000 fa5f 	bl	800a2e6 <_Balloc>
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	f100 0914 	add.w	r9, r0, #20
 8009e2e:	f04f 0b00 	mov.w	fp, #0
 8009e32:	f1c3 0301 	rsb	r3, r3, #1
 8009e36:	4605      	mov	r5, r0
 8009e38:	f8cd 9010 	str.w	r9, [sp, #16]
 8009e3c:	46da      	mov	sl, fp
 8009e3e:	9308      	str	r3, [sp, #32]
 8009e40:	42b7      	cmp	r7, r6
 8009e42:	d33b      	bcc.n	8009ebc <__gethex+0x1ee>
 8009e44:	9804      	ldr	r0, [sp, #16]
 8009e46:	f840 ab04 	str.w	sl, [r0], #4
 8009e4a:	eba0 0009 	sub.w	r0, r0, r9
 8009e4e:	1080      	asrs	r0, r0, #2
 8009e50:	6128      	str	r0, [r5, #16]
 8009e52:	0147      	lsls	r7, r0, #5
 8009e54:	4650      	mov	r0, sl
 8009e56:	f000 fb0a 	bl	800a46e <__hi0bits>
 8009e5a:	f8d8 6000 	ldr.w	r6, [r8]
 8009e5e:	1a3f      	subs	r7, r7, r0
 8009e60:	42b7      	cmp	r7, r6
 8009e62:	dd64      	ble.n	8009f2e <__gethex+0x260>
 8009e64:	1bbf      	subs	r7, r7, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f000 fe19 	bl	800aaa0 <__any_on>
 8009e6e:	4682      	mov	sl, r0
 8009e70:	b178      	cbz	r0, 8009e92 <__gethex+0x1c4>
 8009e72:	1e7b      	subs	r3, r7, #1
 8009e74:	1159      	asrs	r1, r3, #5
 8009e76:	f003 021f 	and.w	r2, r3, #31
 8009e7a:	f04f 0a01 	mov.w	sl, #1
 8009e7e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e82:	fa0a f202 	lsl.w	r2, sl, r2
 8009e86:	420a      	tst	r2, r1
 8009e88:	d003      	beq.n	8009e92 <__gethex+0x1c4>
 8009e8a:	4553      	cmp	r3, sl
 8009e8c:	dc46      	bgt.n	8009f1c <__gethex+0x24e>
 8009e8e:	f04f 0a02 	mov.w	sl, #2
 8009e92:	4639      	mov	r1, r7
 8009e94:	4628      	mov	r0, r5
 8009e96:	f7ff fecb 	bl	8009c30 <rshift>
 8009e9a:	443c      	add	r4, r7
 8009e9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	da52      	bge.n	8009f4a <__gethex+0x27c>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	9802      	ldr	r0, [sp, #8]
 8009ea8:	f000 fa51 	bl	800a34e <_Bfree>
 8009eac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	27a3      	movs	r7, #163	; 0xa3
 8009eb4:	e793      	b.n	8009dde <__gethex+0x110>
 8009eb6:	3101      	adds	r1, #1
 8009eb8:	105b      	asrs	r3, r3, #1
 8009eba:	e7b0      	b.n	8009e1e <__gethex+0x150>
 8009ebc:	1e73      	subs	r3, r6, #1
 8009ebe:	9305      	str	r3, [sp, #20]
 8009ec0:	9a07      	ldr	r2, [sp, #28]
 8009ec2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d018      	beq.n	8009efc <__gethex+0x22e>
 8009eca:	f1bb 0f20 	cmp.w	fp, #32
 8009ece:	d107      	bne.n	8009ee0 <__gethex+0x212>
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	f8c3 a000 	str.w	sl, [r3]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	f04f 0a00 	mov.w	sl, #0
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	46d3      	mov	fp, sl
 8009ee0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ee4:	f7ff fede 	bl	8009ca4 <__hexdig_fun>
 8009ee8:	f000 000f 	and.w	r0, r0, #15
 8009eec:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ef0:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ef4:	f10b 0b04 	add.w	fp, fp, #4
 8009ef8:	9b05      	ldr	r3, [sp, #20]
 8009efa:	e00d      	b.n	8009f18 <__gethex+0x24a>
 8009efc:	9b05      	ldr	r3, [sp, #20]
 8009efe:	9a08      	ldr	r2, [sp, #32]
 8009f00:	4413      	add	r3, r2
 8009f02:	42bb      	cmp	r3, r7
 8009f04:	d3e1      	bcc.n	8009eca <__gethex+0x1fc>
 8009f06:	4618      	mov	r0, r3
 8009f08:	9a01      	ldr	r2, [sp, #4]
 8009f0a:	9903      	ldr	r1, [sp, #12]
 8009f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0e:	f001 f801 	bl	800af14 <strncmp>
 8009f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d1d8      	bne.n	8009eca <__gethex+0x1fc>
 8009f18:	461e      	mov	r6, r3
 8009f1a:	e791      	b.n	8009e40 <__gethex+0x172>
 8009f1c:	1eb9      	subs	r1, r7, #2
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f000 fdbe 	bl	800aaa0 <__any_on>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d0b2      	beq.n	8009e8e <__gethex+0x1c0>
 8009f28:	f04f 0a03 	mov.w	sl, #3
 8009f2c:	e7b1      	b.n	8009e92 <__gethex+0x1c4>
 8009f2e:	da09      	bge.n	8009f44 <__gethex+0x276>
 8009f30:	1bf7      	subs	r7, r6, r7
 8009f32:	4629      	mov	r1, r5
 8009f34:	463a      	mov	r2, r7
 8009f36:	9802      	ldr	r0, [sp, #8]
 8009f38:	f000 fbd4 	bl	800a6e4 <__lshift>
 8009f3c:	1be4      	subs	r4, r4, r7
 8009f3e:	4605      	mov	r5, r0
 8009f40:	f100 0914 	add.w	r9, r0, #20
 8009f44:	f04f 0a00 	mov.w	sl, #0
 8009f48:	e7a8      	b.n	8009e9c <__gethex+0x1ce>
 8009f4a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f4e:	42a0      	cmp	r0, r4
 8009f50:	dd6a      	ble.n	800a028 <__gethex+0x35a>
 8009f52:	1b04      	subs	r4, r0, r4
 8009f54:	42a6      	cmp	r6, r4
 8009f56:	dc2e      	bgt.n	8009fb6 <__gethex+0x2e8>
 8009f58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d022      	beq.n	8009fa6 <__gethex+0x2d8>
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d024      	beq.n	8009fae <__gethex+0x2e0>
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d115      	bne.n	8009f94 <__gethex+0x2c6>
 8009f68:	42a6      	cmp	r6, r4
 8009f6a:	d113      	bne.n	8009f94 <__gethex+0x2c6>
 8009f6c:	2e01      	cmp	r6, #1
 8009f6e:	dc0b      	bgt.n	8009f88 <__gethex+0x2ba>
 8009f70:	9a06      	ldr	r2, [sp, #24]
 8009f72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	612b      	str	r3, [r5, #16]
 8009f7c:	f8c9 3000 	str.w	r3, [r9]
 8009f80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f82:	2762      	movs	r7, #98	; 0x62
 8009f84:	601d      	str	r5, [r3, #0]
 8009f86:	e72a      	b.n	8009dde <__gethex+0x110>
 8009f88:	1e71      	subs	r1, r6, #1
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 fd88 	bl	800aaa0 <__any_on>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d1ed      	bne.n	8009f70 <__gethex+0x2a2>
 8009f94:	4629      	mov	r1, r5
 8009f96:	9802      	ldr	r0, [sp, #8]
 8009f98:	f000 f9d9 	bl	800a34e <_Bfree>
 8009f9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	2750      	movs	r7, #80	; 0x50
 8009fa4:	e71b      	b.n	8009dde <__gethex+0x110>
 8009fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0e1      	beq.n	8009f70 <__gethex+0x2a2>
 8009fac:	e7f2      	b.n	8009f94 <__gethex+0x2c6>
 8009fae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1dd      	bne.n	8009f70 <__gethex+0x2a2>
 8009fb4:	e7ee      	b.n	8009f94 <__gethex+0x2c6>
 8009fb6:	1e67      	subs	r7, r4, #1
 8009fb8:	f1ba 0f00 	cmp.w	sl, #0
 8009fbc:	d131      	bne.n	800a022 <__gethex+0x354>
 8009fbe:	b127      	cbz	r7, 8009fca <__gethex+0x2fc>
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 fd6c 	bl	800aaa0 <__any_on>
 8009fc8:	4682      	mov	sl, r0
 8009fca:	117a      	asrs	r2, r7, #5
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f007 071f 	and.w	r7, r7, #31
 8009fd2:	fa03 f707 	lsl.w	r7, r3, r7
 8009fd6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009fda:	4621      	mov	r1, r4
 8009fdc:	421f      	tst	r7, r3
 8009fde:	4628      	mov	r0, r5
 8009fe0:	bf18      	it	ne
 8009fe2:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fe6:	1b36      	subs	r6, r6, r4
 8009fe8:	f7ff fe22 	bl	8009c30 <rshift>
 8009fec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009ff0:	2702      	movs	r7, #2
 8009ff2:	f1ba 0f00 	cmp.w	sl, #0
 8009ff6:	d048      	beq.n	800a08a <__gethex+0x3bc>
 8009ff8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d015      	beq.n	800a02c <__gethex+0x35e>
 800a000:	2b03      	cmp	r3, #3
 800a002:	d017      	beq.n	800a034 <__gethex+0x366>
 800a004:	2b01      	cmp	r3, #1
 800a006:	d109      	bne.n	800a01c <__gethex+0x34e>
 800a008:	f01a 0f02 	tst.w	sl, #2
 800a00c:	d006      	beq.n	800a01c <__gethex+0x34e>
 800a00e:	f8d9 3000 	ldr.w	r3, [r9]
 800a012:	ea4a 0a03 	orr.w	sl, sl, r3
 800a016:	f01a 0f01 	tst.w	sl, #1
 800a01a:	d10e      	bne.n	800a03a <__gethex+0x36c>
 800a01c:	f047 0710 	orr.w	r7, r7, #16
 800a020:	e033      	b.n	800a08a <__gethex+0x3bc>
 800a022:	f04f 0a01 	mov.w	sl, #1
 800a026:	e7d0      	b.n	8009fca <__gethex+0x2fc>
 800a028:	2701      	movs	r7, #1
 800a02a:	e7e2      	b.n	8009ff2 <__gethex+0x324>
 800a02c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a02e:	f1c3 0301 	rsb	r3, r3, #1
 800a032:	9315      	str	r3, [sp, #84]	; 0x54
 800a034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0f0      	beq.n	800a01c <__gethex+0x34e>
 800a03a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a03e:	f105 0314 	add.w	r3, r5, #20
 800a042:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a046:	eb03 010a 	add.w	r1, r3, sl
 800a04a:	f04f 0c00 	mov.w	ip, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f853 2b04 	ldr.w	r2, [r3], #4
 800a054:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a058:	d01c      	beq.n	800a094 <__gethex+0x3c6>
 800a05a:	3201      	adds	r2, #1
 800a05c:	6002      	str	r2, [r0, #0]
 800a05e:	2f02      	cmp	r7, #2
 800a060:	f105 0314 	add.w	r3, r5, #20
 800a064:	d138      	bne.n	800a0d8 <__gethex+0x40a>
 800a066:	f8d8 2000 	ldr.w	r2, [r8]
 800a06a:	3a01      	subs	r2, #1
 800a06c:	42b2      	cmp	r2, r6
 800a06e:	d10a      	bne.n	800a086 <__gethex+0x3b8>
 800a070:	1171      	asrs	r1, r6, #5
 800a072:	2201      	movs	r2, #1
 800a074:	f006 061f 	and.w	r6, r6, #31
 800a078:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a07c:	fa02 f606 	lsl.w	r6, r2, r6
 800a080:	421e      	tst	r6, r3
 800a082:	bf18      	it	ne
 800a084:	4617      	movne	r7, r2
 800a086:	f047 0720 	orr.w	r7, r7, #32
 800a08a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a08c:	601d      	str	r5, [r3, #0]
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	601c      	str	r4, [r3, #0]
 800a092:	e6a4      	b.n	8009dde <__gethex+0x110>
 800a094:	4299      	cmp	r1, r3
 800a096:	f843 cc04 	str.w	ip, [r3, #-4]
 800a09a:	d8d8      	bhi.n	800a04e <__gethex+0x380>
 800a09c:	68ab      	ldr	r3, [r5, #8]
 800a09e:	4599      	cmp	r9, r3
 800a0a0:	db12      	blt.n	800a0c8 <__gethex+0x3fa>
 800a0a2:	6869      	ldr	r1, [r5, #4]
 800a0a4:	9802      	ldr	r0, [sp, #8]
 800a0a6:	3101      	adds	r1, #1
 800a0a8:	f000 f91d 	bl	800a2e6 <_Balloc>
 800a0ac:	692a      	ldr	r2, [r5, #16]
 800a0ae:	3202      	adds	r2, #2
 800a0b0:	f105 010c 	add.w	r1, r5, #12
 800a0b4:	4683      	mov	fp, r0
 800a0b6:	0092      	lsls	r2, r2, #2
 800a0b8:	300c      	adds	r0, #12
 800a0ba:	f000 f909 	bl	800a2d0 <memcpy>
 800a0be:	4629      	mov	r1, r5
 800a0c0:	9802      	ldr	r0, [sp, #8]
 800a0c2:	f000 f944 	bl	800a34e <_Bfree>
 800a0c6:	465d      	mov	r5, fp
 800a0c8:	692b      	ldr	r3, [r5, #16]
 800a0ca:	1c5a      	adds	r2, r3, #1
 800a0cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a0d0:	612a      	str	r2, [r5, #16]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	615a      	str	r2, [r3, #20]
 800a0d6:	e7c2      	b.n	800a05e <__gethex+0x390>
 800a0d8:	692a      	ldr	r2, [r5, #16]
 800a0da:	454a      	cmp	r2, r9
 800a0dc:	dd0b      	ble.n	800a0f6 <__gethex+0x428>
 800a0de:	2101      	movs	r1, #1
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f7ff fda5 	bl	8009c30 <rshift>
 800a0e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ea:	3401      	adds	r4, #1
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	f6ff aed9 	blt.w	8009ea4 <__gethex+0x1d6>
 800a0f2:	2701      	movs	r7, #1
 800a0f4:	e7c7      	b.n	800a086 <__gethex+0x3b8>
 800a0f6:	f016 061f 	ands.w	r6, r6, #31
 800a0fa:	d0fa      	beq.n	800a0f2 <__gethex+0x424>
 800a0fc:	449a      	add	sl, r3
 800a0fe:	f1c6 0620 	rsb	r6, r6, #32
 800a102:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a106:	f000 f9b2 	bl	800a46e <__hi0bits>
 800a10a:	42b0      	cmp	r0, r6
 800a10c:	dbe7      	blt.n	800a0de <__gethex+0x410>
 800a10e:	e7f0      	b.n	800a0f2 <__gethex+0x424>

0800a110 <L_shift>:
 800a110:	f1c2 0208 	rsb	r2, r2, #8
 800a114:	0092      	lsls	r2, r2, #2
 800a116:	b570      	push	{r4, r5, r6, lr}
 800a118:	f1c2 0620 	rsb	r6, r2, #32
 800a11c:	6843      	ldr	r3, [r0, #4]
 800a11e:	6804      	ldr	r4, [r0, #0]
 800a120:	fa03 f506 	lsl.w	r5, r3, r6
 800a124:	432c      	orrs	r4, r5
 800a126:	40d3      	lsrs	r3, r2
 800a128:	6004      	str	r4, [r0, #0]
 800a12a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a12e:	4288      	cmp	r0, r1
 800a130:	d3f4      	bcc.n	800a11c <L_shift+0xc>
 800a132:	bd70      	pop	{r4, r5, r6, pc}

0800a134 <__match>:
 800a134:	b530      	push	{r4, r5, lr}
 800a136:	6803      	ldr	r3, [r0, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a13e:	b914      	cbnz	r4, 800a146 <__match+0x12>
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	2001      	movs	r0, #1
 800a144:	bd30      	pop	{r4, r5, pc}
 800a146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a14e:	2d19      	cmp	r5, #25
 800a150:	bf98      	it	ls
 800a152:	3220      	addls	r2, #32
 800a154:	42a2      	cmp	r2, r4
 800a156:	d0f0      	beq.n	800a13a <__match+0x6>
 800a158:	2000      	movs	r0, #0
 800a15a:	e7f3      	b.n	800a144 <__match+0x10>

0800a15c <__hexnan>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	680b      	ldr	r3, [r1, #0]
 800a162:	6801      	ldr	r1, [r0, #0]
 800a164:	115f      	asrs	r7, r3, #5
 800a166:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a16a:	f013 031f 	ands.w	r3, r3, #31
 800a16e:	b087      	sub	sp, #28
 800a170:	bf18      	it	ne
 800a172:	3704      	addne	r7, #4
 800a174:	2500      	movs	r5, #0
 800a176:	1f3e      	subs	r6, r7, #4
 800a178:	4682      	mov	sl, r0
 800a17a:	4690      	mov	r8, r2
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	f847 5c04 	str.w	r5, [r7, #-4]
 800a182:	46b1      	mov	r9, r6
 800a184:	4634      	mov	r4, r6
 800a186:	9502      	str	r5, [sp, #8]
 800a188:	46ab      	mov	fp, r5
 800a18a:	784a      	ldrb	r2, [r1, #1]
 800a18c:	1c4b      	adds	r3, r1, #1
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	b342      	cbz	r2, 800a1e4 <__hexnan+0x88>
 800a192:	4610      	mov	r0, r2
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	9204      	str	r2, [sp, #16]
 800a198:	f7ff fd84 	bl	8009ca4 <__hexdig_fun>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d143      	bne.n	800a228 <__hexnan+0xcc>
 800a1a0:	9a04      	ldr	r2, [sp, #16]
 800a1a2:	9905      	ldr	r1, [sp, #20]
 800a1a4:	2a20      	cmp	r2, #32
 800a1a6:	d818      	bhi.n	800a1da <__hexnan+0x7e>
 800a1a8:	9b02      	ldr	r3, [sp, #8]
 800a1aa:	459b      	cmp	fp, r3
 800a1ac:	dd13      	ble.n	800a1d6 <__hexnan+0x7a>
 800a1ae:	454c      	cmp	r4, r9
 800a1b0:	d206      	bcs.n	800a1c0 <__hexnan+0x64>
 800a1b2:	2d07      	cmp	r5, #7
 800a1b4:	dc04      	bgt.n	800a1c0 <__hexnan+0x64>
 800a1b6:	462a      	mov	r2, r5
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f7ff ffa8 	bl	800a110 <L_shift>
 800a1c0:	4544      	cmp	r4, r8
 800a1c2:	d944      	bls.n	800a24e <__hexnan+0xf2>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f1a4 0904 	sub.w	r9, r4, #4
 800a1ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a1d2:	464c      	mov	r4, r9
 800a1d4:	461d      	mov	r5, r3
 800a1d6:	9903      	ldr	r1, [sp, #12]
 800a1d8:	e7d7      	b.n	800a18a <__hexnan+0x2e>
 800a1da:	2a29      	cmp	r2, #41	; 0x29
 800a1dc:	d14a      	bne.n	800a274 <__hexnan+0x118>
 800a1de:	3102      	adds	r1, #2
 800a1e0:	f8ca 1000 	str.w	r1, [sl]
 800a1e4:	f1bb 0f00 	cmp.w	fp, #0
 800a1e8:	d044      	beq.n	800a274 <__hexnan+0x118>
 800a1ea:	454c      	cmp	r4, r9
 800a1ec:	d206      	bcs.n	800a1fc <__hexnan+0xa0>
 800a1ee:	2d07      	cmp	r5, #7
 800a1f0:	dc04      	bgt.n	800a1fc <__hexnan+0xa0>
 800a1f2:	462a      	mov	r2, r5
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff ff8a 	bl	800a110 <L_shift>
 800a1fc:	4544      	cmp	r4, r8
 800a1fe:	d928      	bls.n	800a252 <__hexnan+0xf6>
 800a200:	4643      	mov	r3, r8
 800a202:	f854 2b04 	ldr.w	r2, [r4], #4
 800a206:	f843 2b04 	str.w	r2, [r3], #4
 800a20a:	42a6      	cmp	r6, r4
 800a20c:	d2f9      	bcs.n	800a202 <__hexnan+0xa6>
 800a20e:	2200      	movs	r2, #0
 800a210:	f843 2b04 	str.w	r2, [r3], #4
 800a214:	429e      	cmp	r6, r3
 800a216:	d2fb      	bcs.n	800a210 <__hexnan+0xb4>
 800a218:	6833      	ldr	r3, [r6, #0]
 800a21a:	b91b      	cbnz	r3, 800a224 <__hexnan+0xc8>
 800a21c:	4546      	cmp	r6, r8
 800a21e:	d127      	bne.n	800a270 <__hexnan+0x114>
 800a220:	2301      	movs	r3, #1
 800a222:	6033      	str	r3, [r6, #0]
 800a224:	2005      	movs	r0, #5
 800a226:	e026      	b.n	800a276 <__hexnan+0x11a>
 800a228:	3501      	adds	r5, #1
 800a22a:	2d08      	cmp	r5, #8
 800a22c:	f10b 0b01 	add.w	fp, fp, #1
 800a230:	dd06      	ble.n	800a240 <__hexnan+0xe4>
 800a232:	4544      	cmp	r4, r8
 800a234:	d9cf      	bls.n	800a1d6 <__hexnan+0x7a>
 800a236:	2300      	movs	r3, #0
 800a238:	f844 3c04 	str.w	r3, [r4, #-4]
 800a23c:	2501      	movs	r5, #1
 800a23e:	3c04      	subs	r4, #4
 800a240:	6822      	ldr	r2, [r4, #0]
 800a242:	f000 000f 	and.w	r0, r0, #15
 800a246:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a24a:	6020      	str	r0, [r4, #0]
 800a24c:	e7c3      	b.n	800a1d6 <__hexnan+0x7a>
 800a24e:	2508      	movs	r5, #8
 800a250:	e7c1      	b.n	800a1d6 <__hexnan+0x7a>
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0df      	beq.n	800a218 <__hexnan+0xbc>
 800a258:	f04f 32ff 	mov.w	r2, #4294967295
 800a25c:	f1c3 0320 	rsb	r3, r3, #32
 800a260:	fa22 f303 	lsr.w	r3, r2, r3
 800a264:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a268:	401a      	ands	r2, r3
 800a26a:	f847 2c04 	str.w	r2, [r7, #-4]
 800a26e:	e7d3      	b.n	800a218 <__hexnan+0xbc>
 800a270:	3e04      	subs	r6, #4
 800a272:	e7d1      	b.n	800a218 <__hexnan+0xbc>
 800a274:	2004      	movs	r0, #4
 800a276:	b007      	add	sp, #28
 800a278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a27c <__localeconv_l>:
 800a27c:	30f0      	adds	r0, #240	; 0xf0
 800a27e:	4770      	bx	lr

0800a280 <_localeconv_r>:
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <_localeconv_r+0x14>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6a18      	ldr	r0, [r3, #32]
 800a286:	4b04      	ldr	r3, [pc, #16]	; (800a298 <_localeconv_r+0x18>)
 800a288:	2800      	cmp	r0, #0
 800a28a:	bf08      	it	eq
 800a28c:	4618      	moveq	r0, r3
 800a28e:	30f0      	adds	r0, #240	; 0xf0
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20002eec 	.word	0x20002eec
 800a298:	20002f50 	.word	0x20002f50

0800a29c <malloc>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <malloc+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f000 bc7b 	b.w	800ab9c <_malloc_r>
 800a2a6:	bf00      	nop
 800a2a8:	20002eec 	.word	0x20002eec

0800a2ac <__ascii_mbtowc>:
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	b901      	cbnz	r1, 800a2b2 <__ascii_mbtowc+0x6>
 800a2b0:	a901      	add	r1, sp, #4
 800a2b2:	b142      	cbz	r2, 800a2c6 <__ascii_mbtowc+0x1a>
 800a2b4:	b14b      	cbz	r3, 800a2ca <__ascii_mbtowc+0x1e>
 800a2b6:	7813      	ldrb	r3, [r2, #0]
 800a2b8:	600b      	str	r3, [r1, #0]
 800a2ba:	7812      	ldrb	r2, [r2, #0]
 800a2bc:	1c10      	adds	r0, r2, #0
 800a2be:	bf18      	it	ne
 800a2c0:	2001      	movne	r0, #1
 800a2c2:	b002      	add	sp, #8
 800a2c4:	4770      	bx	lr
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	e7fb      	b.n	800a2c2 <__ascii_mbtowc+0x16>
 800a2ca:	f06f 0001 	mvn.w	r0, #1
 800a2ce:	e7f8      	b.n	800a2c2 <__ascii_mbtowc+0x16>

0800a2d0 <memcpy>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	1e43      	subs	r3, r0, #1
 800a2d4:	440a      	add	r2, r1
 800a2d6:	4291      	cmp	r1, r2
 800a2d8:	d100      	bne.n	800a2dc <memcpy+0xc>
 800a2da:	bd10      	pop	{r4, pc}
 800a2dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2e4:	e7f7      	b.n	800a2d6 <memcpy+0x6>

0800a2e6 <_Balloc>:
 800a2e6:	b570      	push	{r4, r5, r6, lr}
 800a2e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	460e      	mov	r6, r1
 800a2ee:	b93d      	cbnz	r5, 800a300 <_Balloc+0x1a>
 800a2f0:	2010      	movs	r0, #16
 800a2f2:	f7ff ffd3 	bl	800a29c <malloc>
 800a2f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a2f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2fc:	6005      	str	r5, [r0, #0]
 800a2fe:	60c5      	str	r5, [r0, #12]
 800a300:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a302:	68eb      	ldr	r3, [r5, #12]
 800a304:	b183      	cbz	r3, 800a328 <_Balloc+0x42>
 800a306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a30e:	b9b8      	cbnz	r0, 800a340 <_Balloc+0x5a>
 800a310:	2101      	movs	r1, #1
 800a312:	fa01 f506 	lsl.w	r5, r1, r6
 800a316:	1d6a      	adds	r2, r5, #5
 800a318:	0092      	lsls	r2, r2, #2
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 fbe1 	bl	800aae2 <_calloc_r>
 800a320:	b160      	cbz	r0, 800a33c <_Balloc+0x56>
 800a322:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a326:	e00e      	b.n	800a346 <_Balloc+0x60>
 800a328:	2221      	movs	r2, #33	; 0x21
 800a32a:	2104      	movs	r1, #4
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 fbd8 	bl	800aae2 <_calloc_r>
 800a332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a334:	60e8      	str	r0, [r5, #12]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e4      	bne.n	800a306 <_Balloc+0x20>
 800a33c:	2000      	movs	r0, #0
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	6802      	ldr	r2, [r0, #0]
 800a342:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a346:	2300      	movs	r3, #0
 800a348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a34c:	e7f7      	b.n	800a33e <_Balloc+0x58>

0800a34e <_Bfree>:
 800a34e:	b570      	push	{r4, r5, r6, lr}
 800a350:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a352:	4606      	mov	r6, r0
 800a354:	460d      	mov	r5, r1
 800a356:	b93c      	cbnz	r4, 800a368 <_Bfree+0x1a>
 800a358:	2010      	movs	r0, #16
 800a35a:	f7ff ff9f 	bl	800a29c <malloc>
 800a35e:	6270      	str	r0, [r6, #36]	; 0x24
 800a360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a364:	6004      	str	r4, [r0, #0]
 800a366:	60c4      	str	r4, [r0, #12]
 800a368:	b13d      	cbz	r5, 800a37a <_Bfree+0x2c>
 800a36a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a36c:	686a      	ldr	r2, [r5, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a374:	6029      	str	r1, [r5, #0]
 800a376:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a37a:	bd70      	pop	{r4, r5, r6, pc}

0800a37c <__multadd>:
 800a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a380:	690d      	ldr	r5, [r1, #16]
 800a382:	461f      	mov	r7, r3
 800a384:	4606      	mov	r6, r0
 800a386:	460c      	mov	r4, r1
 800a388:	f101 0c14 	add.w	ip, r1, #20
 800a38c:	2300      	movs	r3, #0
 800a38e:	f8dc 0000 	ldr.w	r0, [ip]
 800a392:	b281      	uxth	r1, r0
 800a394:	fb02 7101 	mla	r1, r2, r1, r7
 800a398:	0c0f      	lsrs	r7, r1, #16
 800a39a:	0c00      	lsrs	r0, r0, #16
 800a39c:	fb02 7000 	mla	r0, r2, r0, r7
 800a3a0:	b289      	uxth	r1, r1
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a3a8:	429d      	cmp	r5, r3
 800a3aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a3ae:	f84c 1b04 	str.w	r1, [ip], #4
 800a3b2:	dcec      	bgt.n	800a38e <__multadd+0x12>
 800a3b4:	b1d7      	cbz	r7, 800a3ec <__multadd+0x70>
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dc12      	bgt.n	800a3e2 <__multadd+0x66>
 800a3bc:	6861      	ldr	r1, [r4, #4]
 800a3be:	4630      	mov	r0, r6
 800a3c0:	3101      	adds	r1, #1
 800a3c2:	f7ff ff90 	bl	800a2e6 <_Balloc>
 800a3c6:	6922      	ldr	r2, [r4, #16]
 800a3c8:	3202      	adds	r2, #2
 800a3ca:	f104 010c 	add.w	r1, r4, #12
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	0092      	lsls	r2, r2, #2
 800a3d2:	300c      	adds	r0, #12
 800a3d4:	f7ff ff7c 	bl	800a2d0 <memcpy>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7ff ffb7 	bl	800a34e <_Bfree>
 800a3e0:	4644      	mov	r4, r8
 800a3e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3e6:	3501      	adds	r5, #1
 800a3e8:	615f      	str	r7, [r3, #20]
 800a3ea:	6125      	str	r5, [r4, #16]
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3f2 <__s2b>:
 800a3f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	4615      	mov	r5, r2
 800a3fa:	461f      	mov	r7, r3
 800a3fc:	2209      	movs	r2, #9
 800a3fe:	3308      	adds	r3, #8
 800a400:	4606      	mov	r6, r0
 800a402:	fb93 f3f2 	sdiv	r3, r3, r2
 800a406:	2100      	movs	r1, #0
 800a408:	2201      	movs	r2, #1
 800a40a:	429a      	cmp	r2, r3
 800a40c:	db20      	blt.n	800a450 <__s2b+0x5e>
 800a40e:	4630      	mov	r0, r6
 800a410:	f7ff ff69 	bl	800a2e6 <_Balloc>
 800a414:	9b08      	ldr	r3, [sp, #32]
 800a416:	6143      	str	r3, [r0, #20]
 800a418:	2d09      	cmp	r5, #9
 800a41a:	f04f 0301 	mov.w	r3, #1
 800a41e:	6103      	str	r3, [r0, #16]
 800a420:	dd19      	ble.n	800a456 <__s2b+0x64>
 800a422:	f104 0809 	add.w	r8, r4, #9
 800a426:	46c1      	mov	r9, r8
 800a428:	442c      	add	r4, r5
 800a42a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a42e:	4601      	mov	r1, r0
 800a430:	3b30      	subs	r3, #48	; 0x30
 800a432:	220a      	movs	r2, #10
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ffa1 	bl	800a37c <__multadd>
 800a43a:	45a1      	cmp	r9, r4
 800a43c:	d1f5      	bne.n	800a42a <__s2b+0x38>
 800a43e:	eb08 0405 	add.w	r4, r8, r5
 800a442:	3c08      	subs	r4, #8
 800a444:	1b2d      	subs	r5, r5, r4
 800a446:	1963      	adds	r3, r4, r5
 800a448:	42bb      	cmp	r3, r7
 800a44a:	db07      	blt.n	800a45c <__s2b+0x6a>
 800a44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a450:	0052      	lsls	r2, r2, #1
 800a452:	3101      	adds	r1, #1
 800a454:	e7d9      	b.n	800a40a <__s2b+0x18>
 800a456:	340a      	adds	r4, #10
 800a458:	2509      	movs	r5, #9
 800a45a:	e7f3      	b.n	800a444 <__s2b+0x52>
 800a45c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a460:	4601      	mov	r1, r0
 800a462:	3b30      	subs	r3, #48	; 0x30
 800a464:	220a      	movs	r2, #10
 800a466:	4630      	mov	r0, r6
 800a468:	f7ff ff88 	bl	800a37c <__multadd>
 800a46c:	e7eb      	b.n	800a446 <__s2b+0x54>

0800a46e <__hi0bits>:
 800a46e:	0c02      	lsrs	r2, r0, #16
 800a470:	0412      	lsls	r2, r2, #16
 800a472:	4603      	mov	r3, r0
 800a474:	b9b2      	cbnz	r2, 800a4a4 <__hi0bits+0x36>
 800a476:	0403      	lsls	r3, r0, #16
 800a478:	2010      	movs	r0, #16
 800a47a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a47e:	bf04      	itt	eq
 800a480:	021b      	lsleq	r3, r3, #8
 800a482:	3008      	addeq	r0, #8
 800a484:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a488:	bf04      	itt	eq
 800a48a:	011b      	lsleq	r3, r3, #4
 800a48c:	3004      	addeq	r0, #4
 800a48e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a492:	bf04      	itt	eq
 800a494:	009b      	lsleq	r3, r3, #2
 800a496:	3002      	addeq	r0, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	db06      	blt.n	800a4aa <__hi0bits+0x3c>
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	d503      	bpl.n	800a4a8 <__hi0bits+0x3a>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	4770      	bx	lr
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	e7e8      	b.n	800a47a <__hi0bits+0xc>
 800a4a8:	2020      	movs	r0, #32
 800a4aa:	4770      	bx	lr

0800a4ac <__lo0bits>:
 800a4ac:	6803      	ldr	r3, [r0, #0]
 800a4ae:	f013 0207 	ands.w	r2, r3, #7
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	d00b      	beq.n	800a4ce <__lo0bits+0x22>
 800a4b6:	07da      	lsls	r2, r3, #31
 800a4b8:	d423      	bmi.n	800a502 <__lo0bits+0x56>
 800a4ba:	0798      	lsls	r0, r3, #30
 800a4bc:	bf49      	itett	mi
 800a4be:	085b      	lsrmi	r3, r3, #1
 800a4c0:	089b      	lsrpl	r3, r3, #2
 800a4c2:	2001      	movmi	r0, #1
 800a4c4:	600b      	strmi	r3, [r1, #0]
 800a4c6:	bf5c      	itt	pl
 800a4c8:	600b      	strpl	r3, [r1, #0]
 800a4ca:	2002      	movpl	r0, #2
 800a4cc:	4770      	bx	lr
 800a4ce:	b298      	uxth	r0, r3
 800a4d0:	b9a8      	cbnz	r0, 800a4fe <__lo0bits+0x52>
 800a4d2:	0c1b      	lsrs	r3, r3, #16
 800a4d4:	2010      	movs	r0, #16
 800a4d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a4da:	bf04      	itt	eq
 800a4dc:	0a1b      	lsreq	r3, r3, #8
 800a4de:	3008      	addeq	r0, #8
 800a4e0:	071a      	lsls	r2, r3, #28
 800a4e2:	bf04      	itt	eq
 800a4e4:	091b      	lsreq	r3, r3, #4
 800a4e6:	3004      	addeq	r0, #4
 800a4e8:	079a      	lsls	r2, r3, #30
 800a4ea:	bf04      	itt	eq
 800a4ec:	089b      	lsreq	r3, r3, #2
 800a4ee:	3002      	addeq	r0, #2
 800a4f0:	07da      	lsls	r2, r3, #31
 800a4f2:	d402      	bmi.n	800a4fa <__lo0bits+0x4e>
 800a4f4:	085b      	lsrs	r3, r3, #1
 800a4f6:	d006      	beq.n	800a506 <__lo0bits+0x5a>
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	600b      	str	r3, [r1, #0]
 800a4fc:	4770      	bx	lr
 800a4fe:	4610      	mov	r0, r2
 800a500:	e7e9      	b.n	800a4d6 <__lo0bits+0x2a>
 800a502:	2000      	movs	r0, #0
 800a504:	4770      	bx	lr
 800a506:	2020      	movs	r0, #32
 800a508:	4770      	bx	lr

0800a50a <__i2b>:
 800a50a:	b510      	push	{r4, lr}
 800a50c:	460c      	mov	r4, r1
 800a50e:	2101      	movs	r1, #1
 800a510:	f7ff fee9 	bl	800a2e6 <_Balloc>
 800a514:	2201      	movs	r2, #1
 800a516:	6144      	str	r4, [r0, #20]
 800a518:	6102      	str	r2, [r0, #16]
 800a51a:	bd10      	pop	{r4, pc}

0800a51c <__multiply>:
 800a51c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	4614      	mov	r4, r2
 800a522:	690a      	ldr	r2, [r1, #16]
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	429a      	cmp	r2, r3
 800a528:	bfb8      	it	lt
 800a52a:	460b      	movlt	r3, r1
 800a52c:	4688      	mov	r8, r1
 800a52e:	bfbc      	itt	lt
 800a530:	46a0      	movlt	r8, r4
 800a532:	461c      	movlt	r4, r3
 800a534:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a538:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a53c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a540:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a544:	eb07 0609 	add.w	r6, r7, r9
 800a548:	42b3      	cmp	r3, r6
 800a54a:	bfb8      	it	lt
 800a54c:	3101      	addlt	r1, #1
 800a54e:	f7ff feca 	bl	800a2e6 <_Balloc>
 800a552:	f100 0514 	add.w	r5, r0, #20
 800a556:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a55a:	462b      	mov	r3, r5
 800a55c:	2200      	movs	r2, #0
 800a55e:	4573      	cmp	r3, lr
 800a560:	d316      	bcc.n	800a590 <__multiply+0x74>
 800a562:	f104 0214 	add.w	r2, r4, #20
 800a566:	f108 0114 	add.w	r1, r8, #20
 800a56a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a56e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	9201      	str	r2, [sp, #4]
 800a578:	4293      	cmp	r3, r2
 800a57a:	d80c      	bhi.n	800a596 <__multiply+0x7a>
 800a57c:	2e00      	cmp	r6, #0
 800a57e:	dd03      	ble.n	800a588 <__multiply+0x6c>
 800a580:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a584:	2b00      	cmp	r3, #0
 800a586:	d05d      	beq.n	800a644 <__multiply+0x128>
 800a588:	6106      	str	r6, [r0, #16]
 800a58a:	b003      	add	sp, #12
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	f843 2b04 	str.w	r2, [r3], #4
 800a594:	e7e3      	b.n	800a55e <__multiply+0x42>
 800a596:	f8b2 b000 	ldrh.w	fp, [r2]
 800a59a:	f1bb 0f00 	cmp.w	fp, #0
 800a59e:	d023      	beq.n	800a5e8 <__multiply+0xcc>
 800a5a0:	4689      	mov	r9, r1
 800a5a2:	46ac      	mov	ip, r5
 800a5a4:	f04f 0800 	mov.w	r8, #0
 800a5a8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a5ac:	f8dc a000 	ldr.w	sl, [ip]
 800a5b0:	b2a3      	uxth	r3, r4
 800a5b2:	fa1f fa8a 	uxth.w	sl, sl
 800a5b6:	fb0b a303 	mla	r3, fp, r3, sl
 800a5ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5be:	f8dc 4000 	ldr.w	r4, [ip]
 800a5c2:	4443      	add	r3, r8
 800a5c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5c8:	fb0b 840a 	mla	r4, fp, sl, r8
 800a5cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a5d0:	46e2      	mov	sl, ip
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a5d8:	454f      	cmp	r7, r9
 800a5da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5de:	f84a 3b04 	str.w	r3, [sl], #4
 800a5e2:	d82b      	bhi.n	800a63c <__multiply+0x120>
 800a5e4:	f8cc 8004 	str.w	r8, [ip, #4]
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a5ee:	3204      	adds	r2, #4
 800a5f0:	f1ba 0f00 	cmp.w	sl, #0
 800a5f4:	d020      	beq.n	800a638 <__multiply+0x11c>
 800a5f6:	682b      	ldr	r3, [r5, #0]
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	46a8      	mov	r8, r5
 800a5fc:	f04f 0b00 	mov.w	fp, #0
 800a600:	f8b9 c000 	ldrh.w	ip, [r9]
 800a604:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a608:	fb0a 440c 	mla	r4, sl, ip, r4
 800a60c:	445c      	add	r4, fp
 800a60e:	46c4      	mov	ip, r8
 800a610:	b29b      	uxth	r3, r3
 800a612:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a616:	f84c 3b04 	str.w	r3, [ip], #4
 800a61a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a61e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	fb0a b303 	mla	r3, sl, r3, fp
 800a628:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a62c:	454f      	cmp	r7, r9
 800a62e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a632:	d805      	bhi.n	800a640 <__multiply+0x124>
 800a634:	f8c8 3004 	str.w	r3, [r8, #4]
 800a638:	3504      	adds	r5, #4
 800a63a:	e79b      	b.n	800a574 <__multiply+0x58>
 800a63c:	46d4      	mov	ip, sl
 800a63e:	e7b3      	b.n	800a5a8 <__multiply+0x8c>
 800a640:	46e0      	mov	r8, ip
 800a642:	e7dd      	b.n	800a600 <__multiply+0xe4>
 800a644:	3e01      	subs	r6, #1
 800a646:	e799      	b.n	800a57c <__multiply+0x60>

0800a648 <__pow5mult>:
 800a648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a64c:	4615      	mov	r5, r2
 800a64e:	f012 0203 	ands.w	r2, r2, #3
 800a652:	4606      	mov	r6, r0
 800a654:	460f      	mov	r7, r1
 800a656:	d007      	beq.n	800a668 <__pow5mult+0x20>
 800a658:	3a01      	subs	r2, #1
 800a65a:	4c21      	ldr	r4, [pc, #132]	; (800a6e0 <__pow5mult+0x98>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a662:	f7ff fe8b 	bl	800a37c <__multadd>
 800a666:	4607      	mov	r7, r0
 800a668:	10ad      	asrs	r5, r5, #2
 800a66a:	d035      	beq.n	800a6d8 <__pow5mult+0x90>
 800a66c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a66e:	b93c      	cbnz	r4, 800a680 <__pow5mult+0x38>
 800a670:	2010      	movs	r0, #16
 800a672:	f7ff fe13 	bl	800a29c <malloc>
 800a676:	6270      	str	r0, [r6, #36]	; 0x24
 800a678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a67c:	6004      	str	r4, [r0, #0]
 800a67e:	60c4      	str	r4, [r0, #12]
 800a680:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a688:	b94c      	cbnz	r4, 800a69e <__pow5mult+0x56>
 800a68a:	f240 2171 	movw	r1, #625	; 0x271
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ff3b 	bl	800a50a <__i2b>
 800a694:	2300      	movs	r3, #0
 800a696:	f8c8 0008 	str.w	r0, [r8, #8]
 800a69a:	4604      	mov	r4, r0
 800a69c:	6003      	str	r3, [r0, #0]
 800a69e:	f04f 0800 	mov.w	r8, #0
 800a6a2:	07eb      	lsls	r3, r5, #31
 800a6a4:	d50a      	bpl.n	800a6bc <__pow5mult+0x74>
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ff36 	bl	800a51c <__multiply>
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	4681      	mov	r9, r0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff fe4a 	bl	800a34e <_Bfree>
 800a6ba:	464f      	mov	r7, r9
 800a6bc:	106d      	asrs	r5, r5, #1
 800a6be:	d00b      	beq.n	800a6d8 <__pow5mult+0x90>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	b938      	cbnz	r0, 800a6d4 <__pow5mult+0x8c>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff ff27 	bl	800a51c <__multiply>
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	f8c0 8000 	str.w	r8, [r0]
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	e7e4      	b.n	800a6a2 <__pow5mult+0x5a>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800dc68 	.word	0x0800dc68

0800a6e4 <__lshift>:
 800a6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	6849      	ldr	r1, [r1, #4]
 800a6f2:	eb0a 0903 	add.w	r9, sl, r3
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	4616      	mov	r6, r2
 800a6fc:	f109 0501 	add.w	r5, r9, #1
 800a700:	42ab      	cmp	r3, r5
 800a702:	db32      	blt.n	800a76a <__lshift+0x86>
 800a704:	4638      	mov	r0, r7
 800a706:	f7ff fdee 	bl	800a2e6 <_Balloc>
 800a70a:	2300      	movs	r3, #0
 800a70c:	4680      	mov	r8, r0
 800a70e:	f100 0114 	add.w	r1, r0, #20
 800a712:	461a      	mov	r2, r3
 800a714:	4553      	cmp	r3, sl
 800a716:	db2b      	blt.n	800a770 <__lshift+0x8c>
 800a718:	6920      	ldr	r0, [r4, #16]
 800a71a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a71e:	f104 0314 	add.w	r3, r4, #20
 800a722:	f016 021f 	ands.w	r2, r6, #31
 800a726:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a72a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a72e:	d025      	beq.n	800a77c <__lshift+0x98>
 800a730:	f1c2 0e20 	rsb	lr, r2, #32
 800a734:	2000      	movs	r0, #0
 800a736:	681e      	ldr	r6, [r3, #0]
 800a738:	468a      	mov	sl, r1
 800a73a:	4096      	lsls	r6, r2
 800a73c:	4330      	orrs	r0, r6
 800a73e:	f84a 0b04 	str.w	r0, [sl], #4
 800a742:	f853 0b04 	ldr.w	r0, [r3], #4
 800a746:	459c      	cmp	ip, r3
 800a748:	fa20 f00e 	lsr.w	r0, r0, lr
 800a74c:	d814      	bhi.n	800a778 <__lshift+0x94>
 800a74e:	6048      	str	r0, [r1, #4]
 800a750:	b108      	cbz	r0, 800a756 <__lshift+0x72>
 800a752:	f109 0502 	add.w	r5, r9, #2
 800a756:	3d01      	subs	r5, #1
 800a758:	4638      	mov	r0, r7
 800a75a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a75e:	4621      	mov	r1, r4
 800a760:	f7ff fdf5 	bl	800a34e <_Bfree>
 800a764:	4640      	mov	r0, r8
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	3101      	adds	r1, #1
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	e7c7      	b.n	800a700 <__lshift+0x1c>
 800a770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a774:	3301      	adds	r3, #1
 800a776:	e7cd      	b.n	800a714 <__lshift+0x30>
 800a778:	4651      	mov	r1, sl
 800a77a:	e7dc      	b.n	800a736 <__lshift+0x52>
 800a77c:	3904      	subs	r1, #4
 800a77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a782:	f841 2f04 	str.w	r2, [r1, #4]!
 800a786:	459c      	cmp	ip, r3
 800a788:	d8f9      	bhi.n	800a77e <__lshift+0x9a>
 800a78a:	e7e4      	b.n	800a756 <__lshift+0x72>

0800a78c <__mcmp>:
 800a78c:	6903      	ldr	r3, [r0, #16]
 800a78e:	690a      	ldr	r2, [r1, #16]
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	b530      	push	{r4, r5, lr}
 800a794:	d10c      	bne.n	800a7b0 <__mcmp+0x24>
 800a796:	0092      	lsls	r2, r2, #2
 800a798:	3014      	adds	r0, #20
 800a79a:	3114      	adds	r1, #20
 800a79c:	1884      	adds	r4, r0, r2
 800a79e:	4411      	add	r1, r2
 800a7a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7a8:	4295      	cmp	r5, r2
 800a7aa:	d003      	beq.n	800a7b4 <__mcmp+0x28>
 800a7ac:	d305      	bcc.n	800a7ba <__mcmp+0x2e>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	bd30      	pop	{r4, r5, pc}
 800a7b4:	42a0      	cmp	r0, r4
 800a7b6:	d3f3      	bcc.n	800a7a0 <__mcmp+0x14>
 800a7b8:	e7fa      	b.n	800a7b0 <__mcmp+0x24>
 800a7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a7be:	e7f7      	b.n	800a7b0 <__mcmp+0x24>

0800a7c0 <__mdiff>:
 800a7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c4:	460d      	mov	r5, r1
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	4614      	mov	r4, r2
 800a7ce:	f7ff ffdd 	bl	800a78c <__mcmp>
 800a7d2:	1e06      	subs	r6, r0, #0
 800a7d4:	d108      	bne.n	800a7e8 <__mdiff+0x28>
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff fd84 	bl	800a2e6 <_Balloc>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e8:	bfa4      	itt	ge
 800a7ea:	4623      	movge	r3, r4
 800a7ec:	462c      	movge	r4, r5
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	6861      	ldr	r1, [r4, #4]
 800a7f2:	bfa6      	itte	ge
 800a7f4:	461d      	movge	r5, r3
 800a7f6:	2600      	movge	r6, #0
 800a7f8:	2601      	movlt	r6, #1
 800a7fa:	f7ff fd74 	bl	800a2e6 <_Balloc>
 800a7fe:	692b      	ldr	r3, [r5, #16]
 800a800:	60c6      	str	r6, [r0, #12]
 800a802:	6926      	ldr	r6, [r4, #16]
 800a804:	f105 0914 	add.w	r9, r5, #20
 800a808:	f104 0214 	add.w	r2, r4, #20
 800a80c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a810:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a814:	f100 0514 	add.w	r5, r0, #20
 800a818:	f04f 0e00 	mov.w	lr, #0
 800a81c:	f852 ab04 	ldr.w	sl, [r2], #4
 800a820:	f859 4b04 	ldr.w	r4, [r9], #4
 800a824:	fa1e f18a 	uxtah	r1, lr, sl
 800a828:	b2a3      	uxth	r3, r4
 800a82a:	1ac9      	subs	r1, r1, r3
 800a82c:	0c23      	lsrs	r3, r4, #16
 800a82e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a832:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a836:	b289      	uxth	r1, r1
 800a838:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a83c:	45c8      	cmp	r8, r9
 800a83e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a842:	4694      	mov	ip, r2
 800a844:	f845 3b04 	str.w	r3, [r5], #4
 800a848:	d8e8      	bhi.n	800a81c <__mdiff+0x5c>
 800a84a:	45bc      	cmp	ip, r7
 800a84c:	d304      	bcc.n	800a858 <__mdiff+0x98>
 800a84e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a852:	b183      	cbz	r3, 800a876 <__mdiff+0xb6>
 800a854:	6106      	str	r6, [r0, #16]
 800a856:	e7c5      	b.n	800a7e4 <__mdiff+0x24>
 800a858:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a85c:	fa1e f381 	uxtah	r3, lr, r1
 800a860:	141a      	asrs	r2, r3, #16
 800a862:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a866:	b29b      	uxth	r3, r3
 800a868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a86c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a870:	f845 3b04 	str.w	r3, [r5], #4
 800a874:	e7e9      	b.n	800a84a <__mdiff+0x8a>
 800a876:	3e01      	subs	r6, #1
 800a878:	e7e9      	b.n	800a84e <__mdiff+0x8e>
	...

0800a87c <__ulp>:
 800a87c:	4b12      	ldr	r3, [pc, #72]	; (800a8c8 <__ulp+0x4c>)
 800a87e:	ee10 2a90 	vmov	r2, s1
 800a882:	401a      	ands	r2, r3
 800a884:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	dd04      	ble.n	800a896 <__ulp+0x1a>
 800a88c:	2000      	movs	r0, #0
 800a88e:	4619      	mov	r1, r3
 800a890:	ec41 0b10 	vmov	d0, r0, r1
 800a894:	4770      	bx	lr
 800a896:	425b      	negs	r3, r3
 800a898:	151b      	asrs	r3, r3, #20
 800a89a:	2b13      	cmp	r3, #19
 800a89c:	f04f 0000 	mov.w	r0, #0
 800a8a0:	f04f 0100 	mov.w	r1, #0
 800a8a4:	dc04      	bgt.n	800a8b0 <__ulp+0x34>
 800a8a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a8aa:	fa42 f103 	asr.w	r1, r2, r3
 800a8ae:	e7ef      	b.n	800a890 <__ulp+0x14>
 800a8b0:	3b14      	subs	r3, #20
 800a8b2:	2b1e      	cmp	r3, #30
 800a8b4:	f04f 0201 	mov.w	r2, #1
 800a8b8:	bfda      	itte	le
 800a8ba:	f1c3 031f 	rsble	r3, r3, #31
 800a8be:	fa02 f303 	lslle.w	r3, r2, r3
 800a8c2:	4613      	movgt	r3, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	e7e3      	b.n	800a890 <__ulp+0x14>
 800a8c8:	7ff00000 	.word	0x7ff00000

0800a8cc <__b2d>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	6905      	ldr	r5, [r0, #16]
 800a8d0:	f100 0714 	add.w	r7, r0, #20
 800a8d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a8d8:	1f2e      	subs	r6, r5, #4
 800a8da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7ff fdc5 	bl	800a46e <__hi0bits>
 800a8e4:	f1c0 0320 	rsb	r3, r0, #32
 800a8e8:	280a      	cmp	r0, #10
 800a8ea:	600b      	str	r3, [r1, #0]
 800a8ec:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a964 <__b2d+0x98>
 800a8f0:	dc14      	bgt.n	800a91c <__b2d+0x50>
 800a8f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a8f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a8fa:	42b7      	cmp	r7, r6
 800a8fc:	ea41 030c 	orr.w	r3, r1, ip
 800a900:	bf34      	ite	cc
 800a902:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a906:	2100      	movcs	r1, #0
 800a908:	3015      	adds	r0, #21
 800a90a:	fa04 f000 	lsl.w	r0, r4, r0
 800a90e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a912:	ea40 0201 	orr.w	r2, r0, r1
 800a916:	ec43 2b10 	vmov	d0, r2, r3
 800a91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a91c:	42b7      	cmp	r7, r6
 800a91e:	bf3a      	itte	cc
 800a920:	f1a5 0608 	subcc.w	r6, r5, #8
 800a924:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a928:	2100      	movcs	r1, #0
 800a92a:	380b      	subs	r0, #11
 800a92c:	d015      	beq.n	800a95a <__b2d+0x8e>
 800a92e:	4084      	lsls	r4, r0
 800a930:	f1c0 0520 	rsb	r5, r0, #32
 800a934:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a938:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a93c:	42be      	cmp	r6, r7
 800a93e:	fa21 fc05 	lsr.w	ip, r1, r5
 800a942:	ea44 030c 	orr.w	r3, r4, ip
 800a946:	bf8c      	ite	hi
 800a948:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a94c:	2400      	movls	r4, #0
 800a94e:	fa01 f000 	lsl.w	r0, r1, r0
 800a952:	40ec      	lsrs	r4, r5
 800a954:	ea40 0204 	orr.w	r2, r0, r4
 800a958:	e7dd      	b.n	800a916 <__b2d+0x4a>
 800a95a:	ea44 030c 	orr.w	r3, r4, ip
 800a95e:	460a      	mov	r2, r1
 800a960:	e7d9      	b.n	800a916 <__b2d+0x4a>
 800a962:	bf00      	nop
 800a964:	3ff00000 	.word	0x3ff00000

0800a968 <__d2b>:
 800a968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a96c:	460e      	mov	r6, r1
 800a96e:	2101      	movs	r1, #1
 800a970:	ec59 8b10 	vmov	r8, r9, d0
 800a974:	4615      	mov	r5, r2
 800a976:	f7ff fcb6 	bl	800a2e6 <_Balloc>
 800a97a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a97e:	4607      	mov	r7, r0
 800a980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a984:	bb34      	cbnz	r4, 800a9d4 <__d2b+0x6c>
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	f1b8 0300 	subs.w	r3, r8, #0
 800a98c:	d027      	beq.n	800a9de <__d2b+0x76>
 800a98e:	a802      	add	r0, sp, #8
 800a990:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a994:	f7ff fd8a 	bl	800a4ac <__lo0bits>
 800a998:	9900      	ldr	r1, [sp, #0]
 800a99a:	b1f0      	cbz	r0, 800a9da <__d2b+0x72>
 800a99c:	9a01      	ldr	r2, [sp, #4]
 800a99e:	f1c0 0320 	rsb	r3, r0, #32
 800a9a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	40c2      	lsrs	r2, r0
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	9201      	str	r2, [sp, #4]
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	61bb      	str	r3, [r7, #24]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	bf14      	ite	ne
 800a9b6:	2102      	movne	r1, #2
 800a9b8:	2101      	moveq	r1, #1
 800a9ba:	6139      	str	r1, [r7, #16]
 800a9bc:	b1c4      	cbz	r4, 800a9f0 <__d2b+0x88>
 800a9be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a9c2:	4404      	add	r4, r0
 800a9c4:	6034      	str	r4, [r6, #0]
 800a9c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9ca:	6028      	str	r0, [r5, #0]
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	b003      	add	sp, #12
 800a9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9d8:	e7d5      	b.n	800a986 <__d2b+0x1e>
 800a9da:	6179      	str	r1, [r7, #20]
 800a9dc:	e7e7      	b.n	800a9ae <__d2b+0x46>
 800a9de:	a801      	add	r0, sp, #4
 800a9e0:	f7ff fd64 	bl	800a4ac <__lo0bits>
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	6139      	str	r1, [r7, #16]
 800a9ec:	3020      	adds	r0, #32
 800a9ee:	e7e5      	b.n	800a9bc <__d2b+0x54>
 800a9f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a9f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9f8:	6030      	str	r0, [r6, #0]
 800a9fa:	6918      	ldr	r0, [r3, #16]
 800a9fc:	f7ff fd37 	bl	800a46e <__hi0bits>
 800aa00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aa04:	e7e1      	b.n	800a9ca <__d2b+0x62>

0800aa06 <__ratio>:
 800aa06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	4688      	mov	r8, r1
 800aa0c:	4669      	mov	r1, sp
 800aa0e:	4681      	mov	r9, r0
 800aa10:	f7ff ff5c 	bl	800a8cc <__b2d>
 800aa14:	a901      	add	r1, sp, #4
 800aa16:	4640      	mov	r0, r8
 800aa18:	ec57 6b10 	vmov	r6, r7, d0
 800aa1c:	f7ff ff56 	bl	800a8cc <__b2d>
 800aa20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa28:	eba3 0c02 	sub.w	ip, r3, r2
 800aa2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa30:	1a9b      	subs	r3, r3, r2
 800aa32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa36:	ec5b ab10 	vmov	sl, fp, d0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	bfce      	itee	gt
 800aa3e:	463a      	movgt	r2, r7
 800aa40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa44:	465a      	movle	r2, fp
 800aa46:	4659      	mov	r1, fp
 800aa48:	463d      	mov	r5, r7
 800aa4a:	bfd4      	ite	le
 800aa4c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800aa50:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800aa54:	4630      	mov	r0, r6
 800aa56:	ee10 2a10 	vmov	r2, s0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7f5 ff1d 	bl	800089c <__aeabi_ddiv>
 800aa62:	ec41 0b10 	vmov	d0, r0, r1
 800aa66:	b003      	add	sp, #12
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa6c <__copybits>:
 800aa6c:	3901      	subs	r1, #1
 800aa6e:	b510      	push	{r4, lr}
 800aa70:	1149      	asrs	r1, r1, #5
 800aa72:	6914      	ldr	r4, [r2, #16]
 800aa74:	3101      	adds	r1, #1
 800aa76:	f102 0314 	add.w	r3, r2, #20
 800aa7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	4602      	mov	r2, r0
 800aa86:	d303      	bcc.n	800aa90 <__copybits+0x24>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	428a      	cmp	r2, r1
 800aa8c:	d305      	bcc.n	800aa9a <__copybits+0x2e>
 800aa8e:	bd10      	pop	{r4, pc}
 800aa90:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa94:	f840 2b04 	str.w	r2, [r0], #4
 800aa98:	e7f3      	b.n	800aa82 <__copybits+0x16>
 800aa9a:	f842 3b04 	str.w	r3, [r2], #4
 800aa9e:	e7f4      	b.n	800aa8a <__copybits+0x1e>

0800aaa0 <__any_on>:
 800aaa0:	f100 0214 	add.w	r2, r0, #20
 800aaa4:	6900      	ldr	r0, [r0, #16]
 800aaa6:	114b      	asrs	r3, r1, #5
 800aaa8:	4298      	cmp	r0, r3
 800aaaa:	b510      	push	{r4, lr}
 800aaac:	db11      	blt.n	800aad2 <__any_on+0x32>
 800aaae:	dd0a      	ble.n	800aac6 <__any_on+0x26>
 800aab0:	f011 011f 	ands.w	r1, r1, #31
 800aab4:	d007      	beq.n	800aac6 <__any_on+0x26>
 800aab6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aaba:	fa24 f001 	lsr.w	r0, r4, r1
 800aabe:	fa00 f101 	lsl.w	r1, r0, r1
 800aac2:	428c      	cmp	r4, r1
 800aac4:	d10b      	bne.n	800aade <__any_on+0x3e>
 800aac6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d803      	bhi.n	800aad6 <__any_on+0x36>
 800aace:	2000      	movs	r0, #0
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	4603      	mov	r3, r0
 800aad4:	e7f7      	b.n	800aac6 <__any_on+0x26>
 800aad6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aada:	2900      	cmp	r1, #0
 800aadc:	d0f5      	beq.n	800aaca <__any_on+0x2a>
 800aade:	2001      	movs	r0, #1
 800aae0:	e7f6      	b.n	800aad0 <__any_on+0x30>

0800aae2 <_calloc_r>:
 800aae2:	b538      	push	{r3, r4, r5, lr}
 800aae4:	fb02 f401 	mul.w	r4, r2, r1
 800aae8:	4621      	mov	r1, r4
 800aaea:	f000 f857 	bl	800ab9c <_malloc_r>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b118      	cbz	r0, 800aafa <_calloc_r+0x18>
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	f7fc ff99 	bl	8007a2c <memset>
 800aafa:	4628      	mov	r0, r5
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ab00 <_free_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4605      	mov	r5, r0
 800ab04:	2900      	cmp	r1, #0
 800ab06:	d045      	beq.n	800ab94 <_free_r+0x94>
 800ab08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab0c:	1f0c      	subs	r4, r1, #4
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	bfb8      	it	lt
 800ab12:	18e4      	addlt	r4, r4, r3
 800ab14:	f000 fa36 	bl	800af84 <__malloc_lock>
 800ab18:	4a1f      	ldr	r2, [pc, #124]	; (800ab98 <_free_r+0x98>)
 800ab1a:	6813      	ldr	r3, [r2, #0]
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	b933      	cbnz	r3, 800ab2e <_free_r+0x2e>
 800ab20:	6063      	str	r3, [r4, #4]
 800ab22:	6014      	str	r4, [r2, #0]
 800ab24:	4628      	mov	r0, r5
 800ab26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab2a:	f000 ba2c 	b.w	800af86 <__malloc_unlock>
 800ab2e:	42a3      	cmp	r3, r4
 800ab30:	d90c      	bls.n	800ab4c <_free_r+0x4c>
 800ab32:	6821      	ldr	r1, [r4, #0]
 800ab34:	1862      	adds	r2, r4, r1
 800ab36:	4293      	cmp	r3, r2
 800ab38:	bf04      	itt	eq
 800ab3a:	681a      	ldreq	r2, [r3, #0]
 800ab3c:	685b      	ldreq	r3, [r3, #4]
 800ab3e:	6063      	str	r3, [r4, #4]
 800ab40:	bf04      	itt	eq
 800ab42:	1852      	addeq	r2, r2, r1
 800ab44:	6022      	streq	r2, [r4, #0]
 800ab46:	6004      	str	r4, [r0, #0]
 800ab48:	e7ec      	b.n	800ab24 <_free_r+0x24>
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	b10a      	cbz	r2, 800ab54 <_free_r+0x54>
 800ab50:	42a2      	cmp	r2, r4
 800ab52:	d9fa      	bls.n	800ab4a <_free_r+0x4a>
 800ab54:	6819      	ldr	r1, [r3, #0]
 800ab56:	1858      	adds	r0, r3, r1
 800ab58:	42a0      	cmp	r0, r4
 800ab5a:	d10b      	bne.n	800ab74 <_free_r+0x74>
 800ab5c:	6820      	ldr	r0, [r4, #0]
 800ab5e:	4401      	add	r1, r0
 800ab60:	1858      	adds	r0, r3, r1
 800ab62:	4282      	cmp	r2, r0
 800ab64:	6019      	str	r1, [r3, #0]
 800ab66:	d1dd      	bne.n	800ab24 <_free_r+0x24>
 800ab68:	6810      	ldr	r0, [r2, #0]
 800ab6a:	6852      	ldr	r2, [r2, #4]
 800ab6c:	605a      	str	r2, [r3, #4]
 800ab6e:	4401      	add	r1, r0
 800ab70:	6019      	str	r1, [r3, #0]
 800ab72:	e7d7      	b.n	800ab24 <_free_r+0x24>
 800ab74:	d902      	bls.n	800ab7c <_free_r+0x7c>
 800ab76:	230c      	movs	r3, #12
 800ab78:	602b      	str	r3, [r5, #0]
 800ab7a:	e7d3      	b.n	800ab24 <_free_r+0x24>
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	1821      	adds	r1, r4, r0
 800ab80:	428a      	cmp	r2, r1
 800ab82:	bf04      	itt	eq
 800ab84:	6811      	ldreq	r1, [r2, #0]
 800ab86:	6852      	ldreq	r2, [r2, #4]
 800ab88:	6062      	str	r2, [r4, #4]
 800ab8a:	bf04      	itt	eq
 800ab8c:	1809      	addeq	r1, r1, r0
 800ab8e:	6021      	streq	r1, [r4, #0]
 800ab90:	605c      	str	r4, [r3, #4]
 800ab92:	e7c7      	b.n	800ab24 <_free_r+0x24>
 800ab94:	bd38      	pop	{r3, r4, r5, pc}
 800ab96:	bf00      	nop
 800ab98:	200030e0 	.word	0x200030e0

0800ab9c <_malloc_r>:
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	1ccd      	adds	r5, r1, #3
 800aba0:	f025 0503 	bic.w	r5, r5, #3
 800aba4:	3508      	adds	r5, #8
 800aba6:	2d0c      	cmp	r5, #12
 800aba8:	bf38      	it	cc
 800abaa:	250c      	movcc	r5, #12
 800abac:	2d00      	cmp	r5, #0
 800abae:	4606      	mov	r6, r0
 800abb0:	db01      	blt.n	800abb6 <_malloc_r+0x1a>
 800abb2:	42a9      	cmp	r1, r5
 800abb4:	d903      	bls.n	800abbe <_malloc_r+0x22>
 800abb6:	230c      	movs	r3, #12
 800abb8:	6033      	str	r3, [r6, #0]
 800abba:	2000      	movs	r0, #0
 800abbc:	bd70      	pop	{r4, r5, r6, pc}
 800abbe:	f000 f9e1 	bl	800af84 <__malloc_lock>
 800abc2:	4a21      	ldr	r2, [pc, #132]	; (800ac48 <_malloc_r+0xac>)
 800abc4:	6814      	ldr	r4, [r2, #0]
 800abc6:	4621      	mov	r1, r4
 800abc8:	b991      	cbnz	r1, 800abf0 <_malloc_r+0x54>
 800abca:	4c20      	ldr	r4, [pc, #128]	; (800ac4c <_malloc_r+0xb0>)
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	b91b      	cbnz	r3, 800abd8 <_malloc_r+0x3c>
 800abd0:	4630      	mov	r0, r6
 800abd2:	f000 f98f 	bl	800aef4 <_sbrk_r>
 800abd6:	6020      	str	r0, [r4, #0]
 800abd8:	4629      	mov	r1, r5
 800abda:	4630      	mov	r0, r6
 800abdc:	f000 f98a 	bl	800aef4 <_sbrk_r>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d124      	bne.n	800ac2e <_malloc_r+0x92>
 800abe4:	230c      	movs	r3, #12
 800abe6:	6033      	str	r3, [r6, #0]
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 f9cc 	bl	800af86 <__malloc_unlock>
 800abee:	e7e4      	b.n	800abba <_malloc_r+0x1e>
 800abf0:	680b      	ldr	r3, [r1, #0]
 800abf2:	1b5b      	subs	r3, r3, r5
 800abf4:	d418      	bmi.n	800ac28 <_malloc_r+0x8c>
 800abf6:	2b0b      	cmp	r3, #11
 800abf8:	d90f      	bls.n	800ac1a <_malloc_r+0x7e>
 800abfa:	600b      	str	r3, [r1, #0]
 800abfc:	50cd      	str	r5, [r1, r3]
 800abfe:	18cc      	adds	r4, r1, r3
 800ac00:	4630      	mov	r0, r6
 800ac02:	f000 f9c0 	bl	800af86 <__malloc_unlock>
 800ac06:	f104 000b 	add.w	r0, r4, #11
 800ac0a:	1d23      	adds	r3, r4, #4
 800ac0c:	f020 0007 	bic.w	r0, r0, #7
 800ac10:	1ac3      	subs	r3, r0, r3
 800ac12:	d0d3      	beq.n	800abbc <_malloc_r+0x20>
 800ac14:	425a      	negs	r2, r3
 800ac16:	50e2      	str	r2, [r4, r3]
 800ac18:	e7d0      	b.n	800abbc <_malloc_r+0x20>
 800ac1a:	428c      	cmp	r4, r1
 800ac1c:	684b      	ldr	r3, [r1, #4]
 800ac1e:	bf16      	itet	ne
 800ac20:	6063      	strne	r3, [r4, #4]
 800ac22:	6013      	streq	r3, [r2, #0]
 800ac24:	460c      	movne	r4, r1
 800ac26:	e7eb      	b.n	800ac00 <_malloc_r+0x64>
 800ac28:	460c      	mov	r4, r1
 800ac2a:	6849      	ldr	r1, [r1, #4]
 800ac2c:	e7cc      	b.n	800abc8 <_malloc_r+0x2c>
 800ac2e:	1cc4      	adds	r4, r0, #3
 800ac30:	f024 0403 	bic.w	r4, r4, #3
 800ac34:	42a0      	cmp	r0, r4
 800ac36:	d005      	beq.n	800ac44 <_malloc_r+0xa8>
 800ac38:	1a21      	subs	r1, r4, r0
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f000 f95a 	bl	800aef4 <_sbrk_r>
 800ac40:	3001      	adds	r0, #1
 800ac42:	d0cf      	beq.n	800abe4 <_malloc_r+0x48>
 800ac44:	6025      	str	r5, [r4, #0]
 800ac46:	e7db      	b.n	800ac00 <_malloc_r+0x64>
 800ac48:	200030e0 	.word	0x200030e0
 800ac4c:	200030e4 	.word	0x200030e4

0800ac50 <__ssputs_r>:
 800ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	688e      	ldr	r6, [r1, #8]
 800ac56:	429e      	cmp	r6, r3
 800ac58:	4682      	mov	sl, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	4690      	mov	r8, r2
 800ac5e:	4699      	mov	r9, r3
 800ac60:	d837      	bhi.n	800acd2 <__ssputs_r+0x82>
 800ac62:	898a      	ldrh	r2, [r1, #12]
 800ac64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac68:	d031      	beq.n	800acce <__ssputs_r+0x7e>
 800ac6a:	6825      	ldr	r5, [r4, #0]
 800ac6c:	6909      	ldr	r1, [r1, #16]
 800ac6e:	1a6f      	subs	r7, r5, r1
 800ac70:	6965      	ldr	r5, [r4, #20]
 800ac72:	2302      	movs	r3, #2
 800ac74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac78:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac7c:	f109 0301 	add.w	r3, r9, #1
 800ac80:	443b      	add	r3, r7
 800ac82:	429d      	cmp	r5, r3
 800ac84:	bf38      	it	cc
 800ac86:	461d      	movcc	r5, r3
 800ac88:	0553      	lsls	r3, r2, #21
 800ac8a:	d530      	bpl.n	800acee <__ssputs_r+0x9e>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	f7ff ff85 	bl	800ab9c <_malloc_r>
 800ac92:	4606      	mov	r6, r0
 800ac94:	b950      	cbnz	r0, 800acac <__ssputs_r+0x5c>
 800ac96:	230c      	movs	r3, #12
 800ac98:	f8ca 3000 	str.w	r3, [sl]
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295
 800aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acac:	463a      	mov	r2, r7
 800acae:	6921      	ldr	r1, [r4, #16]
 800acb0:	f7ff fb0e 	bl	800a2d0 <memcpy>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	6126      	str	r6, [r4, #16]
 800acc2:	6165      	str	r5, [r4, #20]
 800acc4:	443e      	add	r6, r7
 800acc6:	1bed      	subs	r5, r5, r7
 800acc8:	6026      	str	r6, [r4, #0]
 800acca:	60a5      	str	r5, [r4, #8]
 800accc:	464e      	mov	r6, r9
 800acce:	454e      	cmp	r6, r9
 800acd0:	d900      	bls.n	800acd4 <__ssputs_r+0x84>
 800acd2:	464e      	mov	r6, r9
 800acd4:	4632      	mov	r2, r6
 800acd6:	4641      	mov	r1, r8
 800acd8:	6820      	ldr	r0, [r4, #0]
 800acda:	f000 f93a 	bl	800af52 <memmove>
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	1b9b      	subs	r3, r3, r6
 800ace2:	60a3      	str	r3, [r4, #8]
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	441e      	add	r6, r3
 800ace8:	6026      	str	r6, [r4, #0]
 800acea:	2000      	movs	r0, #0
 800acec:	e7dc      	b.n	800aca8 <__ssputs_r+0x58>
 800acee:	462a      	mov	r2, r5
 800acf0:	f000 f94a 	bl	800af88 <_realloc_r>
 800acf4:	4606      	mov	r6, r0
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d1e2      	bne.n	800acc0 <__ssputs_r+0x70>
 800acfa:	6921      	ldr	r1, [r4, #16]
 800acfc:	4650      	mov	r0, sl
 800acfe:	f7ff feff 	bl	800ab00 <_free_r>
 800ad02:	e7c8      	b.n	800ac96 <__ssputs_r+0x46>

0800ad04 <_svfiprintf_r>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	461d      	mov	r5, r3
 800ad0a:	898b      	ldrh	r3, [r1, #12]
 800ad0c:	061f      	lsls	r7, r3, #24
 800ad0e:	b09d      	sub	sp, #116	; 0x74
 800ad10:	4680      	mov	r8, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	4616      	mov	r6, r2
 800ad16:	d50f      	bpl.n	800ad38 <_svfiprintf_r+0x34>
 800ad18:	690b      	ldr	r3, [r1, #16]
 800ad1a:	b96b      	cbnz	r3, 800ad38 <_svfiprintf_r+0x34>
 800ad1c:	2140      	movs	r1, #64	; 0x40
 800ad1e:	f7ff ff3d 	bl	800ab9c <_malloc_r>
 800ad22:	6020      	str	r0, [r4, #0]
 800ad24:	6120      	str	r0, [r4, #16]
 800ad26:	b928      	cbnz	r0, 800ad34 <_svfiprintf_r+0x30>
 800ad28:	230c      	movs	r3, #12
 800ad2a:	f8c8 3000 	str.w	r3, [r8]
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	e0c8      	b.n	800aec6 <_svfiprintf_r+0x1c2>
 800ad34:	2340      	movs	r3, #64	; 0x40
 800ad36:	6163      	str	r3, [r4, #20]
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3c:	2320      	movs	r3, #32
 800ad3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad42:	2330      	movs	r3, #48	; 0x30
 800ad44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad48:	9503      	str	r5, [sp, #12]
 800ad4a:	f04f 0b01 	mov.w	fp, #1
 800ad4e:	4637      	mov	r7, r6
 800ad50:	463d      	mov	r5, r7
 800ad52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad56:	b10b      	cbz	r3, 800ad5c <_svfiprintf_r+0x58>
 800ad58:	2b25      	cmp	r3, #37	; 0x25
 800ad5a:	d13e      	bne.n	800adda <_svfiprintf_r+0xd6>
 800ad5c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad60:	d00b      	beq.n	800ad7a <_svfiprintf_r+0x76>
 800ad62:	4653      	mov	r3, sl
 800ad64:	4632      	mov	r2, r6
 800ad66:	4621      	mov	r1, r4
 800ad68:	4640      	mov	r0, r8
 800ad6a:	f7ff ff71 	bl	800ac50 <__ssputs_r>
 800ad6e:	3001      	adds	r0, #1
 800ad70:	f000 80a4 	beq.w	800aebc <_svfiprintf_r+0x1b8>
 800ad74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad76:	4453      	add	r3, sl
 800ad78:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7a:	783b      	ldrb	r3, [r7, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 809d 	beq.w	800aebc <_svfiprintf_r+0x1b8>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f04f 32ff 	mov.w	r2, #4294967295
 800ad88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad8c:	9304      	str	r3, [sp, #16]
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad94:	931a      	str	r3, [sp, #104]	; 0x68
 800ad96:	462f      	mov	r7, r5
 800ad98:	2205      	movs	r2, #5
 800ad9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ad9e:	4850      	ldr	r0, [pc, #320]	; (800aee0 <_svfiprintf_r+0x1dc>)
 800ada0:	f7f5 fa46 	bl	8000230 <memchr>
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	b9d0      	cbnz	r0, 800adde <_svfiprintf_r+0xda>
 800ada8:	06d9      	lsls	r1, r3, #27
 800adaa:	bf44      	itt	mi
 800adac:	2220      	movmi	r2, #32
 800adae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adb2:	071a      	lsls	r2, r3, #28
 800adb4:	bf44      	itt	mi
 800adb6:	222b      	movmi	r2, #43	; 0x2b
 800adb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adbc:	782a      	ldrb	r2, [r5, #0]
 800adbe:	2a2a      	cmp	r2, #42	; 0x2a
 800adc0:	d015      	beq.n	800adee <_svfiprintf_r+0xea>
 800adc2:	9a07      	ldr	r2, [sp, #28]
 800adc4:	462f      	mov	r7, r5
 800adc6:	2000      	movs	r0, #0
 800adc8:	250a      	movs	r5, #10
 800adca:	4639      	mov	r1, r7
 800adcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add0:	3b30      	subs	r3, #48	; 0x30
 800add2:	2b09      	cmp	r3, #9
 800add4:	d94d      	bls.n	800ae72 <_svfiprintf_r+0x16e>
 800add6:	b1b8      	cbz	r0, 800ae08 <_svfiprintf_r+0x104>
 800add8:	e00f      	b.n	800adfa <_svfiprintf_r+0xf6>
 800adda:	462f      	mov	r7, r5
 800addc:	e7b8      	b.n	800ad50 <_svfiprintf_r+0x4c>
 800adde:	4a40      	ldr	r2, [pc, #256]	; (800aee0 <_svfiprintf_r+0x1dc>)
 800ade0:	1a80      	subs	r0, r0, r2
 800ade2:	fa0b f000 	lsl.w	r0, fp, r0
 800ade6:	4318      	orrs	r0, r3
 800ade8:	9004      	str	r0, [sp, #16]
 800adea:	463d      	mov	r5, r7
 800adec:	e7d3      	b.n	800ad96 <_svfiprintf_r+0x92>
 800adee:	9a03      	ldr	r2, [sp, #12]
 800adf0:	1d11      	adds	r1, r2, #4
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	9103      	str	r1, [sp, #12]
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	db01      	blt.n	800adfe <_svfiprintf_r+0xfa>
 800adfa:	9207      	str	r2, [sp, #28]
 800adfc:	e004      	b.n	800ae08 <_svfiprintf_r+0x104>
 800adfe:	4252      	negs	r2, r2
 800ae00:	f043 0302 	orr.w	r3, r3, #2
 800ae04:	9207      	str	r2, [sp, #28]
 800ae06:	9304      	str	r3, [sp, #16]
 800ae08:	783b      	ldrb	r3, [r7, #0]
 800ae0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae0c:	d10c      	bne.n	800ae28 <_svfiprintf_r+0x124>
 800ae0e:	787b      	ldrb	r3, [r7, #1]
 800ae10:	2b2a      	cmp	r3, #42	; 0x2a
 800ae12:	d133      	bne.n	800ae7c <_svfiprintf_r+0x178>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	1d1a      	adds	r2, r3, #4
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	9203      	str	r2, [sp, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bfb8      	it	lt
 800ae20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae24:	3702      	adds	r7, #2
 800ae26:	9305      	str	r3, [sp, #20]
 800ae28:	4d2e      	ldr	r5, [pc, #184]	; (800aee4 <_svfiprintf_r+0x1e0>)
 800ae2a:	7839      	ldrb	r1, [r7, #0]
 800ae2c:	2203      	movs	r2, #3
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f7f5 f9fe 	bl	8000230 <memchr>
 800ae34:	b138      	cbz	r0, 800ae46 <_svfiprintf_r+0x142>
 800ae36:	2340      	movs	r3, #64	; 0x40
 800ae38:	1b40      	subs	r0, r0, r5
 800ae3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	4303      	orrs	r3, r0
 800ae42:	3701      	adds	r7, #1
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	7839      	ldrb	r1, [r7, #0]
 800ae48:	4827      	ldr	r0, [pc, #156]	; (800aee8 <_svfiprintf_r+0x1e4>)
 800ae4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae4e:	2206      	movs	r2, #6
 800ae50:	1c7e      	adds	r6, r7, #1
 800ae52:	f7f5 f9ed 	bl	8000230 <memchr>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d038      	beq.n	800aecc <_svfiprintf_r+0x1c8>
 800ae5a:	4b24      	ldr	r3, [pc, #144]	; (800aeec <_svfiprintf_r+0x1e8>)
 800ae5c:	bb13      	cbnz	r3, 800aea4 <_svfiprintf_r+0x1a0>
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	3307      	adds	r3, #7
 800ae62:	f023 0307 	bic.w	r3, r3, #7
 800ae66:	3308      	adds	r3, #8
 800ae68:	9303      	str	r3, [sp, #12]
 800ae6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6c:	444b      	add	r3, r9
 800ae6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae70:	e76d      	b.n	800ad4e <_svfiprintf_r+0x4a>
 800ae72:	fb05 3202 	mla	r2, r5, r2, r3
 800ae76:	2001      	movs	r0, #1
 800ae78:	460f      	mov	r7, r1
 800ae7a:	e7a6      	b.n	800adca <_svfiprintf_r+0xc6>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	3701      	adds	r7, #1
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	4619      	mov	r1, r3
 800ae84:	250a      	movs	r5, #10
 800ae86:	4638      	mov	r0, r7
 800ae88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8c:	3a30      	subs	r2, #48	; 0x30
 800ae8e:	2a09      	cmp	r2, #9
 800ae90:	d903      	bls.n	800ae9a <_svfiprintf_r+0x196>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0c8      	beq.n	800ae28 <_svfiprintf_r+0x124>
 800ae96:	9105      	str	r1, [sp, #20]
 800ae98:	e7c6      	b.n	800ae28 <_svfiprintf_r+0x124>
 800ae9a:	fb05 2101 	mla	r1, r5, r1, r2
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4607      	mov	r7, r0
 800aea2:	e7f0      	b.n	800ae86 <_svfiprintf_r+0x182>
 800aea4:	ab03      	add	r3, sp, #12
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4b11      	ldr	r3, [pc, #68]	; (800aef0 <_svfiprintf_r+0x1ec>)
 800aeac:	a904      	add	r1, sp, #16
 800aeae:	4640      	mov	r0, r8
 800aeb0:	f7fc fe58 	bl	8007b64 <_printf_float>
 800aeb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aeb8:	4681      	mov	r9, r0
 800aeba:	d1d6      	bne.n	800ae6a <_svfiprintf_r+0x166>
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	065b      	lsls	r3, r3, #25
 800aec0:	f53f af35 	bmi.w	800ad2e <_svfiprintf_r+0x2a>
 800aec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aec6:	b01d      	add	sp, #116	; 0x74
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	ab03      	add	r3, sp, #12
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	4622      	mov	r2, r4
 800aed2:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <_svfiprintf_r+0x1ec>)
 800aed4:	a904      	add	r1, sp, #16
 800aed6:	4640      	mov	r0, r8
 800aed8:	f7fd f8fa 	bl	80080d0 <_printf_i>
 800aedc:	e7ea      	b.n	800aeb4 <_svfiprintf_r+0x1b0>
 800aede:	bf00      	nop
 800aee0:	0800dc74 	.word	0x0800dc74
 800aee4:	0800dc7a 	.word	0x0800dc7a
 800aee8:	0800dc7e 	.word	0x0800dc7e
 800aeec:	08007b65 	.word	0x08007b65
 800aef0:	0800ac51 	.word	0x0800ac51

0800aef4 <_sbrk_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4c06      	ldr	r4, [pc, #24]	; (800af10 <_sbrk_r+0x1c>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4605      	mov	r5, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	6023      	str	r3, [r4, #0]
 800af00:	f7f7 fe50 	bl	8002ba4 <_sbrk>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d102      	bne.n	800af0e <_sbrk_r+0x1a>
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	b103      	cbz	r3, 800af0e <_sbrk_r+0x1a>
 800af0c:	602b      	str	r3, [r5, #0]
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	200084d0 	.word	0x200084d0

0800af14 <strncmp>:
 800af14:	b510      	push	{r4, lr}
 800af16:	b16a      	cbz	r2, 800af34 <strncmp+0x20>
 800af18:	3901      	subs	r1, #1
 800af1a:	1884      	adds	r4, r0, r2
 800af1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800af20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af24:	4293      	cmp	r3, r2
 800af26:	d103      	bne.n	800af30 <strncmp+0x1c>
 800af28:	42a0      	cmp	r0, r4
 800af2a:	d001      	beq.n	800af30 <strncmp+0x1c>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f5      	bne.n	800af1c <strncmp+0x8>
 800af30:	1a98      	subs	r0, r3, r2
 800af32:	bd10      	pop	{r4, pc}
 800af34:	4610      	mov	r0, r2
 800af36:	e7fc      	b.n	800af32 <strncmp+0x1e>

0800af38 <__ascii_wctomb>:
 800af38:	b149      	cbz	r1, 800af4e <__ascii_wctomb+0x16>
 800af3a:	2aff      	cmp	r2, #255	; 0xff
 800af3c:	bf85      	ittet	hi
 800af3e:	238a      	movhi	r3, #138	; 0x8a
 800af40:	6003      	strhi	r3, [r0, #0]
 800af42:	700a      	strbls	r2, [r1, #0]
 800af44:	f04f 30ff 	movhi.w	r0, #4294967295
 800af48:	bf98      	it	ls
 800af4a:	2001      	movls	r0, #1
 800af4c:	4770      	bx	lr
 800af4e:	4608      	mov	r0, r1
 800af50:	4770      	bx	lr

0800af52 <memmove>:
 800af52:	4288      	cmp	r0, r1
 800af54:	b510      	push	{r4, lr}
 800af56:	eb01 0302 	add.w	r3, r1, r2
 800af5a:	d807      	bhi.n	800af6c <memmove+0x1a>
 800af5c:	1e42      	subs	r2, r0, #1
 800af5e:	4299      	cmp	r1, r3
 800af60:	d00a      	beq.n	800af78 <memmove+0x26>
 800af62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af66:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af6a:	e7f8      	b.n	800af5e <memmove+0xc>
 800af6c:	4283      	cmp	r3, r0
 800af6e:	d9f5      	bls.n	800af5c <memmove+0xa>
 800af70:	1881      	adds	r1, r0, r2
 800af72:	1ad2      	subs	r2, r2, r3
 800af74:	42d3      	cmn	r3, r2
 800af76:	d100      	bne.n	800af7a <memmove+0x28>
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af82:	e7f7      	b.n	800af74 <memmove+0x22>

0800af84 <__malloc_lock>:
 800af84:	4770      	bx	lr

0800af86 <__malloc_unlock>:
 800af86:	4770      	bx	lr

0800af88 <_realloc_r>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	4607      	mov	r7, r0
 800af8c:	4614      	mov	r4, r2
 800af8e:	460e      	mov	r6, r1
 800af90:	b921      	cbnz	r1, 800af9c <_realloc_r+0x14>
 800af92:	4611      	mov	r1, r2
 800af94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af98:	f7ff be00 	b.w	800ab9c <_malloc_r>
 800af9c:	b922      	cbnz	r2, 800afa8 <_realloc_r+0x20>
 800af9e:	f7ff fdaf 	bl	800ab00 <_free_r>
 800afa2:	4625      	mov	r5, r4
 800afa4:	4628      	mov	r0, r5
 800afa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afa8:	f000 f814 	bl	800afd4 <_malloc_usable_size_r>
 800afac:	42a0      	cmp	r0, r4
 800afae:	d20f      	bcs.n	800afd0 <_realloc_r+0x48>
 800afb0:	4621      	mov	r1, r4
 800afb2:	4638      	mov	r0, r7
 800afb4:	f7ff fdf2 	bl	800ab9c <_malloc_r>
 800afb8:	4605      	mov	r5, r0
 800afba:	2800      	cmp	r0, #0
 800afbc:	d0f2      	beq.n	800afa4 <_realloc_r+0x1c>
 800afbe:	4631      	mov	r1, r6
 800afc0:	4622      	mov	r2, r4
 800afc2:	f7ff f985 	bl	800a2d0 <memcpy>
 800afc6:	4631      	mov	r1, r6
 800afc8:	4638      	mov	r0, r7
 800afca:	f7ff fd99 	bl	800ab00 <_free_r>
 800afce:	e7e9      	b.n	800afa4 <_realloc_r+0x1c>
 800afd0:	4635      	mov	r5, r6
 800afd2:	e7e7      	b.n	800afa4 <_realloc_r+0x1c>

0800afd4 <_malloc_usable_size_r>:
 800afd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afd8:	1f18      	subs	r0, r3, #4
 800afda:	2b00      	cmp	r3, #0
 800afdc:	bfbc      	itt	lt
 800afde:	580b      	ldrlt	r3, [r1, r0]
 800afe0:	18c0      	addlt	r0, r0, r3
 800afe2:	4770      	bx	lr
 800afe4:	0000      	movs	r0, r0
	...

0800afe8 <cos>:
 800afe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afea:	ec51 0b10 	vmov	r0, r1, d0
 800afee:	4a1e      	ldr	r2, [pc, #120]	; (800b068 <cos+0x80>)
 800aff0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aff4:	4293      	cmp	r3, r2
 800aff6:	dc06      	bgt.n	800b006 <cos+0x1e>
 800aff8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800b060 <cos+0x78>
 800affc:	f001 fcf0 	bl	800c9e0 <__kernel_cos>
 800b000:	ec51 0b10 	vmov	r0, r1, d0
 800b004:	e007      	b.n	800b016 <cos+0x2e>
 800b006:	4a19      	ldr	r2, [pc, #100]	; (800b06c <cos+0x84>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	dd09      	ble.n	800b020 <cos+0x38>
 800b00c:	ee10 2a10 	vmov	r2, s0
 800b010:	460b      	mov	r3, r1
 800b012:	f7f5 f961 	bl	80002d8 <__aeabi_dsub>
 800b016:	ec41 0b10 	vmov	d0, r0, r1
 800b01a:	b005      	add	sp, #20
 800b01c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b020:	4668      	mov	r0, sp
 800b022:	f001 fa39 	bl	800c498 <__ieee754_rem_pio2>
 800b026:	f000 0003 	and.w	r0, r0, #3
 800b02a:	2801      	cmp	r0, #1
 800b02c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b030:	ed9d 0b00 	vldr	d0, [sp]
 800b034:	d007      	beq.n	800b046 <cos+0x5e>
 800b036:	2802      	cmp	r0, #2
 800b038:	d00e      	beq.n	800b058 <cos+0x70>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d0de      	beq.n	800affc <cos+0x14>
 800b03e:	2001      	movs	r0, #1
 800b040:	f002 f8d6 	bl	800d1f0 <__kernel_sin>
 800b044:	e7dc      	b.n	800b000 <cos+0x18>
 800b046:	f002 f8d3 	bl	800d1f0 <__kernel_sin>
 800b04a:	ec53 2b10 	vmov	r2, r3, d0
 800b04e:	ee10 0a10 	vmov	r0, s0
 800b052:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b056:	e7de      	b.n	800b016 <cos+0x2e>
 800b058:	f001 fcc2 	bl	800c9e0 <__kernel_cos>
 800b05c:	e7f5      	b.n	800b04a <cos+0x62>
 800b05e:	bf00      	nop
	...
 800b068:	3fe921fb 	.word	0x3fe921fb
 800b06c:	7fefffff 	.word	0x7fefffff

0800b070 <sin>:
 800b070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b072:	ec51 0b10 	vmov	r0, r1, d0
 800b076:	4a20      	ldr	r2, [pc, #128]	; (800b0f8 <sin+0x88>)
 800b078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b07c:	4293      	cmp	r3, r2
 800b07e:	dc07      	bgt.n	800b090 <sin+0x20>
 800b080:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b0f0 <sin+0x80>
 800b084:	2000      	movs	r0, #0
 800b086:	f002 f8b3 	bl	800d1f0 <__kernel_sin>
 800b08a:	ec51 0b10 	vmov	r0, r1, d0
 800b08e:	e007      	b.n	800b0a0 <sin+0x30>
 800b090:	4a1a      	ldr	r2, [pc, #104]	; (800b0fc <sin+0x8c>)
 800b092:	4293      	cmp	r3, r2
 800b094:	dd09      	ble.n	800b0aa <sin+0x3a>
 800b096:	ee10 2a10 	vmov	r2, s0
 800b09a:	460b      	mov	r3, r1
 800b09c:	f7f5 f91c 	bl	80002d8 <__aeabi_dsub>
 800b0a0:	ec41 0b10 	vmov	d0, r0, r1
 800b0a4:	b005      	add	sp, #20
 800b0a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0aa:	4668      	mov	r0, sp
 800b0ac:	f001 f9f4 	bl	800c498 <__ieee754_rem_pio2>
 800b0b0:	f000 0003 	and.w	r0, r0, #3
 800b0b4:	2801      	cmp	r0, #1
 800b0b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0ba:	ed9d 0b00 	vldr	d0, [sp]
 800b0be:	d004      	beq.n	800b0ca <sin+0x5a>
 800b0c0:	2802      	cmp	r0, #2
 800b0c2:	d005      	beq.n	800b0d0 <sin+0x60>
 800b0c4:	b970      	cbnz	r0, 800b0e4 <sin+0x74>
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	e7dd      	b.n	800b086 <sin+0x16>
 800b0ca:	f001 fc89 	bl	800c9e0 <__kernel_cos>
 800b0ce:	e7dc      	b.n	800b08a <sin+0x1a>
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	f002 f88d 	bl	800d1f0 <__kernel_sin>
 800b0d6:	ec53 2b10 	vmov	r2, r3, d0
 800b0da:	ee10 0a10 	vmov	r0, s0
 800b0de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0e2:	e7dd      	b.n	800b0a0 <sin+0x30>
 800b0e4:	f001 fc7c 	bl	800c9e0 <__kernel_cos>
 800b0e8:	e7f5      	b.n	800b0d6 <sin+0x66>
 800b0ea:	bf00      	nop
 800b0ec:	f3af 8000 	nop.w
	...
 800b0f8:	3fe921fb 	.word	0x3fe921fb
 800b0fc:	7fefffff 	.word	0x7fefffff

0800b100 <asin>:
 800b100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b102:	ed2d 8b02 	vpush	{d8}
 800b106:	4e26      	ldr	r6, [pc, #152]	; (800b1a0 <asin+0xa0>)
 800b108:	b08b      	sub	sp, #44	; 0x2c
 800b10a:	ec55 4b10 	vmov	r4, r5, d0
 800b10e:	f000 f9c3 	bl	800b498 <__ieee754_asin>
 800b112:	f996 3000 	ldrsb.w	r3, [r6]
 800b116:	eeb0 8a40 	vmov.f32	s16, s0
 800b11a:	eef0 8a60 	vmov.f32	s17, s1
 800b11e:	3301      	adds	r3, #1
 800b120:	d036      	beq.n	800b190 <asin+0x90>
 800b122:	4622      	mov	r2, r4
 800b124:	462b      	mov	r3, r5
 800b126:	4620      	mov	r0, r4
 800b128:	4629      	mov	r1, r5
 800b12a:	f7f5 fd27 	bl	8000b7c <__aeabi_dcmpun>
 800b12e:	4607      	mov	r7, r0
 800b130:	bb70      	cbnz	r0, 800b190 <asin+0x90>
 800b132:	ec45 4b10 	vmov	d0, r4, r5
 800b136:	f002 fab7 	bl	800d6a8 <fabs>
 800b13a:	2200      	movs	r2, #0
 800b13c:	4b19      	ldr	r3, [pc, #100]	; (800b1a4 <asin+0xa4>)
 800b13e:	ec51 0b10 	vmov	r0, r1, d0
 800b142:	f7f5 fd11 	bl	8000b68 <__aeabi_dcmpgt>
 800b146:	b318      	cbz	r0, 800b190 <asin+0x90>
 800b148:	2301      	movs	r3, #1
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	4816      	ldr	r0, [pc, #88]	; (800b1a8 <asin+0xa8>)
 800b14e:	4b17      	ldr	r3, [pc, #92]	; (800b1ac <asin+0xac>)
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	9708      	str	r7, [sp, #32]
 800b154:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b158:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b15c:	f002 fb40 	bl	800d7e0 <nan>
 800b160:	f996 3000 	ldrsb.w	r3, [r6]
 800b164:	2b02      	cmp	r3, #2
 800b166:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b16a:	d104      	bne.n	800b176 <asin+0x76>
 800b16c:	f7fc fc34 	bl	80079d8 <__errno>
 800b170:	2321      	movs	r3, #33	; 0x21
 800b172:	6003      	str	r3, [r0, #0]
 800b174:	e004      	b.n	800b180 <asin+0x80>
 800b176:	4668      	mov	r0, sp
 800b178:	f002 fb2e 	bl	800d7d8 <matherr>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d0f5      	beq.n	800b16c <asin+0x6c>
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	b11b      	cbz	r3, 800b18c <asin+0x8c>
 800b184:	f7fc fc28 	bl	80079d8 <__errno>
 800b188:	9b08      	ldr	r3, [sp, #32]
 800b18a:	6003      	str	r3, [r0, #0]
 800b18c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b190:	eeb0 0a48 	vmov.f32	s0, s16
 800b194:	eef0 0a68 	vmov.f32	s1, s17
 800b198:	b00b      	add	sp, #44	; 0x2c
 800b19a:	ecbd 8b02 	vpop	{d8}
 800b19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a0:	200030bc 	.word	0x200030bc
 800b1a4:	3ff00000 	.word	0x3ff00000
 800b1a8:	0800dc79 	.word	0x0800dc79
 800b1ac:	0800dd86 	.word	0x0800dd86

0800b1b0 <atan2>:
 800b1b0:	f000 bb82 	b.w	800b8b8 <__ieee754_atan2>

0800b1b4 <pow>:
 800b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b8:	ed2d 8b04 	vpush	{d8-d9}
 800b1bc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b490 <pow+0x2dc>
 800b1c0:	b08d      	sub	sp, #52	; 0x34
 800b1c2:	ec57 6b10 	vmov	r6, r7, d0
 800b1c6:	ec55 4b11 	vmov	r4, r5, d1
 800b1ca:	f000 fc55 	bl	800ba78 <__ieee754_pow>
 800b1ce:	f999 3000 	ldrsb.w	r3, [r9]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	eeb0 8a40 	vmov.f32	s16, s0
 800b1da:	eef0 8a60 	vmov.f32	s17, s1
 800b1de:	46c8      	mov	r8, r9
 800b1e0:	d05f      	beq.n	800b2a2 <pow+0xee>
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	462b      	mov	r3, r5
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	f7f5 fcc7 	bl	8000b7c <__aeabi_dcmpun>
 800b1ee:	4683      	mov	fp, r0
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d156      	bne.n	800b2a2 <pow+0xee>
 800b1f4:	4632      	mov	r2, r6
 800b1f6:	463b      	mov	r3, r7
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f5 fcbe 	bl	8000b7c <__aeabi_dcmpun>
 800b200:	9001      	str	r0, [sp, #4]
 800b202:	b1e8      	cbz	r0, 800b240 <pow+0x8c>
 800b204:	2200      	movs	r2, #0
 800b206:	2300      	movs	r3, #0
 800b208:	4620      	mov	r0, r4
 800b20a:	4629      	mov	r1, r5
 800b20c:	f7f5 fc84 	bl	8000b18 <__aeabi_dcmpeq>
 800b210:	2800      	cmp	r0, #0
 800b212:	d046      	beq.n	800b2a2 <pow+0xee>
 800b214:	2301      	movs	r3, #1
 800b216:	9302      	str	r3, [sp, #8]
 800b218:	4b96      	ldr	r3, [pc, #600]	; (800b474 <pow+0x2c0>)
 800b21a:	9303      	str	r3, [sp, #12]
 800b21c:	4b96      	ldr	r3, [pc, #600]	; (800b478 <pow+0x2c4>)
 800b21e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b222:	2200      	movs	r2, #0
 800b224:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b228:	9b00      	ldr	r3, [sp, #0]
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b230:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b234:	d033      	beq.n	800b29e <pow+0xea>
 800b236:	a802      	add	r0, sp, #8
 800b238:	f002 face 	bl	800d7d8 <matherr>
 800b23c:	bb48      	cbnz	r0, 800b292 <pow+0xde>
 800b23e:	e05d      	b.n	800b2fc <pow+0x148>
 800b240:	f04f 0a00 	mov.w	sl, #0
 800b244:	f04f 0b00 	mov.w	fp, #0
 800b248:	4652      	mov	r2, sl
 800b24a:	465b      	mov	r3, fp
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 fc62 	bl	8000b18 <__aeabi_dcmpeq>
 800b254:	ec4b ab19 	vmov	d9, sl, fp
 800b258:	2800      	cmp	r0, #0
 800b25a:	d054      	beq.n	800b306 <pow+0x152>
 800b25c:	4652      	mov	r2, sl
 800b25e:	465b      	mov	r3, fp
 800b260:	4620      	mov	r0, r4
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 fc58 	bl	8000b18 <__aeabi_dcmpeq>
 800b268:	4680      	mov	r8, r0
 800b26a:	b318      	cbz	r0, 800b2b4 <pow+0x100>
 800b26c:	2301      	movs	r3, #1
 800b26e:	9302      	str	r3, [sp, #8]
 800b270:	4b80      	ldr	r3, [pc, #512]	; (800b474 <pow+0x2c0>)
 800b272:	9303      	str	r3, [sp, #12]
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	930a      	str	r3, [sp, #40]	; 0x28
 800b278:	9b00      	ldr	r3, [sp, #0]
 800b27a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b27e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b282:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0d5      	beq.n	800b236 <pow+0x82>
 800b28a:	4b7b      	ldr	r3, [pc, #492]	; (800b478 <pow+0x2c4>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b294:	b11b      	cbz	r3, 800b29e <pow+0xea>
 800b296:	f7fc fb9f 	bl	80079d8 <__errno>
 800b29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b29c:	6003      	str	r3, [r0, #0]
 800b29e:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b2a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b2a6:	eef0 0a68 	vmov.f32	s1, s17
 800b2aa:	b00d      	add	sp, #52	; 0x34
 800b2ac:	ecbd 8b04 	vpop	{d8-d9}
 800b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b4:	ec45 4b10 	vmov	d0, r4, r5
 800b2b8:	f002 f9ff 	bl	800d6ba <finite>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d0f0      	beq.n	800b2a2 <pow+0xee>
 800b2c0:	4652      	mov	r2, sl
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f7f5 fc30 	bl	8000b2c <__aeabi_dcmplt>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d0e8      	beq.n	800b2a2 <pow+0xee>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	9302      	str	r3, [sp, #8]
 800b2d4:	4b67      	ldr	r3, [pc, #412]	; (800b474 <pow+0x2c0>)
 800b2d6:	9303      	str	r3, [sp, #12]
 800b2d8:	f999 3000 	ldrsb.w	r3, [r9]
 800b2dc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b2e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b2e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b2e8:	b913      	cbnz	r3, 800b2f0 <pow+0x13c>
 800b2ea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b2ee:	e7a2      	b.n	800b236 <pow+0x82>
 800b2f0:	4962      	ldr	r1, [pc, #392]	; (800b47c <pow+0x2c8>)
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d19c      	bne.n	800b236 <pow+0x82>
 800b2fc:	f7fc fb6c 	bl	80079d8 <__errno>
 800b300:	2321      	movs	r3, #33	; 0x21
 800b302:	6003      	str	r3, [r0, #0]
 800b304:	e7c5      	b.n	800b292 <pow+0xde>
 800b306:	eeb0 0a48 	vmov.f32	s0, s16
 800b30a:	eef0 0a68 	vmov.f32	s1, s17
 800b30e:	f002 f9d4 	bl	800d6ba <finite>
 800b312:	9000      	str	r0, [sp, #0]
 800b314:	2800      	cmp	r0, #0
 800b316:	f040 8081 	bne.w	800b41c <pow+0x268>
 800b31a:	ec47 6b10 	vmov	d0, r6, r7
 800b31e:	f002 f9cc 	bl	800d6ba <finite>
 800b322:	2800      	cmp	r0, #0
 800b324:	d07a      	beq.n	800b41c <pow+0x268>
 800b326:	ec45 4b10 	vmov	d0, r4, r5
 800b32a:	f002 f9c6 	bl	800d6ba <finite>
 800b32e:	2800      	cmp	r0, #0
 800b330:	d074      	beq.n	800b41c <pow+0x268>
 800b332:	ec53 2b18 	vmov	r2, r3, d8
 800b336:	ee18 0a10 	vmov	r0, s16
 800b33a:	4619      	mov	r1, r3
 800b33c:	f7f5 fc1e 	bl	8000b7c <__aeabi_dcmpun>
 800b340:	f999 9000 	ldrsb.w	r9, [r9]
 800b344:	4b4b      	ldr	r3, [pc, #300]	; (800b474 <pow+0x2c0>)
 800b346:	b1b0      	cbz	r0, 800b376 <pow+0x1c2>
 800b348:	2201      	movs	r2, #1
 800b34a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b34e:	9b00      	ldr	r3, [sp, #0]
 800b350:	930a      	str	r3, [sp, #40]	; 0x28
 800b352:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b356:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b35a:	f1b9 0f00 	cmp.w	r9, #0
 800b35e:	d0c4      	beq.n	800b2ea <pow+0x136>
 800b360:	4652      	mov	r2, sl
 800b362:	465b      	mov	r3, fp
 800b364:	4650      	mov	r0, sl
 800b366:	4659      	mov	r1, fp
 800b368:	f7f5 fa98 	bl	800089c <__aeabi_ddiv>
 800b36c:	f1b9 0f02 	cmp.w	r9, #2
 800b370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b374:	e7c1      	b.n	800b2fa <pow+0x146>
 800b376:	2203      	movs	r2, #3
 800b378:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b37c:	900a      	str	r0, [sp, #40]	; 0x28
 800b37e:	4629      	mov	r1, r5
 800b380:	4620      	mov	r0, r4
 800b382:	2200      	movs	r2, #0
 800b384:	4b3e      	ldr	r3, [pc, #248]	; (800b480 <pow+0x2cc>)
 800b386:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b38a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b38e:	f7f5 f95b 	bl	8000648 <__aeabi_dmul>
 800b392:	4604      	mov	r4, r0
 800b394:	460d      	mov	r5, r1
 800b396:	f1b9 0f00 	cmp.w	r9, #0
 800b39a:	d124      	bne.n	800b3e6 <pow+0x232>
 800b39c:	4b39      	ldr	r3, [pc, #228]	; (800b484 <pow+0x2d0>)
 800b39e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b3a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4652      	mov	r2, sl
 800b3aa:	465b      	mov	r3, fp
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	f7f5 fbbd 	bl	8000b2c <__aeabi_dcmplt>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d056      	beq.n	800b464 <pow+0x2b0>
 800b3b6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ba:	f002 fa19 	bl	800d7f0 <rint>
 800b3be:	4622      	mov	r2, r4
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	ec51 0b10 	vmov	r0, r1, d0
 800b3c6:	f7f5 fba7 	bl	8000b18 <__aeabi_dcmpeq>
 800b3ca:	b920      	cbnz	r0, 800b3d6 <pow+0x222>
 800b3cc:	4b2e      	ldr	r3, [pc, #184]	; (800b488 <pow+0x2d4>)
 800b3ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b3d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3d6:	f998 3000 	ldrsb.w	r3, [r8]
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d142      	bne.n	800b464 <pow+0x2b0>
 800b3de:	f7fc fafb 	bl	80079d8 <__errno>
 800b3e2:	2322      	movs	r3, #34	; 0x22
 800b3e4:	e78d      	b.n	800b302 <pow+0x14e>
 800b3e6:	4b29      	ldr	r3, [pc, #164]	; (800b48c <pow+0x2d8>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4652      	mov	r2, sl
 800b3f2:	465b      	mov	r3, fp
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 fb99 	bl	8000b2c <__aeabi_dcmplt>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d0eb      	beq.n	800b3d6 <pow+0x222>
 800b3fe:	ec45 4b10 	vmov	d0, r4, r5
 800b402:	f002 f9f5 	bl	800d7f0 <rint>
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	ec51 0b10 	vmov	r0, r1, d0
 800b40e:	f7f5 fb83 	bl	8000b18 <__aeabi_dcmpeq>
 800b412:	2800      	cmp	r0, #0
 800b414:	d1df      	bne.n	800b3d6 <pow+0x222>
 800b416:	2200      	movs	r2, #0
 800b418:	4b18      	ldr	r3, [pc, #96]	; (800b47c <pow+0x2c8>)
 800b41a:	e7da      	b.n	800b3d2 <pow+0x21e>
 800b41c:	2200      	movs	r2, #0
 800b41e:	2300      	movs	r3, #0
 800b420:	ec51 0b18 	vmov	r0, r1, d8
 800b424:	f7f5 fb78 	bl	8000b18 <__aeabi_dcmpeq>
 800b428:	2800      	cmp	r0, #0
 800b42a:	f43f af3a 	beq.w	800b2a2 <pow+0xee>
 800b42e:	ec47 6b10 	vmov	d0, r6, r7
 800b432:	f002 f942 	bl	800d6ba <finite>
 800b436:	2800      	cmp	r0, #0
 800b438:	f43f af33 	beq.w	800b2a2 <pow+0xee>
 800b43c:	ec45 4b10 	vmov	d0, r4, r5
 800b440:	f002 f93b 	bl	800d6ba <finite>
 800b444:	2800      	cmp	r0, #0
 800b446:	f43f af2c 	beq.w	800b2a2 <pow+0xee>
 800b44a:	2304      	movs	r3, #4
 800b44c:	9302      	str	r3, [sp, #8]
 800b44e:	4b09      	ldr	r3, [pc, #36]	; (800b474 <pow+0x2c0>)
 800b450:	9303      	str	r3, [sp, #12]
 800b452:	2300      	movs	r3, #0
 800b454:	930a      	str	r3, [sp, #40]	; 0x28
 800b456:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b45a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b45e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b462:	e7b8      	b.n	800b3d6 <pow+0x222>
 800b464:	a802      	add	r0, sp, #8
 800b466:	f002 f9b7 	bl	800d7d8 <matherr>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	f47f af11 	bne.w	800b292 <pow+0xde>
 800b470:	e7b5      	b.n	800b3de <pow+0x22a>
 800b472:	bf00      	nop
 800b474:	0800dd8b 	.word	0x0800dd8b
 800b478:	3ff00000 	.word	0x3ff00000
 800b47c:	fff00000 	.word	0xfff00000
 800b480:	3fe00000 	.word	0x3fe00000
 800b484:	47efffff 	.word	0x47efffff
 800b488:	c7efffff 	.word	0xc7efffff
 800b48c:	7ff00000 	.word	0x7ff00000
 800b490:	200030bc 	.word	0x200030bc
 800b494:	00000000 	.word	0x00000000

0800b498 <__ieee754_asin>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	ec55 4b10 	vmov	r4, r5, d0
 800b4a0:	4bcb      	ldr	r3, [pc, #812]	; (800b7d0 <__ieee754_asin+0x338>)
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b4a8:	429f      	cmp	r7, r3
 800b4aa:	9501      	str	r5, [sp, #4]
 800b4ac:	dd31      	ble.n	800b512 <__ieee754_asin+0x7a>
 800b4ae:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800b4b2:	ee10 3a10 	vmov	r3, s0
 800b4b6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800b4ba:	433b      	orrs	r3, r7
 800b4bc:	d117      	bne.n	800b4ee <__ieee754_asin+0x56>
 800b4be:	a3aa      	add	r3, pc, #680	; (adr r3, 800b768 <__ieee754_asin+0x2d0>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	ee10 0a10 	vmov	r0, s0
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f5 f8bd 	bl	8000648 <__aeabi_dmul>
 800b4ce:	a3a8      	add	r3, pc, #672	; (adr r3, 800b770 <__ieee754_asin+0x2d8>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460f      	mov	r7, r1
 800b4d8:	4620      	mov	r0, r4
 800b4da:	4629      	mov	r1, r5
 800b4dc:	f7f5 f8b4 	bl	8000648 <__aeabi_dmul>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f7f4 fef8 	bl	80002dc <__adddf3>
 800b4ec:	e00a      	b.n	800b504 <__ieee754_asin+0x6c>
 800b4ee:	ee10 2a10 	vmov	r2, s0
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f4 feee 	bl	80002d8 <__aeabi_dsub>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	f7f5 f9cc 	bl	800089c <__aeabi_ddiv>
 800b504:	4604      	mov	r4, r0
 800b506:	460d      	mov	r5, r1
 800b508:	ec45 4b10 	vmov	d0, r4, r5
 800b50c:	b007      	add	sp, #28
 800b50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b512:	4bb0      	ldr	r3, [pc, #704]	; (800b7d4 <__ieee754_asin+0x33c>)
 800b514:	429f      	cmp	r7, r3
 800b516:	dc11      	bgt.n	800b53c <__ieee754_asin+0xa4>
 800b518:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800b51c:	f280 80ae 	bge.w	800b67c <__ieee754_asin+0x1e4>
 800b520:	a395      	add	r3, pc, #596	; (adr r3, 800b778 <__ieee754_asin+0x2e0>)
 800b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b526:	ee10 0a10 	vmov	r0, s0
 800b52a:	4629      	mov	r1, r5
 800b52c:	f7f4 fed6 	bl	80002dc <__adddf3>
 800b530:	2200      	movs	r2, #0
 800b532:	4ba9      	ldr	r3, [pc, #676]	; (800b7d8 <__ieee754_asin+0x340>)
 800b534:	f7f5 fb18 	bl	8000b68 <__aeabi_dcmpgt>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d1e5      	bne.n	800b508 <__ieee754_asin+0x70>
 800b53c:	ec45 4b10 	vmov	d0, r4, r5
 800b540:	f002 f8b2 	bl	800d6a8 <fabs>
 800b544:	2000      	movs	r0, #0
 800b546:	ec53 2b10 	vmov	r2, r3, d0
 800b54a:	49a3      	ldr	r1, [pc, #652]	; (800b7d8 <__ieee754_asin+0x340>)
 800b54c:	f7f4 fec4 	bl	80002d8 <__aeabi_dsub>
 800b550:	2200      	movs	r2, #0
 800b552:	4ba2      	ldr	r3, [pc, #648]	; (800b7dc <__ieee754_asin+0x344>)
 800b554:	f7f5 f878 	bl	8000648 <__aeabi_dmul>
 800b558:	a389      	add	r3, pc, #548	; (adr r3, 800b780 <__ieee754_asin+0x2e8>)
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	4604      	mov	r4, r0
 800b560:	460d      	mov	r5, r1
 800b562:	f7f5 f871 	bl	8000648 <__aeabi_dmul>
 800b566:	a388      	add	r3, pc, #544	; (adr r3, 800b788 <__ieee754_asin+0x2f0>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f4 feb6 	bl	80002dc <__adddf3>
 800b570:	4622      	mov	r2, r4
 800b572:	462b      	mov	r3, r5
 800b574:	f7f5 f868 	bl	8000648 <__aeabi_dmul>
 800b578:	a385      	add	r3, pc, #532	; (adr r3, 800b790 <__ieee754_asin+0x2f8>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f7f4 feab 	bl	80002d8 <__aeabi_dsub>
 800b582:	4622      	mov	r2, r4
 800b584:	462b      	mov	r3, r5
 800b586:	f7f5 f85f 	bl	8000648 <__aeabi_dmul>
 800b58a:	a383      	add	r3, pc, #524	; (adr r3, 800b798 <__ieee754_asin+0x300>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f4 fea4 	bl	80002dc <__adddf3>
 800b594:	4622      	mov	r2, r4
 800b596:	462b      	mov	r3, r5
 800b598:	f7f5 f856 	bl	8000648 <__aeabi_dmul>
 800b59c:	a380      	add	r3, pc, #512	; (adr r3, 800b7a0 <__ieee754_asin+0x308>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	f7f4 fe99 	bl	80002d8 <__aeabi_dsub>
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	f7f5 f84d 	bl	8000648 <__aeabi_dmul>
 800b5ae:	a37e      	add	r3, pc, #504	; (adr r3, 800b7a8 <__ieee754_asin+0x310>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f7f4 fe92 	bl	80002dc <__adddf3>
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	f7f5 f844 	bl	8000648 <__aeabi_dmul>
 800b5c0:	a37b      	add	r3, pc, #492	; (adr r3, 800b7b0 <__ieee754_asin+0x318>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	4689      	mov	r9, r1
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7f5 f83b 	bl	8000648 <__aeabi_dmul>
 800b5d2:	a379      	add	r3, pc, #484	; (adr r3, 800b7b8 <__ieee754_asin+0x320>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f7f4 fe7e 	bl	80002d8 <__aeabi_dsub>
 800b5dc:	4622      	mov	r2, r4
 800b5de:	462b      	mov	r3, r5
 800b5e0:	f7f5 f832 	bl	8000648 <__aeabi_dmul>
 800b5e4:	a376      	add	r3, pc, #472	; (adr r3, 800b7c0 <__ieee754_asin+0x328>)
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	f7f4 fe77 	bl	80002dc <__adddf3>
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	462b      	mov	r3, r5
 800b5f2:	f7f5 f829 	bl	8000648 <__aeabi_dmul>
 800b5f6:	a374      	add	r3, pc, #464	; (adr r3, 800b7c8 <__ieee754_asin+0x330>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f4 fe6c 	bl	80002d8 <__aeabi_dsub>
 800b600:	4622      	mov	r2, r4
 800b602:	462b      	mov	r3, r5
 800b604:	f7f5 f820 	bl	8000648 <__aeabi_dmul>
 800b608:	4b73      	ldr	r3, [pc, #460]	; (800b7d8 <__ieee754_asin+0x340>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	f7f4 fe66 	bl	80002dc <__adddf3>
 800b610:	ec45 4b10 	vmov	d0, r4, r5
 800b614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b618:	f001 f930 	bl	800c87c <__ieee754_sqrt>
 800b61c:	4b70      	ldr	r3, [pc, #448]	; (800b7e0 <__ieee754_asin+0x348>)
 800b61e:	429f      	cmp	r7, r3
 800b620:	ec5b ab10 	vmov	sl, fp, d0
 800b624:	f340 80de 	ble.w	800b7e4 <__ieee754_asin+0x34c>
 800b628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b62c:	4640      	mov	r0, r8
 800b62e:	4649      	mov	r1, r9
 800b630:	f7f5 f934 	bl	800089c <__aeabi_ddiv>
 800b634:	4652      	mov	r2, sl
 800b636:	465b      	mov	r3, fp
 800b638:	f7f5 f806 	bl	8000648 <__aeabi_dmul>
 800b63c:	4652      	mov	r2, sl
 800b63e:	465b      	mov	r3, fp
 800b640:	f7f4 fe4c 	bl	80002dc <__adddf3>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	f7f4 fe48 	bl	80002dc <__adddf3>
 800b64c:	a348      	add	r3, pc, #288	; (adr r3, 800b770 <__ieee754_asin+0x2d8>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f7f4 fe41 	bl	80002d8 <__aeabi_dsub>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	a143      	add	r1, pc, #268	; (adr r1, 800b768 <__ieee754_asin+0x2d0>)
 800b65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b660:	f7f4 fe3a 	bl	80002d8 <__aeabi_dsub>
 800b664:	9b01      	ldr	r3, [sp, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	bfdc      	itt	le
 800b66a:	4602      	movle	r2, r0
 800b66c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b670:	4604      	mov	r4, r0
 800b672:	460d      	mov	r5, r1
 800b674:	bfdc      	itt	le
 800b676:	4614      	movle	r4, r2
 800b678:	461d      	movle	r5, r3
 800b67a:	e745      	b.n	800b508 <__ieee754_asin+0x70>
 800b67c:	ee10 2a10 	vmov	r2, s0
 800b680:	ee10 0a10 	vmov	r0, s0
 800b684:	462b      	mov	r3, r5
 800b686:	4629      	mov	r1, r5
 800b688:	f7f4 ffde 	bl	8000648 <__aeabi_dmul>
 800b68c:	a33c      	add	r3, pc, #240	; (adr r3, 800b780 <__ieee754_asin+0x2e8>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	4606      	mov	r6, r0
 800b694:	460f      	mov	r7, r1
 800b696:	f7f4 ffd7 	bl	8000648 <__aeabi_dmul>
 800b69a:	a33b      	add	r3, pc, #236	; (adr r3, 800b788 <__ieee754_asin+0x2f0>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 fe1c 	bl	80002dc <__adddf3>
 800b6a4:	4632      	mov	r2, r6
 800b6a6:	463b      	mov	r3, r7
 800b6a8:	f7f4 ffce 	bl	8000648 <__aeabi_dmul>
 800b6ac:	a338      	add	r3, pc, #224	; (adr r3, 800b790 <__ieee754_asin+0x2f8>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fe11 	bl	80002d8 <__aeabi_dsub>
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	463b      	mov	r3, r7
 800b6ba:	f7f4 ffc5 	bl	8000648 <__aeabi_dmul>
 800b6be:	a336      	add	r3, pc, #216	; (adr r3, 800b798 <__ieee754_asin+0x300>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7f4 fe0a 	bl	80002dc <__adddf3>
 800b6c8:	4632      	mov	r2, r6
 800b6ca:	463b      	mov	r3, r7
 800b6cc:	f7f4 ffbc 	bl	8000648 <__aeabi_dmul>
 800b6d0:	a333      	add	r3, pc, #204	; (adr r3, 800b7a0 <__ieee754_asin+0x308>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7f4 fdff 	bl	80002d8 <__aeabi_dsub>
 800b6da:	4632      	mov	r2, r6
 800b6dc:	463b      	mov	r3, r7
 800b6de:	f7f4 ffb3 	bl	8000648 <__aeabi_dmul>
 800b6e2:	a331      	add	r3, pc, #196	; (adr r3, 800b7a8 <__ieee754_asin+0x310>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 fdf8 	bl	80002dc <__adddf3>
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	463b      	mov	r3, r7
 800b6f0:	f7f4 ffaa 	bl	8000648 <__aeabi_dmul>
 800b6f4:	a32e      	add	r3, pc, #184	; (adr r3, 800b7b0 <__ieee754_asin+0x318>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	4689      	mov	r9, r1
 800b6fe:	4630      	mov	r0, r6
 800b700:	4639      	mov	r1, r7
 800b702:	f7f4 ffa1 	bl	8000648 <__aeabi_dmul>
 800b706:	a32c      	add	r3, pc, #176	; (adr r3, 800b7b8 <__ieee754_asin+0x320>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f7f4 fde4 	bl	80002d8 <__aeabi_dsub>
 800b710:	4632      	mov	r2, r6
 800b712:	463b      	mov	r3, r7
 800b714:	f7f4 ff98 	bl	8000648 <__aeabi_dmul>
 800b718:	a329      	add	r3, pc, #164	; (adr r3, 800b7c0 <__ieee754_asin+0x328>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fddd 	bl	80002dc <__adddf3>
 800b722:	4632      	mov	r2, r6
 800b724:	463b      	mov	r3, r7
 800b726:	f7f4 ff8f 	bl	8000648 <__aeabi_dmul>
 800b72a:	a327      	add	r3, pc, #156	; (adr r3, 800b7c8 <__ieee754_asin+0x330>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f7f4 fdd2 	bl	80002d8 <__aeabi_dsub>
 800b734:	4632      	mov	r2, r6
 800b736:	463b      	mov	r3, r7
 800b738:	f7f4 ff86 	bl	8000648 <__aeabi_dmul>
 800b73c:	2200      	movs	r2, #0
 800b73e:	4b26      	ldr	r3, [pc, #152]	; (800b7d8 <__ieee754_asin+0x340>)
 800b740:	f7f4 fdcc 	bl	80002dc <__adddf3>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f5 f8a6 	bl	800089c <__aeabi_ddiv>
 800b750:	4622      	mov	r2, r4
 800b752:	462b      	mov	r3, r5
 800b754:	f7f4 ff78 	bl	8000648 <__aeabi_dmul>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4620      	mov	r0, r4
 800b75e:	4629      	mov	r1, r5
 800b760:	e6c2      	b.n	800b4e8 <__ieee754_asin+0x50>
 800b762:	bf00      	nop
 800b764:	f3af 8000 	nop.w
 800b768:	54442d18 	.word	0x54442d18
 800b76c:	3ff921fb 	.word	0x3ff921fb
 800b770:	33145c07 	.word	0x33145c07
 800b774:	3c91a626 	.word	0x3c91a626
 800b778:	8800759c 	.word	0x8800759c
 800b77c:	7e37e43c 	.word	0x7e37e43c
 800b780:	0dfdf709 	.word	0x0dfdf709
 800b784:	3f023de1 	.word	0x3f023de1
 800b788:	7501b288 	.word	0x7501b288
 800b78c:	3f49efe0 	.word	0x3f49efe0
 800b790:	b5688f3b 	.word	0xb5688f3b
 800b794:	3fa48228 	.word	0x3fa48228
 800b798:	0e884455 	.word	0x0e884455
 800b79c:	3fc9c155 	.word	0x3fc9c155
 800b7a0:	03eb6f7d 	.word	0x03eb6f7d
 800b7a4:	3fd4d612 	.word	0x3fd4d612
 800b7a8:	55555555 	.word	0x55555555
 800b7ac:	3fc55555 	.word	0x3fc55555
 800b7b0:	b12e9282 	.word	0xb12e9282
 800b7b4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b7b8:	1b8d0159 	.word	0x1b8d0159
 800b7bc:	3fe6066c 	.word	0x3fe6066c
 800b7c0:	9c598ac8 	.word	0x9c598ac8
 800b7c4:	40002ae5 	.word	0x40002ae5
 800b7c8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b7cc:	40033a27 	.word	0x40033a27
 800b7d0:	3fefffff 	.word	0x3fefffff
 800b7d4:	3fdfffff 	.word	0x3fdfffff
 800b7d8:	3ff00000 	.word	0x3ff00000
 800b7dc:	3fe00000 	.word	0x3fe00000
 800b7e0:	3fef3332 	.word	0x3fef3332
 800b7e4:	ee10 2a10 	vmov	r2, s0
 800b7e8:	ee10 0a10 	vmov	r0, s0
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	4659      	mov	r1, fp
 800b7f0:	f7f4 fd74 	bl	80002dc <__adddf3>
 800b7f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f7f5 f84c 	bl	800089c <__aeabi_ddiv>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b80c:	f7f4 ff1c 	bl	8000648 <__aeabi_dmul>
 800b810:	2600      	movs	r6, #0
 800b812:	4680      	mov	r8, r0
 800b814:	4689      	mov	r9, r1
 800b816:	4632      	mov	r2, r6
 800b818:	465b      	mov	r3, fp
 800b81a:	4630      	mov	r0, r6
 800b81c:	4659      	mov	r1, fp
 800b81e:	f7f4 ff13 	bl	8000648 <__aeabi_dmul>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	4620      	mov	r0, r4
 800b828:	4629      	mov	r1, r5
 800b82a:	f7f4 fd55 	bl	80002d8 <__aeabi_dsub>
 800b82e:	4632      	mov	r2, r6
 800b830:	4604      	mov	r4, r0
 800b832:	460d      	mov	r5, r1
 800b834:	465b      	mov	r3, fp
 800b836:	4650      	mov	r0, sl
 800b838:	4659      	mov	r1, fp
 800b83a:	f7f4 fd4f 	bl	80002dc <__adddf3>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4620      	mov	r0, r4
 800b844:	4629      	mov	r1, r5
 800b846:	f7f5 f829 	bl	800089c <__aeabi_ddiv>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	f7f4 fd45 	bl	80002dc <__adddf3>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	a114      	add	r1, pc, #80	; (adr r1, 800b8a8 <__ieee754_asin+0x410>)
 800b858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b85c:	f7f4 fd3c 	bl	80002d8 <__aeabi_dsub>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4640      	mov	r0, r8
 800b866:	4649      	mov	r1, r9
 800b868:	f7f4 fd36 	bl	80002d8 <__aeabi_dsub>
 800b86c:	465f      	mov	r7, fp
 800b86e:	4604      	mov	r4, r0
 800b870:	460d      	mov	r5, r1
 800b872:	4632      	mov	r2, r6
 800b874:	465b      	mov	r3, fp
 800b876:	4630      	mov	r0, r6
 800b878:	4639      	mov	r1, r7
 800b87a:	f7f4 fd2f 	bl	80002dc <__adddf3>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	a10b      	add	r1, pc, #44	; (adr r1, 800b8b0 <__ieee754_asin+0x418>)
 800b884:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b888:	f7f4 fd26 	bl	80002d8 <__aeabi_dsub>
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	4620      	mov	r0, r4
 800b892:	4629      	mov	r1, r5
 800b894:	f7f4 fd20 	bl	80002d8 <__aeabi_dsub>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	a104      	add	r1, pc, #16	; (adr r1, 800b8b0 <__ieee754_asin+0x418>)
 800b89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8a2:	e6dd      	b.n	800b660 <__ieee754_asin+0x1c8>
 800b8a4:	f3af 8000 	nop.w
 800b8a8:	33145c07 	.word	0x33145c07
 800b8ac:	3c91a626 	.word	0x3c91a626
 800b8b0:	54442d18 	.word	0x54442d18
 800b8b4:	3fe921fb 	.word	0x3fe921fb

0800b8b8 <__ieee754_atan2>:
 800b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	ec57 6b11 	vmov	r6, r7, d1
 800b8c0:	4273      	negs	r3, r6
 800b8c2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b8c6:	4333      	orrs	r3, r6
 800b8c8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800ba70 <__ieee754_atan2+0x1b8>
 800b8cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b8d0:	4573      	cmp	r3, lr
 800b8d2:	ec51 0b10 	vmov	r0, r1, d0
 800b8d6:	ee11 8a10 	vmov	r8, s2
 800b8da:	d80a      	bhi.n	800b8f2 <__ieee754_atan2+0x3a>
 800b8dc:	4244      	negs	r4, r0
 800b8de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8e2:	4304      	orrs	r4, r0
 800b8e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b8e8:	4574      	cmp	r4, lr
 800b8ea:	468c      	mov	ip, r1
 800b8ec:	ee10 9a10 	vmov	r9, s0
 800b8f0:	d907      	bls.n	800b902 <__ieee754_atan2+0x4a>
 800b8f2:	4632      	mov	r2, r6
 800b8f4:	463b      	mov	r3, r7
 800b8f6:	f7f4 fcf1 	bl	80002dc <__adddf3>
 800b8fa:	ec41 0b10 	vmov	d0, r0, r1
 800b8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b902:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b906:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b90a:	4334      	orrs	r4, r6
 800b90c:	d103      	bne.n	800b916 <__ieee754_atan2+0x5e>
 800b90e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b912:	f001 bd29 	b.w	800d368 <atan>
 800b916:	17bc      	asrs	r4, r7, #30
 800b918:	f004 0402 	and.w	r4, r4, #2
 800b91c:	ea53 0909 	orrs.w	r9, r3, r9
 800b920:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b924:	d107      	bne.n	800b936 <__ieee754_atan2+0x7e>
 800b926:	2c02      	cmp	r4, #2
 800b928:	d073      	beq.n	800ba12 <__ieee754_atan2+0x15a>
 800b92a:	2c03      	cmp	r4, #3
 800b92c:	d1e5      	bne.n	800b8fa <__ieee754_atan2+0x42>
 800b92e:	a13e      	add	r1, pc, #248	; (adr r1, 800ba28 <__ieee754_atan2+0x170>)
 800b930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b934:	e7e1      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b936:	ea52 0808 	orrs.w	r8, r2, r8
 800b93a:	d106      	bne.n	800b94a <__ieee754_atan2+0x92>
 800b93c:	f1bc 0f00 	cmp.w	ip, #0
 800b940:	da6b      	bge.n	800ba1a <__ieee754_atan2+0x162>
 800b942:	a13b      	add	r1, pc, #236	; (adr r1, 800ba30 <__ieee754_atan2+0x178>)
 800b944:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b948:	e7d7      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b94a:	4572      	cmp	r2, lr
 800b94c:	d120      	bne.n	800b990 <__ieee754_atan2+0xd8>
 800b94e:	4293      	cmp	r3, r2
 800b950:	d111      	bne.n	800b976 <__ieee754_atan2+0xbe>
 800b952:	2c02      	cmp	r4, #2
 800b954:	d007      	beq.n	800b966 <__ieee754_atan2+0xae>
 800b956:	2c03      	cmp	r4, #3
 800b958:	d009      	beq.n	800b96e <__ieee754_atan2+0xb6>
 800b95a:	2c01      	cmp	r4, #1
 800b95c:	d155      	bne.n	800ba0a <__ieee754_atan2+0x152>
 800b95e:	a136      	add	r1, pc, #216	; (adr r1, 800ba38 <__ieee754_atan2+0x180>)
 800b960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b964:	e7c9      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b966:	a136      	add	r1, pc, #216	; (adr r1, 800ba40 <__ieee754_atan2+0x188>)
 800b968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96c:	e7c5      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b96e:	a136      	add	r1, pc, #216	; (adr r1, 800ba48 <__ieee754_atan2+0x190>)
 800b970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b974:	e7c1      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b976:	2c02      	cmp	r4, #2
 800b978:	d04b      	beq.n	800ba12 <__ieee754_atan2+0x15a>
 800b97a:	2c03      	cmp	r4, #3
 800b97c:	d0d7      	beq.n	800b92e <__ieee754_atan2+0x76>
 800b97e:	2c01      	cmp	r4, #1
 800b980:	f04f 0000 	mov.w	r0, #0
 800b984:	d102      	bne.n	800b98c <__ieee754_atan2+0xd4>
 800b986:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b98a:	e7b6      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b98c:	2100      	movs	r1, #0
 800b98e:	e7b4      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b990:	4573      	cmp	r3, lr
 800b992:	d0d3      	beq.n	800b93c <__ieee754_atan2+0x84>
 800b994:	1a9b      	subs	r3, r3, r2
 800b996:	151b      	asrs	r3, r3, #20
 800b998:	2b3c      	cmp	r3, #60	; 0x3c
 800b99a:	dc1e      	bgt.n	800b9da <__ieee754_atan2+0x122>
 800b99c:	2f00      	cmp	r7, #0
 800b99e:	da01      	bge.n	800b9a4 <__ieee754_atan2+0xec>
 800b9a0:	333c      	adds	r3, #60	; 0x3c
 800b9a2:	db1e      	blt.n	800b9e2 <__ieee754_atan2+0x12a>
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	f7f4 ff78 	bl	800089c <__aeabi_ddiv>
 800b9ac:	ec41 0b10 	vmov	d0, r0, r1
 800b9b0:	f001 fe7a 	bl	800d6a8 <fabs>
 800b9b4:	f001 fcd8 	bl	800d368 <atan>
 800b9b8:	ec51 0b10 	vmov	r0, r1, d0
 800b9bc:	2c01      	cmp	r4, #1
 800b9be:	d013      	beq.n	800b9e8 <__ieee754_atan2+0x130>
 800b9c0:	2c02      	cmp	r4, #2
 800b9c2:	d015      	beq.n	800b9f0 <__ieee754_atan2+0x138>
 800b9c4:	2c00      	cmp	r4, #0
 800b9c6:	d098      	beq.n	800b8fa <__ieee754_atan2+0x42>
 800b9c8:	a321      	add	r3, pc, #132	; (adr r3, 800ba50 <__ieee754_atan2+0x198>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fc83 	bl	80002d8 <__aeabi_dsub>
 800b9d2:	a321      	add	r3, pc, #132	; (adr r3, 800ba58 <__ieee754_atan2+0x1a0>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	e014      	b.n	800ba04 <__ieee754_atan2+0x14c>
 800b9da:	a121      	add	r1, pc, #132	; (adr r1, 800ba60 <__ieee754_atan2+0x1a8>)
 800b9dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9e0:	e7ec      	b.n	800b9bc <__ieee754_atan2+0x104>
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	e7e9      	b.n	800b9bc <__ieee754_atan2+0x104>
 800b9e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	e784      	b.n	800b8fa <__ieee754_atan2+0x42>
 800b9f0:	a317      	add	r3, pc, #92	; (adr r3, 800ba50 <__ieee754_atan2+0x198>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	f7f4 fc6f 	bl	80002d8 <__aeabi_dsub>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	a116      	add	r1, pc, #88	; (adr r1, 800ba58 <__ieee754_atan2+0x1a0>)
 800ba00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba04:	f7f4 fc68 	bl	80002d8 <__aeabi_dsub>
 800ba08:	e777      	b.n	800b8fa <__ieee754_atan2+0x42>
 800ba0a:	a117      	add	r1, pc, #92	; (adr r1, 800ba68 <__ieee754_atan2+0x1b0>)
 800ba0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba10:	e773      	b.n	800b8fa <__ieee754_atan2+0x42>
 800ba12:	a111      	add	r1, pc, #68	; (adr r1, 800ba58 <__ieee754_atan2+0x1a0>)
 800ba14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba18:	e76f      	b.n	800b8fa <__ieee754_atan2+0x42>
 800ba1a:	a111      	add	r1, pc, #68	; (adr r1, 800ba60 <__ieee754_atan2+0x1a8>)
 800ba1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba20:	e76b      	b.n	800b8fa <__ieee754_atan2+0x42>
 800ba22:	bf00      	nop
 800ba24:	f3af 8000 	nop.w
 800ba28:	54442d18 	.word	0x54442d18
 800ba2c:	c00921fb 	.word	0xc00921fb
 800ba30:	54442d18 	.word	0x54442d18
 800ba34:	bff921fb 	.word	0xbff921fb
 800ba38:	54442d18 	.word	0x54442d18
 800ba3c:	bfe921fb 	.word	0xbfe921fb
 800ba40:	7f3321d2 	.word	0x7f3321d2
 800ba44:	4002d97c 	.word	0x4002d97c
 800ba48:	7f3321d2 	.word	0x7f3321d2
 800ba4c:	c002d97c 	.word	0xc002d97c
 800ba50:	33145c07 	.word	0x33145c07
 800ba54:	3ca1a626 	.word	0x3ca1a626
 800ba58:	54442d18 	.word	0x54442d18
 800ba5c:	400921fb 	.word	0x400921fb
 800ba60:	54442d18 	.word	0x54442d18
 800ba64:	3ff921fb 	.word	0x3ff921fb
 800ba68:	54442d18 	.word	0x54442d18
 800ba6c:	3fe921fb 	.word	0x3fe921fb
 800ba70:	7ff00000 	.word	0x7ff00000
 800ba74:	00000000 	.word	0x00000000

0800ba78 <__ieee754_pow>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	b091      	sub	sp, #68	; 0x44
 800ba7e:	ed8d 1b00 	vstr	d1, [sp]
 800ba82:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ba86:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ba8a:	ea58 0302 	orrs.w	r3, r8, r2
 800ba8e:	ec57 6b10 	vmov	r6, r7, d0
 800ba92:	f000 84be 	beq.w	800c412 <__ieee754_pow+0x99a>
 800ba96:	4b7a      	ldr	r3, [pc, #488]	; (800bc80 <__ieee754_pow+0x208>)
 800ba98:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	463d      	mov	r5, r7
 800baa0:	ee10 aa10 	vmov	sl, s0
 800baa4:	dc09      	bgt.n	800baba <__ieee754_pow+0x42>
 800baa6:	d103      	bne.n	800bab0 <__ieee754_pow+0x38>
 800baa8:	b93e      	cbnz	r6, 800baba <__ieee754_pow+0x42>
 800baaa:	45a0      	cmp	r8, r4
 800baac:	dc0d      	bgt.n	800baca <__ieee754_pow+0x52>
 800baae:	e001      	b.n	800bab4 <__ieee754_pow+0x3c>
 800bab0:	4598      	cmp	r8, r3
 800bab2:	dc02      	bgt.n	800baba <__ieee754_pow+0x42>
 800bab4:	4598      	cmp	r8, r3
 800bab6:	d10e      	bne.n	800bad6 <__ieee754_pow+0x5e>
 800bab8:	b16a      	cbz	r2, 800bad6 <__ieee754_pow+0x5e>
 800baba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800babe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bac2:	ea54 030a 	orrs.w	r3, r4, sl
 800bac6:	f000 84a4 	beq.w	800c412 <__ieee754_pow+0x99a>
 800baca:	486e      	ldr	r0, [pc, #440]	; (800bc84 <__ieee754_pow+0x20c>)
 800bacc:	b011      	add	sp, #68	; 0x44
 800bace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad2:	f001 be85 	b.w	800d7e0 <nan>
 800bad6:	2d00      	cmp	r5, #0
 800bad8:	da53      	bge.n	800bb82 <__ieee754_pow+0x10a>
 800bada:	4b6b      	ldr	r3, [pc, #428]	; (800bc88 <__ieee754_pow+0x210>)
 800badc:	4598      	cmp	r8, r3
 800bade:	dc4d      	bgt.n	800bb7c <__ieee754_pow+0x104>
 800bae0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bae4:	4598      	cmp	r8, r3
 800bae6:	dd4c      	ble.n	800bb82 <__ieee754_pow+0x10a>
 800bae8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800baec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800baf0:	2b14      	cmp	r3, #20
 800baf2:	dd26      	ble.n	800bb42 <__ieee754_pow+0xca>
 800baf4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800baf8:	fa22 f103 	lsr.w	r1, r2, r3
 800bafc:	fa01 f303 	lsl.w	r3, r1, r3
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d13e      	bne.n	800bb82 <__ieee754_pow+0x10a>
 800bb04:	f001 0101 	and.w	r1, r1, #1
 800bb08:	f1c1 0b02 	rsb	fp, r1, #2
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	d15b      	bne.n	800bbc8 <__ieee754_pow+0x150>
 800bb10:	4b5b      	ldr	r3, [pc, #364]	; (800bc80 <__ieee754_pow+0x208>)
 800bb12:	4598      	cmp	r8, r3
 800bb14:	d124      	bne.n	800bb60 <__ieee754_pow+0xe8>
 800bb16:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bb1a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bb1e:	ea53 030a 	orrs.w	r3, r3, sl
 800bb22:	f000 8476 	beq.w	800c412 <__ieee754_pow+0x99a>
 800bb26:	4b59      	ldr	r3, [pc, #356]	; (800bc8c <__ieee754_pow+0x214>)
 800bb28:	429c      	cmp	r4, r3
 800bb2a:	dd2d      	ble.n	800bb88 <__ieee754_pow+0x110>
 800bb2c:	f1b9 0f00 	cmp.w	r9, #0
 800bb30:	f280 8473 	bge.w	800c41a <__ieee754_pow+0x9a2>
 800bb34:	2000      	movs	r0, #0
 800bb36:	2100      	movs	r1, #0
 800bb38:	ec41 0b10 	vmov	d0, r0, r1
 800bb3c:	b011      	add	sp, #68	; 0x44
 800bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	d13e      	bne.n	800bbc4 <__ieee754_pow+0x14c>
 800bb46:	f1c3 0314 	rsb	r3, r3, #20
 800bb4a:	fa48 f103 	asr.w	r1, r8, r3
 800bb4e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb52:	4543      	cmp	r3, r8
 800bb54:	f040 8469 	bne.w	800c42a <__ieee754_pow+0x9b2>
 800bb58:	f001 0101 	and.w	r1, r1, #1
 800bb5c:	f1c1 0b02 	rsb	fp, r1, #2
 800bb60:	4b4b      	ldr	r3, [pc, #300]	; (800bc90 <__ieee754_pow+0x218>)
 800bb62:	4598      	cmp	r8, r3
 800bb64:	d118      	bne.n	800bb98 <__ieee754_pow+0x120>
 800bb66:	f1b9 0f00 	cmp.w	r9, #0
 800bb6a:	f280 845a 	bge.w	800c422 <__ieee754_pow+0x9aa>
 800bb6e:	4948      	ldr	r1, [pc, #288]	; (800bc90 <__ieee754_pow+0x218>)
 800bb70:	4632      	mov	r2, r6
 800bb72:	463b      	mov	r3, r7
 800bb74:	2000      	movs	r0, #0
 800bb76:	f7f4 fe91 	bl	800089c <__aeabi_ddiv>
 800bb7a:	e7dd      	b.n	800bb38 <__ieee754_pow+0xc0>
 800bb7c:	f04f 0b02 	mov.w	fp, #2
 800bb80:	e7c4      	b.n	800bb0c <__ieee754_pow+0x94>
 800bb82:	f04f 0b00 	mov.w	fp, #0
 800bb86:	e7c1      	b.n	800bb0c <__ieee754_pow+0x94>
 800bb88:	f1b9 0f00 	cmp.w	r9, #0
 800bb8c:	dad2      	bge.n	800bb34 <__ieee754_pow+0xbc>
 800bb8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bb92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb96:	e7cf      	b.n	800bb38 <__ieee754_pow+0xc0>
 800bb98:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bb9c:	d106      	bne.n	800bbac <__ieee754_pow+0x134>
 800bb9e:	4632      	mov	r2, r6
 800bba0:	463b      	mov	r3, r7
 800bba2:	4610      	mov	r0, r2
 800bba4:	4619      	mov	r1, r3
 800bba6:	f7f4 fd4f 	bl	8000648 <__aeabi_dmul>
 800bbaa:	e7c5      	b.n	800bb38 <__ieee754_pow+0xc0>
 800bbac:	4b39      	ldr	r3, [pc, #228]	; (800bc94 <__ieee754_pow+0x21c>)
 800bbae:	4599      	cmp	r9, r3
 800bbb0:	d10a      	bne.n	800bbc8 <__ieee754_pow+0x150>
 800bbb2:	2d00      	cmp	r5, #0
 800bbb4:	db08      	blt.n	800bbc8 <__ieee754_pow+0x150>
 800bbb6:	ec47 6b10 	vmov	d0, r6, r7
 800bbba:	b011      	add	sp, #68	; 0x44
 800bbbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	f000 be5c 	b.w	800c87c <__ieee754_sqrt>
 800bbc4:	f04f 0b00 	mov.w	fp, #0
 800bbc8:	ec47 6b10 	vmov	d0, r6, r7
 800bbcc:	f001 fd6c 	bl	800d6a8 <fabs>
 800bbd0:	ec51 0b10 	vmov	r0, r1, d0
 800bbd4:	f1ba 0f00 	cmp.w	sl, #0
 800bbd8:	d127      	bne.n	800bc2a <__ieee754_pow+0x1b2>
 800bbda:	b124      	cbz	r4, 800bbe6 <__ieee754_pow+0x16e>
 800bbdc:	4b2c      	ldr	r3, [pc, #176]	; (800bc90 <__ieee754_pow+0x218>)
 800bbde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d121      	bne.n	800bc2a <__ieee754_pow+0x1b2>
 800bbe6:	f1b9 0f00 	cmp.w	r9, #0
 800bbea:	da05      	bge.n	800bbf8 <__ieee754_pow+0x180>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	4927      	ldr	r1, [pc, #156]	; (800bc90 <__ieee754_pow+0x218>)
 800bbf4:	f7f4 fe52 	bl	800089c <__aeabi_ddiv>
 800bbf8:	2d00      	cmp	r5, #0
 800bbfa:	da9d      	bge.n	800bb38 <__ieee754_pow+0xc0>
 800bbfc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bc00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc04:	ea54 030b 	orrs.w	r3, r4, fp
 800bc08:	d108      	bne.n	800bc1c <__ieee754_pow+0x1a4>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4610      	mov	r0, r2
 800bc10:	4619      	mov	r1, r3
 800bc12:	f7f4 fb61 	bl	80002d8 <__aeabi_dsub>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	e7ac      	b.n	800bb76 <__ieee754_pow+0xfe>
 800bc1c:	f1bb 0f01 	cmp.w	fp, #1
 800bc20:	d18a      	bne.n	800bb38 <__ieee754_pow+0xc0>
 800bc22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc26:	4619      	mov	r1, r3
 800bc28:	e786      	b.n	800bb38 <__ieee754_pow+0xc0>
 800bc2a:	0fed      	lsrs	r5, r5, #31
 800bc2c:	1e6b      	subs	r3, r5, #1
 800bc2e:	930d      	str	r3, [sp, #52]	; 0x34
 800bc30:	ea5b 0303 	orrs.w	r3, fp, r3
 800bc34:	d102      	bne.n	800bc3c <__ieee754_pow+0x1c4>
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	e7e8      	b.n	800bc0e <__ieee754_pow+0x196>
 800bc3c:	4b16      	ldr	r3, [pc, #88]	; (800bc98 <__ieee754_pow+0x220>)
 800bc3e:	4598      	cmp	r8, r3
 800bc40:	f340 80fe 	ble.w	800be40 <__ieee754_pow+0x3c8>
 800bc44:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bc48:	4598      	cmp	r8, r3
 800bc4a:	dd0a      	ble.n	800bc62 <__ieee754_pow+0x1ea>
 800bc4c:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <__ieee754_pow+0x214>)
 800bc4e:	429c      	cmp	r4, r3
 800bc50:	dc0d      	bgt.n	800bc6e <__ieee754_pow+0x1f6>
 800bc52:	f1b9 0f00 	cmp.w	r9, #0
 800bc56:	f6bf af6d 	bge.w	800bb34 <__ieee754_pow+0xbc>
 800bc5a:	a307      	add	r3, pc, #28	; (adr r3, 800bc78 <__ieee754_pow+0x200>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	e79f      	b.n	800bba2 <__ieee754_pow+0x12a>
 800bc62:	4b0e      	ldr	r3, [pc, #56]	; (800bc9c <__ieee754_pow+0x224>)
 800bc64:	429c      	cmp	r4, r3
 800bc66:	ddf4      	ble.n	800bc52 <__ieee754_pow+0x1da>
 800bc68:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <__ieee754_pow+0x218>)
 800bc6a:	429c      	cmp	r4, r3
 800bc6c:	dd18      	ble.n	800bca0 <__ieee754_pow+0x228>
 800bc6e:	f1b9 0f00 	cmp.w	r9, #0
 800bc72:	dcf2      	bgt.n	800bc5a <__ieee754_pow+0x1e2>
 800bc74:	e75e      	b.n	800bb34 <__ieee754_pow+0xbc>
 800bc76:	bf00      	nop
 800bc78:	8800759c 	.word	0x8800759c
 800bc7c:	7e37e43c 	.word	0x7e37e43c
 800bc80:	7ff00000 	.word	0x7ff00000
 800bc84:	0800dc79 	.word	0x0800dc79
 800bc88:	433fffff 	.word	0x433fffff
 800bc8c:	3fefffff 	.word	0x3fefffff
 800bc90:	3ff00000 	.word	0x3ff00000
 800bc94:	3fe00000 	.word	0x3fe00000
 800bc98:	41e00000 	.word	0x41e00000
 800bc9c:	3feffffe 	.word	0x3feffffe
 800bca0:	2200      	movs	r2, #0
 800bca2:	4b63      	ldr	r3, [pc, #396]	; (800be30 <__ieee754_pow+0x3b8>)
 800bca4:	f7f4 fb18 	bl	80002d8 <__aeabi_dsub>
 800bca8:	a355      	add	r3, pc, #340	; (adr r3, 800be00 <__ieee754_pow+0x388>)
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	4604      	mov	r4, r0
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	f7f4 fcc9 	bl	8000648 <__aeabi_dmul>
 800bcb6:	a354      	add	r3, pc, #336	; (adr r3, 800be08 <__ieee754_pow+0x390>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f7f4 fcc0 	bl	8000648 <__aeabi_dmul>
 800bcc8:	2200      	movs	r2, #0
 800bcca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcce:	4b59      	ldr	r3, [pc, #356]	; (800be34 <__ieee754_pow+0x3bc>)
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f7f4 fcb8 	bl	8000648 <__aeabi_dmul>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	a14c      	add	r1, pc, #304	; (adr r1, 800be10 <__ieee754_pow+0x398>)
 800bcde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bce2:	f7f4 faf9 	bl	80002d8 <__aeabi_dsub>
 800bce6:	4622      	mov	r2, r4
 800bce8:	462b      	mov	r3, r5
 800bcea:	f7f4 fcad 	bl	8000648 <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	4950      	ldr	r1, [pc, #320]	; (800be38 <__ieee754_pow+0x3c0>)
 800bcf6:	f7f4 faef 	bl	80002d8 <__aeabi_dsub>
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	462b      	mov	r3, r5
 800bcfe:	4680      	mov	r8, r0
 800bd00:	4689      	mov	r9, r1
 800bd02:	4620      	mov	r0, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	f7f4 fc9f 	bl	8000648 <__aeabi_dmul>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	f7f4 fc99 	bl	8000648 <__aeabi_dmul>
 800bd16:	a340      	add	r3, pc, #256	; (adr r3, 800be18 <__ieee754_pow+0x3a0>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fc94 	bl	8000648 <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd28:	f7f4 fad6 	bl	80002d8 <__aeabi_dsub>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4604      	mov	r4, r0
 800bd32:	460d      	mov	r5, r1
 800bd34:	4630      	mov	r0, r6
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 fad0 	bl	80002dc <__adddf3>
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd42:	4632      	mov	r2, r6
 800bd44:	463b      	mov	r3, r7
 800bd46:	f7f4 fac7 	bl	80002d8 <__aeabi_dsub>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4620      	mov	r0, r4
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7f4 fac1 	bl	80002d8 <__aeabi_dsub>
 800bd56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd58:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	4606      	mov	r6, r0
 800bd60:	460f      	mov	r7, r1
 800bd62:	f040 81eb 	bne.w	800c13c <__ieee754_pow+0x6c4>
 800bd66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800be20 <__ieee754_pow+0x3a8>
 800bd6a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800bd6e:	2400      	movs	r4, #0
 800bd70:	4622      	mov	r2, r4
 800bd72:	462b      	mov	r3, r5
 800bd74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd7c:	f7f4 faac 	bl	80002d8 <__aeabi_dsub>
 800bd80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd84:	f7f4 fc60 	bl	8000648 <__aeabi_dmul>
 800bd88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd8c:	4680      	mov	r8, r0
 800bd8e:	4689      	mov	r9, r1
 800bd90:	4630      	mov	r0, r6
 800bd92:	4639      	mov	r1, r7
 800bd94:	f7f4 fc58 	bl	8000648 <__aeabi_dmul>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4640      	mov	r0, r8
 800bd9e:	4649      	mov	r1, r9
 800bda0:	f7f4 fa9c 	bl	80002dc <__adddf3>
 800bda4:	4622      	mov	r2, r4
 800bda6:	462b      	mov	r3, r5
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4689      	mov	r9, r1
 800bdac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdb0:	f7f4 fc4a 	bl	8000648 <__aeabi_dmul>
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	460d      	mov	r5, r1
 800bdba:	4602      	mov	r2, r0
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	4640      	mov	r0, r8
 800bdc0:	e9cd 4500 	strd	r4, r5, [sp]
 800bdc4:	f7f4 fa8a 	bl	80002dc <__adddf3>
 800bdc8:	4b1c      	ldr	r3, [pc, #112]	; (800be3c <__ieee754_pow+0x3c4>)
 800bdca:	4299      	cmp	r1, r3
 800bdcc:	4606      	mov	r6, r0
 800bdce:	460f      	mov	r7, r1
 800bdd0:	468b      	mov	fp, r1
 800bdd2:	f340 82f7 	ble.w	800c3c4 <__ieee754_pow+0x94c>
 800bdd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bdda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bdde:	4303      	orrs	r3, r0
 800bde0:	f000 81ea 	beq.w	800c1b8 <__ieee754_pow+0x740>
 800bde4:	a310      	add	r3, pc, #64	; (adr r3, 800be28 <__ieee754_pow+0x3b0>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdee:	f7f4 fc2b 	bl	8000648 <__aeabi_dmul>
 800bdf2:	a30d      	add	r3, pc, #52	; (adr r3, 800be28 <__ieee754_pow+0x3b0>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	e6d5      	b.n	800bba6 <__ieee754_pow+0x12e>
 800bdfa:	bf00      	nop
 800bdfc:	f3af 8000 	nop.w
 800be00:	60000000 	.word	0x60000000
 800be04:	3ff71547 	.word	0x3ff71547
 800be08:	f85ddf44 	.word	0xf85ddf44
 800be0c:	3e54ae0b 	.word	0x3e54ae0b
 800be10:	55555555 	.word	0x55555555
 800be14:	3fd55555 	.word	0x3fd55555
 800be18:	652b82fe 	.word	0x652b82fe
 800be1c:	3ff71547 	.word	0x3ff71547
 800be20:	00000000 	.word	0x00000000
 800be24:	bff00000 	.word	0xbff00000
 800be28:	8800759c 	.word	0x8800759c
 800be2c:	7e37e43c 	.word	0x7e37e43c
 800be30:	3ff00000 	.word	0x3ff00000
 800be34:	3fd00000 	.word	0x3fd00000
 800be38:	3fe00000 	.word	0x3fe00000
 800be3c:	408fffff 	.word	0x408fffff
 800be40:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800be44:	f04f 0200 	mov.w	r2, #0
 800be48:	da05      	bge.n	800be56 <__ieee754_pow+0x3de>
 800be4a:	4bd3      	ldr	r3, [pc, #844]	; (800c198 <__ieee754_pow+0x720>)
 800be4c:	f7f4 fbfc 	bl	8000648 <__aeabi_dmul>
 800be50:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800be54:	460c      	mov	r4, r1
 800be56:	1523      	asrs	r3, r4, #20
 800be58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be5c:	4413      	add	r3, r2
 800be5e:	9309      	str	r3, [sp, #36]	; 0x24
 800be60:	4bce      	ldr	r3, [pc, #824]	; (800c19c <__ieee754_pow+0x724>)
 800be62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800be66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800be6a:	429c      	cmp	r4, r3
 800be6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800be70:	dd08      	ble.n	800be84 <__ieee754_pow+0x40c>
 800be72:	4bcb      	ldr	r3, [pc, #812]	; (800c1a0 <__ieee754_pow+0x728>)
 800be74:	429c      	cmp	r4, r3
 800be76:	f340 815e 	ble.w	800c136 <__ieee754_pow+0x6be>
 800be7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be7c:	3301      	adds	r3, #1
 800be7e:	9309      	str	r3, [sp, #36]	; 0x24
 800be80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800be84:	f04f 0a00 	mov.w	sl, #0
 800be88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800be8c:	930c      	str	r3, [sp, #48]	; 0x30
 800be8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be90:	4bc4      	ldr	r3, [pc, #784]	; (800c1a4 <__ieee754_pow+0x72c>)
 800be92:	4413      	add	r3, r2
 800be94:	ed93 7b00 	vldr	d7, [r3]
 800be98:	4629      	mov	r1, r5
 800be9a:	ec53 2b17 	vmov	r2, r3, d7
 800be9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bea2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bea6:	f7f4 fa17 	bl	80002d8 <__aeabi_dsub>
 800beaa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800beae:	4606      	mov	r6, r0
 800beb0:	460f      	mov	r7, r1
 800beb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beb6:	f7f4 fa11 	bl	80002dc <__adddf3>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	2000      	movs	r0, #0
 800bec0:	49b9      	ldr	r1, [pc, #740]	; (800c1a8 <__ieee754_pow+0x730>)
 800bec2:	f7f4 fceb 	bl	800089c <__aeabi_ddiv>
 800bec6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 fbb9 	bl	8000648 <__aeabi_dmul>
 800bed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beda:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bede:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bee2:	2300      	movs	r3, #0
 800bee4:	9302      	str	r3, [sp, #8]
 800bee6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800beea:	106d      	asrs	r5, r5, #1
 800beec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bef0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bef4:	2200      	movs	r2, #0
 800bef6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800befa:	4640      	mov	r0, r8
 800befc:	4649      	mov	r1, r9
 800befe:	4614      	mov	r4, r2
 800bf00:	461d      	mov	r5, r3
 800bf02:	f7f4 fba1 	bl	8000648 <__aeabi_dmul>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	f7f4 f9e3 	bl	80002d8 <__aeabi_dsub>
 800bf12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf16:	4606      	mov	r6, r0
 800bf18:	460f      	mov	r7, r1
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	f7f4 f9db 	bl	80002d8 <__aeabi_dsub>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf2a:	f7f4 f9d5 	bl	80002d8 <__aeabi_dsub>
 800bf2e:	4642      	mov	r2, r8
 800bf30:	464b      	mov	r3, r9
 800bf32:	f7f4 fb89 	bl	8000648 <__aeabi_dmul>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	f7f4 f9cb 	bl	80002d8 <__aeabi_dsub>
 800bf42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bf46:	f7f4 fb7f 	bl	8000648 <__aeabi_dmul>
 800bf4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf52:	4610      	mov	r0, r2
 800bf54:	4619      	mov	r1, r3
 800bf56:	f7f4 fb77 	bl	8000648 <__aeabi_dmul>
 800bf5a:	a37b      	add	r3, pc, #492	; (adr r3, 800c148 <__ieee754_pow+0x6d0>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	f7f4 fb70 	bl	8000648 <__aeabi_dmul>
 800bf68:	a379      	add	r3, pc, #484	; (adr r3, 800c150 <__ieee754_pow+0x6d8>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 f9b5 	bl	80002dc <__adddf3>
 800bf72:	4622      	mov	r2, r4
 800bf74:	462b      	mov	r3, r5
 800bf76:	f7f4 fb67 	bl	8000648 <__aeabi_dmul>
 800bf7a:	a377      	add	r3, pc, #476	; (adr r3, 800c158 <__ieee754_pow+0x6e0>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f7f4 f9ac 	bl	80002dc <__adddf3>
 800bf84:	4622      	mov	r2, r4
 800bf86:	462b      	mov	r3, r5
 800bf88:	f7f4 fb5e 	bl	8000648 <__aeabi_dmul>
 800bf8c:	a374      	add	r3, pc, #464	; (adr r3, 800c160 <__ieee754_pow+0x6e8>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f7f4 f9a3 	bl	80002dc <__adddf3>
 800bf96:	4622      	mov	r2, r4
 800bf98:	462b      	mov	r3, r5
 800bf9a:	f7f4 fb55 	bl	8000648 <__aeabi_dmul>
 800bf9e:	a372      	add	r3, pc, #456	; (adr r3, 800c168 <__ieee754_pow+0x6f0>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 f99a 	bl	80002dc <__adddf3>
 800bfa8:	4622      	mov	r2, r4
 800bfaa:	462b      	mov	r3, r5
 800bfac:	f7f4 fb4c 	bl	8000648 <__aeabi_dmul>
 800bfb0:	a36f      	add	r3, pc, #444	; (adr r3, 800c170 <__ieee754_pow+0x6f8>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 f991 	bl	80002dc <__adddf3>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460f      	mov	r7, r1
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f7f4 fb3f 	bl	8000648 <__aeabi_dmul>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4630      	mov	r0, r6
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	f7f4 fb39 	bl	8000648 <__aeabi_dmul>
 800bfd6:	4642      	mov	r2, r8
 800bfd8:	4604      	mov	r4, r0
 800bfda:	460d      	mov	r5, r1
 800bfdc:	464b      	mov	r3, r9
 800bfde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfe2:	f7f4 f97b 	bl	80002dc <__adddf3>
 800bfe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfea:	f7f4 fb2d 	bl	8000648 <__aeabi_dmul>
 800bfee:	4622      	mov	r2, r4
 800bff0:	462b      	mov	r3, r5
 800bff2:	f7f4 f973 	bl	80002dc <__adddf3>
 800bff6:	4642      	mov	r2, r8
 800bff8:	4606      	mov	r6, r0
 800bffa:	460f      	mov	r7, r1
 800bffc:	464b      	mov	r3, r9
 800bffe:	4640      	mov	r0, r8
 800c000:	4649      	mov	r1, r9
 800c002:	f7f4 fb21 	bl	8000648 <__aeabi_dmul>
 800c006:	2200      	movs	r2, #0
 800c008:	4b68      	ldr	r3, [pc, #416]	; (800c1ac <__ieee754_pow+0x734>)
 800c00a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c00e:	f7f4 f965 	bl	80002dc <__adddf3>
 800c012:	4632      	mov	r2, r6
 800c014:	463b      	mov	r3, r7
 800c016:	f7f4 f961 	bl	80002dc <__adddf3>
 800c01a:	9802      	ldr	r0, [sp, #8]
 800c01c:	460d      	mov	r5, r1
 800c01e:	4604      	mov	r4, r0
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	4640      	mov	r0, r8
 800c026:	4649      	mov	r1, r9
 800c028:	f7f4 fb0e 	bl	8000648 <__aeabi_dmul>
 800c02c:	2200      	movs	r2, #0
 800c02e:	4680      	mov	r8, r0
 800c030:	4689      	mov	r9, r1
 800c032:	4b5e      	ldr	r3, [pc, #376]	; (800c1ac <__ieee754_pow+0x734>)
 800c034:	4620      	mov	r0, r4
 800c036:	4629      	mov	r1, r5
 800c038:	f7f4 f94e 	bl	80002d8 <__aeabi_dsub>
 800c03c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c040:	f7f4 f94a 	bl	80002d8 <__aeabi_dsub>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4630      	mov	r0, r6
 800c04a:	4639      	mov	r1, r7
 800c04c:	f7f4 f944 	bl	80002d8 <__aeabi_dsub>
 800c050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c054:	f7f4 faf8 	bl	8000648 <__aeabi_dmul>
 800c058:	4622      	mov	r2, r4
 800c05a:	4606      	mov	r6, r0
 800c05c:	460f      	mov	r7, r1
 800c05e:	462b      	mov	r3, r5
 800c060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c064:	f7f4 faf0 	bl	8000648 <__aeabi_dmul>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4630      	mov	r0, r6
 800c06e:	4639      	mov	r1, r7
 800c070:	f7f4 f934 	bl	80002dc <__adddf3>
 800c074:	4606      	mov	r6, r0
 800c076:	460f      	mov	r7, r1
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4640      	mov	r0, r8
 800c07e:	4649      	mov	r1, r9
 800c080:	f7f4 f92c 	bl	80002dc <__adddf3>
 800c084:	9802      	ldr	r0, [sp, #8]
 800c086:	a33c      	add	r3, pc, #240	; (adr r3, 800c178 <__ieee754_pow+0x700>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	4604      	mov	r4, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	f7f4 fada 	bl	8000648 <__aeabi_dmul>
 800c094:	4642      	mov	r2, r8
 800c096:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c09a:	464b      	mov	r3, r9
 800c09c:	4620      	mov	r0, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7f4 f91a 	bl	80002d8 <__aeabi_dsub>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f7f4 f914 	bl	80002d8 <__aeabi_dsub>
 800c0b0:	a333      	add	r3, pc, #204	; (adr r3, 800c180 <__ieee754_pow+0x708>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 fac7 	bl	8000648 <__aeabi_dmul>
 800c0ba:	a333      	add	r3, pc, #204	; (adr r3, 800c188 <__ieee754_pow+0x710>)
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	460f      	mov	r7, r1
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f7f4 fabe 	bl	8000648 <__aeabi_dmul>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 f902 	bl	80002dc <__adddf3>
 800c0d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0da:	4b35      	ldr	r3, [pc, #212]	; (800c1b0 <__ieee754_pow+0x738>)
 800c0dc:	4413      	add	r3, r2
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	f7f4 f8fb 	bl	80002dc <__adddf3>
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	f7f4 fa42 	bl	8000574 <__aeabi_i2d>
 800c0f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0f2:	4b30      	ldr	r3, [pc, #192]	; (800c1b4 <__ieee754_pow+0x73c>)
 800c0f4:	4413      	add	r3, r2
 800c0f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460f      	mov	r7, r1
 800c0fe:	4622      	mov	r2, r4
 800c100:	462b      	mov	r3, r5
 800c102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c106:	f7f4 f8e9 	bl	80002dc <__adddf3>
 800c10a:	4642      	mov	r2, r8
 800c10c:	464b      	mov	r3, r9
 800c10e:	f7f4 f8e5 	bl	80002dc <__adddf3>
 800c112:	4632      	mov	r2, r6
 800c114:	463b      	mov	r3, r7
 800c116:	f7f4 f8e1 	bl	80002dc <__adddf3>
 800c11a:	9802      	ldr	r0, [sp, #8]
 800c11c:	4632      	mov	r2, r6
 800c11e:	463b      	mov	r3, r7
 800c120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c124:	f7f4 f8d8 	bl	80002d8 <__aeabi_dsub>
 800c128:	4642      	mov	r2, r8
 800c12a:	464b      	mov	r3, r9
 800c12c:	f7f4 f8d4 	bl	80002d8 <__aeabi_dsub>
 800c130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c134:	e607      	b.n	800bd46 <__ieee754_pow+0x2ce>
 800c136:	f04f 0a01 	mov.w	sl, #1
 800c13a:	e6a5      	b.n	800be88 <__ieee754_pow+0x410>
 800c13c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c190 <__ieee754_pow+0x718>
 800c140:	e613      	b.n	800bd6a <__ieee754_pow+0x2f2>
 800c142:	bf00      	nop
 800c144:	f3af 8000 	nop.w
 800c148:	4a454eef 	.word	0x4a454eef
 800c14c:	3fca7e28 	.word	0x3fca7e28
 800c150:	93c9db65 	.word	0x93c9db65
 800c154:	3fcd864a 	.word	0x3fcd864a
 800c158:	a91d4101 	.word	0xa91d4101
 800c15c:	3fd17460 	.word	0x3fd17460
 800c160:	518f264d 	.word	0x518f264d
 800c164:	3fd55555 	.word	0x3fd55555
 800c168:	db6fabff 	.word	0xdb6fabff
 800c16c:	3fdb6db6 	.word	0x3fdb6db6
 800c170:	33333303 	.word	0x33333303
 800c174:	3fe33333 	.word	0x3fe33333
 800c178:	e0000000 	.word	0xe0000000
 800c17c:	3feec709 	.word	0x3feec709
 800c180:	dc3a03fd 	.word	0xdc3a03fd
 800c184:	3feec709 	.word	0x3feec709
 800c188:	145b01f5 	.word	0x145b01f5
 800c18c:	be3e2fe0 	.word	0xbe3e2fe0
 800c190:	00000000 	.word	0x00000000
 800c194:	3ff00000 	.word	0x3ff00000
 800c198:	43400000 	.word	0x43400000
 800c19c:	0003988e 	.word	0x0003988e
 800c1a0:	000bb679 	.word	0x000bb679
 800c1a4:	0800dd90 	.word	0x0800dd90
 800c1a8:	3ff00000 	.word	0x3ff00000
 800c1ac:	40080000 	.word	0x40080000
 800c1b0:	0800ddb0 	.word	0x0800ddb0
 800c1b4:	0800dda0 	.word	0x0800dda0
 800c1b8:	a3b4      	add	r3, pc, #720	; (adr r3, 800c48c <__ieee754_pow+0xa14>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	4640      	mov	r0, r8
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	f7f4 f88b 	bl	80002dc <__adddf3>
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1cc:	462b      	mov	r3, r5
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	f7f4 f881 	bl	80002d8 <__aeabi_dsub>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	460b      	mov	r3, r1
 800c1da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1de:	f7f4 fcc3 	bl	8000b68 <__aeabi_dcmpgt>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f47f adfe 	bne.w	800bde4 <__ieee754_pow+0x36c>
 800c1e8:	4aa3      	ldr	r2, [pc, #652]	; (800c478 <__ieee754_pow+0xa00>)
 800c1ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	f340 810a 	ble.w	800c408 <__ieee754_pow+0x990>
 800c1f4:	151b      	asrs	r3, r3, #20
 800c1f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c1fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c1fe:	fa4a f303 	asr.w	r3, sl, r3
 800c202:	445b      	add	r3, fp
 800c204:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c208:	4e9c      	ldr	r6, [pc, #624]	; (800c47c <__ieee754_pow+0xa04>)
 800c20a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c20e:	4116      	asrs	r6, r2
 800c210:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c214:	2000      	movs	r0, #0
 800c216:	ea23 0106 	bic.w	r1, r3, r6
 800c21a:	f1c2 0214 	rsb	r2, r2, #20
 800c21e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c222:	fa4a fa02 	asr.w	sl, sl, r2
 800c226:	f1bb 0f00 	cmp.w	fp, #0
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	bfb8      	it	lt
 800c234:	f1ca 0a00 	rsblt	sl, sl, #0
 800c238:	f7f4 f84e 	bl	80002d8 <__aeabi_dsub>
 800c23c:	e9cd 0100 	strd	r0, r1, [sp]
 800c240:	4642      	mov	r2, r8
 800c242:	464b      	mov	r3, r9
 800c244:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c248:	f7f4 f848 	bl	80002dc <__adddf3>
 800c24c:	2000      	movs	r0, #0
 800c24e:	a378      	add	r3, pc, #480	; (adr r3, 800c430 <__ieee754_pow+0x9b8>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	4604      	mov	r4, r0
 800c256:	460d      	mov	r5, r1
 800c258:	f7f4 f9f6 	bl	8000648 <__aeabi_dmul>
 800c25c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c260:	4606      	mov	r6, r0
 800c262:	460f      	mov	r7, r1
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 f836 	bl	80002d8 <__aeabi_dsub>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f4 f830 	bl	80002d8 <__aeabi_dsub>
 800c278:	a36f      	add	r3, pc, #444	; (adr r3, 800c438 <__ieee754_pow+0x9c0>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f9e3 	bl	8000648 <__aeabi_dmul>
 800c282:	a36f      	add	r3, pc, #444	; (adr r3, 800c440 <__ieee754_pow+0x9c8>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	4680      	mov	r8, r0
 800c28a:	4689      	mov	r9, r1
 800c28c:	4620      	mov	r0, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	f7f4 f9da 	bl	8000648 <__aeabi_dmul>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4640      	mov	r0, r8
 800c29a:	4649      	mov	r1, r9
 800c29c:	f7f4 f81e 	bl	80002dc <__adddf3>
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	460d      	mov	r5, r1
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f4 f816 	bl	80002dc <__adddf3>
 800c2b0:	4632      	mov	r2, r6
 800c2b2:	463b      	mov	r3, r7
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	4689      	mov	r9, r1
 800c2b8:	f7f4 f80e 	bl	80002d8 <__aeabi_dsub>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7f4 f808 	bl	80002d8 <__aeabi_dsub>
 800c2c8:	4642      	mov	r2, r8
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	460f      	mov	r7, r1
 800c2ce:	464b      	mov	r3, r9
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	f7f4 f9b8 	bl	8000648 <__aeabi_dmul>
 800c2d8:	a35b      	add	r3, pc, #364	; (adr r3, 800c448 <__ieee754_pow+0x9d0>)
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	f7f4 f9b1 	bl	8000648 <__aeabi_dmul>
 800c2e6:	a35a      	add	r3, pc, #360	; (adr r3, 800c450 <__ieee754_pow+0x9d8>)
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f7f3 fff4 	bl	80002d8 <__aeabi_dsub>
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	462b      	mov	r3, r5
 800c2f4:	f7f4 f9a8 	bl	8000648 <__aeabi_dmul>
 800c2f8:	a357      	add	r3, pc, #348	; (adr r3, 800c458 <__ieee754_pow+0x9e0>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	f7f3 ffed 	bl	80002dc <__adddf3>
 800c302:	4622      	mov	r2, r4
 800c304:	462b      	mov	r3, r5
 800c306:	f7f4 f99f 	bl	8000648 <__aeabi_dmul>
 800c30a:	a355      	add	r3, pc, #340	; (adr r3, 800c460 <__ieee754_pow+0x9e8>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f3 ffe2 	bl	80002d8 <__aeabi_dsub>
 800c314:	4622      	mov	r2, r4
 800c316:	462b      	mov	r3, r5
 800c318:	f7f4 f996 	bl	8000648 <__aeabi_dmul>
 800c31c:	a352      	add	r3, pc, #328	; (adr r3, 800c468 <__ieee754_pow+0x9f0>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f7f3 ffdb 	bl	80002dc <__adddf3>
 800c326:	4622      	mov	r2, r4
 800c328:	462b      	mov	r3, r5
 800c32a:	f7f4 f98d 	bl	8000648 <__aeabi_dmul>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	f7f3 ffcf 	bl	80002d8 <__aeabi_dsub>
 800c33a:	4604      	mov	r4, r0
 800c33c:	460d      	mov	r5, r1
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4640      	mov	r0, r8
 800c344:	4649      	mov	r1, r9
 800c346:	f7f4 f97f 	bl	8000648 <__aeabi_dmul>
 800c34a:	2200      	movs	r2, #0
 800c34c:	e9cd 0100 	strd	r0, r1, [sp]
 800c350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c354:	4620      	mov	r0, r4
 800c356:	4629      	mov	r1, r5
 800c358:	f7f3 ffbe 	bl	80002d8 <__aeabi_dsub>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c364:	f7f4 fa9a 	bl	800089c <__aeabi_ddiv>
 800c368:	4632      	mov	r2, r6
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	463b      	mov	r3, r7
 800c370:	4640      	mov	r0, r8
 800c372:	4649      	mov	r1, r9
 800c374:	f7f4 f968 	bl	8000648 <__aeabi_dmul>
 800c378:	4632      	mov	r2, r6
 800c37a:	463b      	mov	r3, r7
 800c37c:	f7f3 ffae 	bl	80002dc <__adddf3>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f3 ffa6 	bl	80002d8 <__aeabi_dsub>
 800c38c:	4642      	mov	r2, r8
 800c38e:	464b      	mov	r3, r9
 800c390:	f7f3 ffa2 	bl	80002d8 <__aeabi_dsub>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	2000      	movs	r0, #0
 800c39a:	4939      	ldr	r1, [pc, #228]	; (800c480 <__ieee754_pow+0xa08>)
 800c39c:	f7f3 ff9c 	bl	80002d8 <__aeabi_dsub>
 800c3a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c3a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	da2f      	bge.n	800c40e <__ieee754_pow+0x996>
 800c3ae:	4650      	mov	r0, sl
 800c3b0:	ec43 2b10 	vmov	d0, r2, r3
 800c3b4:	f001 faa0 	bl	800d8f8 <scalbn>
 800c3b8:	ec51 0b10 	vmov	r0, r1, d0
 800c3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3c0:	f7ff bbf1 	b.w	800bba6 <__ieee754_pow+0x12e>
 800c3c4:	4b2f      	ldr	r3, [pc, #188]	; (800c484 <__ieee754_pow+0xa0c>)
 800c3c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c3ca:	429e      	cmp	r6, r3
 800c3cc:	f77f af0c 	ble.w	800c1e8 <__ieee754_pow+0x770>
 800c3d0:	4b2d      	ldr	r3, [pc, #180]	; (800c488 <__ieee754_pow+0xa10>)
 800c3d2:	440b      	add	r3, r1
 800c3d4:	4303      	orrs	r3, r0
 800c3d6:	d00b      	beq.n	800c3f0 <__ieee754_pow+0x978>
 800c3d8:	a325      	add	r3, pc, #148	; (adr r3, 800c470 <__ieee754_pow+0x9f8>)
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3e2:	f7f4 f931 	bl	8000648 <__aeabi_dmul>
 800c3e6:	a322      	add	r3, pc, #136	; (adr r3, 800c470 <__ieee754_pow+0x9f8>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	f7ff bbdb 	b.w	800bba6 <__ieee754_pow+0x12e>
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	462b      	mov	r3, r5
 800c3f4:	f7f3 ff70 	bl	80002d8 <__aeabi_dsub>
 800c3f8:	4642      	mov	r2, r8
 800c3fa:	464b      	mov	r3, r9
 800c3fc:	f7f4 fbaa 	bl	8000b54 <__aeabi_dcmpge>
 800c400:	2800      	cmp	r0, #0
 800c402:	f43f aef1 	beq.w	800c1e8 <__ieee754_pow+0x770>
 800c406:	e7e7      	b.n	800c3d8 <__ieee754_pow+0x960>
 800c408:	f04f 0a00 	mov.w	sl, #0
 800c40c:	e718      	b.n	800c240 <__ieee754_pow+0x7c8>
 800c40e:	4621      	mov	r1, r4
 800c410:	e7d4      	b.n	800c3bc <__ieee754_pow+0x944>
 800c412:	2000      	movs	r0, #0
 800c414:	491a      	ldr	r1, [pc, #104]	; (800c480 <__ieee754_pow+0xa08>)
 800c416:	f7ff bb8f 	b.w	800bb38 <__ieee754_pow+0xc0>
 800c41a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c41e:	f7ff bb8b 	b.w	800bb38 <__ieee754_pow+0xc0>
 800c422:	4630      	mov	r0, r6
 800c424:	4639      	mov	r1, r7
 800c426:	f7ff bb87 	b.w	800bb38 <__ieee754_pow+0xc0>
 800c42a:	4693      	mov	fp, r2
 800c42c:	f7ff bb98 	b.w	800bb60 <__ieee754_pow+0xe8>
 800c430:	00000000 	.word	0x00000000
 800c434:	3fe62e43 	.word	0x3fe62e43
 800c438:	fefa39ef 	.word	0xfefa39ef
 800c43c:	3fe62e42 	.word	0x3fe62e42
 800c440:	0ca86c39 	.word	0x0ca86c39
 800c444:	be205c61 	.word	0xbe205c61
 800c448:	72bea4d0 	.word	0x72bea4d0
 800c44c:	3e663769 	.word	0x3e663769
 800c450:	c5d26bf1 	.word	0xc5d26bf1
 800c454:	3ebbbd41 	.word	0x3ebbbd41
 800c458:	af25de2c 	.word	0xaf25de2c
 800c45c:	3f11566a 	.word	0x3f11566a
 800c460:	16bebd93 	.word	0x16bebd93
 800c464:	3f66c16c 	.word	0x3f66c16c
 800c468:	5555553e 	.word	0x5555553e
 800c46c:	3fc55555 	.word	0x3fc55555
 800c470:	c2f8f359 	.word	0xc2f8f359
 800c474:	01a56e1f 	.word	0x01a56e1f
 800c478:	3fe00000 	.word	0x3fe00000
 800c47c:	000fffff 	.word	0x000fffff
 800c480:	3ff00000 	.word	0x3ff00000
 800c484:	4090cbff 	.word	0x4090cbff
 800c488:	3f6f3400 	.word	0x3f6f3400
 800c48c:	652b82fe 	.word	0x652b82fe
 800c490:	3c971547 	.word	0x3c971547
 800c494:	00000000 	.word	0x00000000

0800c498 <__ieee754_rem_pio2>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	ec57 6b10 	vmov	r6, r7, d0
 800c4a0:	4bc3      	ldr	r3, [pc, #780]	; (800c7b0 <__ieee754_rem_pio2+0x318>)
 800c4a2:	b08d      	sub	sp, #52	; 0x34
 800c4a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c4a8:	4598      	cmp	r8, r3
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	9704      	str	r7, [sp, #16]
 800c4ae:	dc07      	bgt.n	800c4c0 <__ieee754_rem_pio2+0x28>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	ed84 0b00 	vstr	d0, [r4]
 800c4b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c4bc:	2500      	movs	r5, #0
 800c4be:	e027      	b.n	800c510 <__ieee754_rem_pio2+0x78>
 800c4c0:	4bbc      	ldr	r3, [pc, #752]	; (800c7b4 <__ieee754_rem_pio2+0x31c>)
 800c4c2:	4598      	cmp	r8, r3
 800c4c4:	dc75      	bgt.n	800c5b2 <__ieee754_rem_pio2+0x11a>
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	4dbb      	ldr	r5, [pc, #748]	; (800c7b8 <__ieee754_rem_pio2+0x320>)
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	ee10 0a10 	vmov	r0, s0
 800c4d0:	a3a9      	add	r3, pc, #676	; (adr r3, 800c778 <__ieee754_rem_pio2+0x2e0>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	dd36      	ble.n	800c548 <__ieee754_rem_pio2+0xb0>
 800c4da:	f7f3 fefd 	bl	80002d8 <__aeabi_dsub>
 800c4de:	45a8      	cmp	r8, r5
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	460f      	mov	r7, r1
 800c4e4:	d018      	beq.n	800c518 <__ieee754_rem_pio2+0x80>
 800c4e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f3 fef4 	bl	80002d8 <__aeabi_dsub>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	e9c4 2300 	strd	r2, r3, [r4]
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	f7f3 feec 	bl	80002d8 <__aeabi_dsub>
 800c500:	a39f      	add	r3, pc, #636	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f3 fee7 	bl	80002d8 <__aeabi_dsub>
 800c50a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c50e:	2501      	movs	r5, #1
 800c510:	4628      	mov	r0, r5
 800c512:	b00d      	add	sp, #52	; 0x34
 800c514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c518:	a39b      	add	r3, pc, #620	; (adr r3, 800c788 <__ieee754_rem_pio2+0x2f0>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7f3 fedb 	bl	80002d8 <__aeabi_dsub>
 800c522:	a39b      	add	r3, pc, #620	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	4606      	mov	r6, r0
 800c52a:	460f      	mov	r7, r1
 800c52c:	f7f3 fed4 	bl	80002d8 <__aeabi_dsub>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	e9c4 2300 	strd	r2, r3, [r4]
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f3 fecc 	bl	80002d8 <__aeabi_dsub>
 800c540:	a393      	add	r3, pc, #588	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	e7de      	b.n	800c506 <__ieee754_rem_pio2+0x6e>
 800c548:	f7f3 fec8 	bl	80002dc <__adddf3>
 800c54c:	45a8      	cmp	r8, r5
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	d016      	beq.n	800c582 <__ieee754_rem_pio2+0xea>
 800c554:	a38a      	add	r3, pc, #552	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55a:	f7f3 febf 	bl	80002dc <__adddf3>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	e9c4 2300 	strd	r2, r3, [r4]
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f3 feb5 	bl	80002d8 <__aeabi_dsub>
 800c56e:	a384      	add	r3, pc, #528	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f7f3 feb2 	bl	80002dc <__adddf3>
 800c578:	f04f 35ff 	mov.w	r5, #4294967295
 800c57c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c580:	e7c6      	b.n	800c510 <__ieee754_rem_pio2+0x78>
 800c582:	a381      	add	r3, pc, #516	; (adr r3, 800c788 <__ieee754_rem_pio2+0x2f0>)
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f3 fea8 	bl	80002dc <__adddf3>
 800c58c:	a380      	add	r3, pc, #512	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	4606      	mov	r6, r0
 800c594:	460f      	mov	r7, r1
 800c596:	f7f3 fea1 	bl	80002dc <__adddf3>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9c4 2300 	strd	r2, r3, [r4]
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	f7f3 fe97 	bl	80002d8 <__aeabi_dsub>
 800c5aa:	a379      	add	r3, pc, #484	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	e7e0      	b.n	800c574 <__ieee754_rem_pio2+0xdc>
 800c5b2:	4b82      	ldr	r3, [pc, #520]	; (800c7bc <__ieee754_rem_pio2+0x324>)
 800c5b4:	4598      	cmp	r8, r3
 800c5b6:	f300 80d0 	bgt.w	800c75a <__ieee754_rem_pio2+0x2c2>
 800c5ba:	f001 f875 	bl	800d6a8 <fabs>
 800c5be:	ec57 6b10 	vmov	r6, r7, d0
 800c5c2:	ee10 0a10 	vmov	r0, s0
 800c5c6:	a374      	add	r3, pc, #464	; (adr r3, 800c798 <__ieee754_rem_pio2+0x300>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f4 f83b 	bl	8000648 <__aeabi_dmul>
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	4b7a      	ldr	r3, [pc, #488]	; (800c7c0 <__ieee754_rem_pio2+0x328>)
 800c5d6:	f7f3 fe81 	bl	80002dc <__adddf3>
 800c5da:	f7f4 fae5 	bl	8000ba8 <__aeabi_d2iz>
 800c5de:	4605      	mov	r5, r0
 800c5e0:	f7f3 ffc8 	bl	8000574 <__aeabi_i2d>
 800c5e4:	a364      	add	r3, pc, #400	; (adr r3, 800c778 <__ieee754_rem_pio2+0x2e0>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ee:	f7f4 f82b 	bl	8000648 <__aeabi_dmul>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	f7f3 fe6d 	bl	80002d8 <__aeabi_dsub>
 800c5fe:	a360      	add	r3, pc, #384	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	4682      	mov	sl, r0
 800c606:	468b      	mov	fp, r1
 800c608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c60c:	f7f4 f81c 	bl	8000648 <__aeabi_dmul>
 800c610:	2d1f      	cmp	r5, #31
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	dc0c      	bgt.n	800c632 <__ieee754_rem_pio2+0x19a>
 800c618:	1e6a      	subs	r2, r5, #1
 800c61a:	4b6a      	ldr	r3, [pc, #424]	; (800c7c4 <__ieee754_rem_pio2+0x32c>)
 800c61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c620:	4543      	cmp	r3, r8
 800c622:	d006      	beq.n	800c632 <__ieee754_rem_pio2+0x19a>
 800c624:	4632      	mov	r2, r6
 800c626:	463b      	mov	r3, r7
 800c628:	4650      	mov	r0, sl
 800c62a:	4659      	mov	r1, fp
 800c62c:	f7f3 fe54 	bl	80002d8 <__aeabi_dsub>
 800c630:	e00e      	b.n	800c650 <__ieee754_rem_pio2+0x1b8>
 800c632:	4632      	mov	r2, r6
 800c634:	463b      	mov	r3, r7
 800c636:	4650      	mov	r0, sl
 800c638:	4659      	mov	r1, fp
 800c63a:	f7f3 fe4d 	bl	80002d8 <__aeabi_dsub>
 800c63e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c642:	9305      	str	r3, [sp, #20]
 800c644:	9a05      	ldr	r2, [sp, #20]
 800c646:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b10      	cmp	r3, #16
 800c64e:	dc02      	bgt.n	800c656 <__ieee754_rem_pio2+0x1be>
 800c650:	e9c4 0100 	strd	r0, r1, [r4]
 800c654:	e039      	b.n	800c6ca <__ieee754_rem_pio2+0x232>
 800c656:	a34c      	add	r3, pc, #304	; (adr r3, 800c788 <__ieee754_rem_pio2+0x2f0>)
 800c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c660:	f7f3 fff2 	bl	8000648 <__aeabi_dmul>
 800c664:	4606      	mov	r6, r0
 800c666:	460f      	mov	r7, r1
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4650      	mov	r0, sl
 800c66e:	4659      	mov	r1, fp
 800c670:	f7f3 fe32 	bl	80002d8 <__aeabi_dsub>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	4680      	mov	r8, r0
 800c67a:	4689      	mov	r9, r1
 800c67c:	4650      	mov	r0, sl
 800c67e:	4659      	mov	r1, fp
 800c680:	f7f3 fe2a 	bl	80002d8 <__aeabi_dsub>
 800c684:	4632      	mov	r2, r6
 800c686:	463b      	mov	r3, r7
 800c688:	f7f3 fe26 	bl	80002d8 <__aeabi_dsub>
 800c68c:	a340      	add	r3, pc, #256	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	4606      	mov	r6, r0
 800c694:	460f      	mov	r7, r1
 800c696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c69a:	f7f3 ffd5 	bl	8000648 <__aeabi_dmul>
 800c69e:	4632      	mov	r2, r6
 800c6a0:	463b      	mov	r3, r7
 800c6a2:	f7f3 fe19 	bl	80002d8 <__aeabi_dsub>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	f7f3 fe11 	bl	80002d8 <__aeabi_dsub>
 800c6b6:	9a05      	ldr	r2, [sp, #20]
 800c6b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	2b31      	cmp	r3, #49	; 0x31
 800c6c0:	dc20      	bgt.n	800c704 <__ieee754_rem_pio2+0x26c>
 800c6c2:	e9c4 0100 	strd	r0, r1, [r4]
 800c6c6:	46c2      	mov	sl, r8
 800c6c8:	46cb      	mov	fp, r9
 800c6ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c6ce:	4650      	mov	r0, sl
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	4659      	mov	r1, fp
 800c6d6:	f7f3 fdff 	bl	80002d8 <__aeabi_dsub>
 800c6da:	463b      	mov	r3, r7
 800c6dc:	4632      	mov	r2, r6
 800c6de:	f7f3 fdfb 	bl	80002d8 <__aeabi_dsub>
 800c6e2:	9b04      	ldr	r3, [sp, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c6ea:	f6bf af11 	bge.w	800c510 <__ieee754_rem_pio2+0x78>
 800c6ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c6f2:	6063      	str	r3, [r4, #4]
 800c6f4:	f8c4 8000 	str.w	r8, [r4]
 800c6f8:	60a0      	str	r0, [r4, #8]
 800c6fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6fe:	60e3      	str	r3, [r4, #12]
 800c700:	426d      	negs	r5, r5
 800c702:	e705      	b.n	800c510 <__ieee754_rem_pio2+0x78>
 800c704:	a326      	add	r3, pc, #152	; (adr r3, 800c7a0 <__ieee754_rem_pio2+0x308>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c70e:	f7f3 ff9b 	bl	8000648 <__aeabi_dmul>
 800c712:	4606      	mov	r6, r0
 800c714:	460f      	mov	r7, r1
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4640      	mov	r0, r8
 800c71c:	4649      	mov	r1, r9
 800c71e:	f7f3 fddb 	bl	80002d8 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4682      	mov	sl, r0
 800c728:	468b      	mov	fp, r1
 800c72a:	4640      	mov	r0, r8
 800c72c:	4649      	mov	r1, r9
 800c72e:	f7f3 fdd3 	bl	80002d8 <__aeabi_dsub>
 800c732:	4632      	mov	r2, r6
 800c734:	463b      	mov	r3, r7
 800c736:	f7f3 fdcf 	bl	80002d8 <__aeabi_dsub>
 800c73a:	a31b      	add	r3, pc, #108	; (adr r3, 800c7a8 <__ieee754_rem_pio2+0x310>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	4606      	mov	r6, r0
 800c742:	460f      	mov	r7, r1
 800c744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c748:	f7f3 ff7e 	bl	8000648 <__aeabi_dmul>
 800c74c:	4632      	mov	r2, r6
 800c74e:	463b      	mov	r3, r7
 800c750:	f7f3 fdc2 	bl	80002d8 <__aeabi_dsub>
 800c754:	4606      	mov	r6, r0
 800c756:	460f      	mov	r7, r1
 800c758:	e764      	b.n	800c624 <__ieee754_rem_pio2+0x18c>
 800c75a:	4b1b      	ldr	r3, [pc, #108]	; (800c7c8 <__ieee754_rem_pio2+0x330>)
 800c75c:	4598      	cmp	r8, r3
 800c75e:	dd35      	ble.n	800c7cc <__ieee754_rem_pio2+0x334>
 800c760:	ee10 2a10 	vmov	r2, s0
 800c764:	463b      	mov	r3, r7
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f3 fdb5 	bl	80002d8 <__aeabi_dsub>
 800c76e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c772:	e9c4 0100 	strd	r0, r1, [r4]
 800c776:	e6a1      	b.n	800c4bc <__ieee754_rem_pio2+0x24>
 800c778:	54400000 	.word	0x54400000
 800c77c:	3ff921fb 	.word	0x3ff921fb
 800c780:	1a626331 	.word	0x1a626331
 800c784:	3dd0b461 	.word	0x3dd0b461
 800c788:	1a600000 	.word	0x1a600000
 800c78c:	3dd0b461 	.word	0x3dd0b461
 800c790:	2e037073 	.word	0x2e037073
 800c794:	3ba3198a 	.word	0x3ba3198a
 800c798:	6dc9c883 	.word	0x6dc9c883
 800c79c:	3fe45f30 	.word	0x3fe45f30
 800c7a0:	2e000000 	.word	0x2e000000
 800c7a4:	3ba3198a 	.word	0x3ba3198a
 800c7a8:	252049c1 	.word	0x252049c1
 800c7ac:	397b839a 	.word	0x397b839a
 800c7b0:	3fe921fb 	.word	0x3fe921fb
 800c7b4:	4002d97b 	.word	0x4002d97b
 800c7b8:	3ff921fb 	.word	0x3ff921fb
 800c7bc:	413921fb 	.word	0x413921fb
 800c7c0:	3fe00000 	.word	0x3fe00000
 800c7c4:	0800ddc0 	.word	0x0800ddc0
 800c7c8:	7fefffff 	.word	0x7fefffff
 800c7cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c7d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c7d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c7d8:	4630      	mov	r0, r6
 800c7da:	460f      	mov	r7, r1
 800c7dc:	f7f4 f9e4 	bl	8000ba8 <__aeabi_d2iz>
 800c7e0:	f7f3 fec8 	bl	8000574 <__aeabi_i2d>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	4639      	mov	r1, r7
 800c7ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7f0:	f7f3 fd72 	bl	80002d8 <__aeabi_dsub>
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4b1f      	ldr	r3, [pc, #124]	; (800c874 <__ieee754_rem_pio2+0x3dc>)
 800c7f8:	f7f3 ff26 	bl	8000648 <__aeabi_dmul>
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	4606      	mov	r6, r0
 800c800:	f7f4 f9d2 	bl	8000ba8 <__aeabi_d2iz>
 800c804:	f7f3 feb6 	bl	8000574 <__aeabi_i2d>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4630      	mov	r0, r6
 800c80e:	4639      	mov	r1, r7
 800c810:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c814:	f7f3 fd60 	bl	80002d8 <__aeabi_dsub>
 800c818:	2200      	movs	r2, #0
 800c81a:	4b16      	ldr	r3, [pc, #88]	; (800c874 <__ieee754_rem_pio2+0x3dc>)
 800c81c:	f7f3 ff14 	bl	8000648 <__aeabi_dmul>
 800c820:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c824:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c828:	f04f 0803 	mov.w	r8, #3
 800c82c:	2600      	movs	r6, #0
 800c82e:	2700      	movs	r7, #0
 800c830:	4632      	mov	r2, r6
 800c832:	463b      	mov	r3, r7
 800c834:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c838:	f108 3aff 	add.w	sl, r8, #4294967295
 800c83c:	f7f4 f96c 	bl	8000b18 <__aeabi_dcmpeq>
 800c840:	b9b0      	cbnz	r0, 800c870 <__ieee754_rem_pio2+0x3d8>
 800c842:	4b0d      	ldr	r3, [pc, #52]	; (800c878 <__ieee754_rem_pio2+0x3e0>)
 800c844:	9301      	str	r3, [sp, #4]
 800c846:	2302      	movs	r3, #2
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	462a      	mov	r2, r5
 800c84c:	4643      	mov	r3, r8
 800c84e:	4621      	mov	r1, r4
 800c850:	a806      	add	r0, sp, #24
 800c852:	f000 f98d 	bl	800cb70 <__kernel_rem_pio2>
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	4605      	mov	r5, r0
 800c85c:	f6bf ae58 	bge.w	800c510 <__ieee754_rem_pio2+0x78>
 800c860:	6863      	ldr	r3, [r4, #4]
 800c862:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c866:	6063      	str	r3, [r4, #4]
 800c868:	68e3      	ldr	r3, [r4, #12]
 800c86a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c86e:	e746      	b.n	800c6fe <__ieee754_rem_pio2+0x266>
 800c870:	46d0      	mov	r8, sl
 800c872:	e7dd      	b.n	800c830 <__ieee754_rem_pio2+0x398>
 800c874:	41700000 	.word	0x41700000
 800c878:	0800de40 	.word	0x0800de40

0800c87c <__ieee754_sqrt>:
 800c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	4955      	ldr	r1, [pc, #340]	; (800c9d8 <__ieee754_sqrt+0x15c>)
 800c882:	ec55 4b10 	vmov	r4, r5, d0
 800c886:	43a9      	bics	r1, r5
 800c888:	462b      	mov	r3, r5
 800c88a:	462a      	mov	r2, r5
 800c88c:	d112      	bne.n	800c8b4 <__ieee754_sqrt+0x38>
 800c88e:	ee10 2a10 	vmov	r2, s0
 800c892:	ee10 0a10 	vmov	r0, s0
 800c896:	4629      	mov	r1, r5
 800c898:	f7f3 fed6 	bl	8000648 <__aeabi_dmul>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 fd1a 	bl	80002dc <__adddf3>
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	ec45 4b10 	vmov	d0, r4, r5
 800c8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b4:	2d00      	cmp	r5, #0
 800c8b6:	ee10 0a10 	vmov	r0, s0
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	dc0f      	bgt.n	800c8de <__ieee754_sqrt+0x62>
 800c8be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8c2:	4330      	orrs	r0, r6
 800c8c4:	d0f2      	beq.n	800c8ac <__ieee754_sqrt+0x30>
 800c8c6:	b155      	cbz	r5, 800c8de <__ieee754_sqrt+0x62>
 800c8c8:	ee10 2a10 	vmov	r2, s0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	f7f3 fd02 	bl	80002d8 <__aeabi_dsub>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	f7f3 ffe0 	bl	800089c <__aeabi_ddiv>
 800c8dc:	e7e4      	b.n	800c8a8 <__ieee754_sqrt+0x2c>
 800c8de:	151b      	asrs	r3, r3, #20
 800c8e0:	d073      	beq.n	800c9ca <__ieee754_sqrt+0x14e>
 800c8e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c8e6:	07dd      	lsls	r5, r3, #31
 800c8e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c8ec:	bf48      	it	mi
 800c8ee:	0fc8      	lsrmi	r0, r1, #31
 800c8f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c8f4:	bf44      	itt	mi
 800c8f6:	0049      	lslmi	r1, r1, #1
 800c8f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	1058      	asrs	r0, r3, #1
 800c900:	0fcb      	lsrs	r3, r1, #31
 800c902:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c906:	0049      	lsls	r1, r1, #1
 800c908:	2316      	movs	r3, #22
 800c90a:	462c      	mov	r4, r5
 800c90c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c910:	19a7      	adds	r7, r4, r6
 800c912:	4297      	cmp	r7, r2
 800c914:	bfde      	ittt	le
 800c916:	19bc      	addle	r4, r7, r6
 800c918:	1bd2      	suble	r2, r2, r7
 800c91a:	19ad      	addle	r5, r5, r6
 800c91c:	0fcf      	lsrs	r7, r1, #31
 800c91e:	3b01      	subs	r3, #1
 800c920:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c924:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c928:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c92c:	d1f0      	bne.n	800c910 <__ieee754_sqrt+0x94>
 800c92e:	f04f 0c20 	mov.w	ip, #32
 800c932:	469e      	mov	lr, r3
 800c934:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c938:	42a2      	cmp	r2, r4
 800c93a:	eb06 070e 	add.w	r7, r6, lr
 800c93e:	dc02      	bgt.n	800c946 <__ieee754_sqrt+0xca>
 800c940:	d112      	bne.n	800c968 <__ieee754_sqrt+0xec>
 800c942:	428f      	cmp	r7, r1
 800c944:	d810      	bhi.n	800c968 <__ieee754_sqrt+0xec>
 800c946:	2f00      	cmp	r7, #0
 800c948:	eb07 0e06 	add.w	lr, r7, r6
 800c94c:	da42      	bge.n	800c9d4 <__ieee754_sqrt+0x158>
 800c94e:	f1be 0f00 	cmp.w	lr, #0
 800c952:	db3f      	blt.n	800c9d4 <__ieee754_sqrt+0x158>
 800c954:	f104 0801 	add.w	r8, r4, #1
 800c958:	1b12      	subs	r2, r2, r4
 800c95a:	428f      	cmp	r7, r1
 800c95c:	bf88      	it	hi
 800c95e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c962:	1bc9      	subs	r1, r1, r7
 800c964:	4433      	add	r3, r6
 800c966:	4644      	mov	r4, r8
 800c968:	0052      	lsls	r2, r2, #1
 800c96a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c96e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c972:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c976:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c97a:	d1dd      	bne.n	800c938 <__ieee754_sqrt+0xbc>
 800c97c:	430a      	orrs	r2, r1
 800c97e:	d006      	beq.n	800c98e <__ieee754_sqrt+0x112>
 800c980:	1c5c      	adds	r4, r3, #1
 800c982:	bf13      	iteet	ne
 800c984:	3301      	addne	r3, #1
 800c986:	3501      	addeq	r5, #1
 800c988:	4663      	moveq	r3, ip
 800c98a:	f023 0301 	bicne.w	r3, r3, #1
 800c98e:	106a      	asrs	r2, r5, #1
 800c990:	085b      	lsrs	r3, r3, #1
 800c992:	07e9      	lsls	r1, r5, #31
 800c994:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c998:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c99c:	bf48      	it	mi
 800c99e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c9a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c9a6:	461c      	mov	r4, r3
 800c9a8:	e780      	b.n	800c8ac <__ieee754_sqrt+0x30>
 800c9aa:	0aca      	lsrs	r2, r1, #11
 800c9ac:	3815      	subs	r0, #21
 800c9ae:	0549      	lsls	r1, r1, #21
 800c9b0:	2a00      	cmp	r2, #0
 800c9b2:	d0fa      	beq.n	800c9aa <__ieee754_sqrt+0x12e>
 800c9b4:	02d6      	lsls	r6, r2, #11
 800c9b6:	d50a      	bpl.n	800c9ce <__ieee754_sqrt+0x152>
 800c9b8:	f1c3 0420 	rsb	r4, r3, #32
 800c9bc:	fa21 f404 	lsr.w	r4, r1, r4
 800c9c0:	1e5d      	subs	r5, r3, #1
 800c9c2:	4099      	lsls	r1, r3
 800c9c4:	4322      	orrs	r2, r4
 800c9c6:	1b43      	subs	r3, r0, r5
 800c9c8:	e78b      	b.n	800c8e2 <__ieee754_sqrt+0x66>
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	e7f0      	b.n	800c9b0 <__ieee754_sqrt+0x134>
 800c9ce:	0052      	lsls	r2, r2, #1
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	e7ef      	b.n	800c9b4 <__ieee754_sqrt+0x138>
 800c9d4:	46a0      	mov	r8, r4
 800c9d6:	e7bf      	b.n	800c958 <__ieee754_sqrt+0xdc>
 800c9d8:	7ff00000 	.word	0x7ff00000
 800c9dc:	00000000 	.word	0x00000000

0800c9e0 <__kernel_cos>:
 800c9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	ec59 8b10 	vmov	r8, r9, d0
 800c9e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c9ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c9f0:	ed2d 8b02 	vpush	{d8}
 800c9f4:	eeb0 8a41 	vmov.f32	s16, s2
 800c9f8:	eef0 8a61 	vmov.f32	s17, s3
 800c9fc:	da07      	bge.n	800ca0e <__kernel_cos+0x2e>
 800c9fe:	ee10 0a10 	vmov	r0, s0
 800ca02:	4649      	mov	r1, r9
 800ca04:	f7f4 f8d0 	bl	8000ba8 <__aeabi_d2iz>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	f000 8089 	beq.w	800cb20 <__kernel_cos+0x140>
 800ca0e:	4642      	mov	r2, r8
 800ca10:	464b      	mov	r3, r9
 800ca12:	4640      	mov	r0, r8
 800ca14:	4649      	mov	r1, r9
 800ca16:	f7f3 fe17 	bl	8000648 <__aeabi_dmul>
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	4b4e      	ldr	r3, [pc, #312]	; (800cb58 <__kernel_cos+0x178>)
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	f7f3 fe11 	bl	8000648 <__aeabi_dmul>
 800ca26:	a340      	add	r3, pc, #256	; (adr r3, 800cb28 <__kernel_cos+0x148>)
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	4682      	mov	sl, r0
 800ca2e:	468b      	mov	fp, r1
 800ca30:	4620      	mov	r0, r4
 800ca32:	4629      	mov	r1, r5
 800ca34:	f7f3 fe08 	bl	8000648 <__aeabi_dmul>
 800ca38:	a33d      	add	r3, pc, #244	; (adr r3, 800cb30 <__kernel_cos+0x150>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fc4d 	bl	80002dc <__adddf3>
 800ca42:	4622      	mov	r2, r4
 800ca44:	462b      	mov	r3, r5
 800ca46:	f7f3 fdff 	bl	8000648 <__aeabi_dmul>
 800ca4a:	a33b      	add	r3, pc, #236	; (adr r3, 800cb38 <__kernel_cos+0x158>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	f7f3 fc42 	bl	80002d8 <__aeabi_dsub>
 800ca54:	4622      	mov	r2, r4
 800ca56:	462b      	mov	r3, r5
 800ca58:	f7f3 fdf6 	bl	8000648 <__aeabi_dmul>
 800ca5c:	a338      	add	r3, pc, #224	; (adr r3, 800cb40 <__kernel_cos+0x160>)
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	f7f3 fc3b 	bl	80002dc <__adddf3>
 800ca66:	4622      	mov	r2, r4
 800ca68:	462b      	mov	r3, r5
 800ca6a:	f7f3 fded 	bl	8000648 <__aeabi_dmul>
 800ca6e:	a336      	add	r3, pc, #216	; (adr r3, 800cb48 <__kernel_cos+0x168>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	f7f3 fc30 	bl	80002d8 <__aeabi_dsub>
 800ca78:	4622      	mov	r2, r4
 800ca7a:	462b      	mov	r3, r5
 800ca7c:	f7f3 fde4 	bl	8000648 <__aeabi_dmul>
 800ca80:	a333      	add	r3, pc, #204	; (adr r3, 800cb50 <__kernel_cos+0x170>)
 800ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca86:	f7f3 fc29 	bl	80002dc <__adddf3>
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	462b      	mov	r3, r5
 800ca8e:	f7f3 fddb 	bl	8000648 <__aeabi_dmul>
 800ca92:	4622      	mov	r2, r4
 800ca94:	462b      	mov	r3, r5
 800ca96:	f7f3 fdd7 	bl	8000648 <__aeabi_dmul>
 800ca9a:	ec53 2b18 	vmov	r2, r3, d8
 800ca9e:	4604      	mov	r4, r0
 800caa0:	460d      	mov	r5, r1
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7f3 fdcf 	bl	8000648 <__aeabi_dmul>
 800caaa:	460b      	mov	r3, r1
 800caac:	4602      	mov	r2, r0
 800caae:	4629      	mov	r1, r5
 800cab0:	4620      	mov	r0, r4
 800cab2:	f7f3 fc11 	bl	80002d8 <__aeabi_dsub>
 800cab6:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <__kernel_cos+0x17c>)
 800cab8:	429e      	cmp	r6, r3
 800caba:	4680      	mov	r8, r0
 800cabc:	4689      	mov	r9, r1
 800cabe:	dc11      	bgt.n	800cae4 <__kernel_cos+0x104>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4650      	mov	r0, sl
 800cac6:	4659      	mov	r1, fp
 800cac8:	f7f3 fc06 	bl	80002d8 <__aeabi_dsub>
 800cacc:	460b      	mov	r3, r1
 800cace:	4924      	ldr	r1, [pc, #144]	; (800cb60 <__kernel_cos+0x180>)
 800cad0:	4602      	mov	r2, r0
 800cad2:	2000      	movs	r0, #0
 800cad4:	f7f3 fc00 	bl	80002d8 <__aeabi_dsub>
 800cad8:	ecbd 8b02 	vpop	{d8}
 800cadc:	ec41 0b10 	vmov	d0, r0, r1
 800cae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae4:	4b1f      	ldr	r3, [pc, #124]	; (800cb64 <__kernel_cos+0x184>)
 800cae6:	491e      	ldr	r1, [pc, #120]	; (800cb60 <__kernel_cos+0x180>)
 800cae8:	429e      	cmp	r6, r3
 800caea:	bfcc      	ite	gt
 800caec:	4d1e      	ldrgt	r5, [pc, #120]	; (800cb68 <__kernel_cos+0x188>)
 800caee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800caf2:	2400      	movs	r4, #0
 800caf4:	4622      	mov	r2, r4
 800caf6:	462b      	mov	r3, r5
 800caf8:	2000      	movs	r0, #0
 800cafa:	f7f3 fbed 	bl	80002d8 <__aeabi_dsub>
 800cafe:	4622      	mov	r2, r4
 800cb00:	4606      	mov	r6, r0
 800cb02:	460f      	mov	r7, r1
 800cb04:	462b      	mov	r3, r5
 800cb06:	4650      	mov	r0, sl
 800cb08:	4659      	mov	r1, fp
 800cb0a:	f7f3 fbe5 	bl	80002d8 <__aeabi_dsub>
 800cb0e:	4642      	mov	r2, r8
 800cb10:	464b      	mov	r3, r9
 800cb12:	f7f3 fbe1 	bl	80002d8 <__aeabi_dsub>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	e7d9      	b.n	800cad4 <__kernel_cos+0xf4>
 800cb20:	2000      	movs	r0, #0
 800cb22:	490f      	ldr	r1, [pc, #60]	; (800cb60 <__kernel_cos+0x180>)
 800cb24:	e7d8      	b.n	800cad8 <__kernel_cos+0xf8>
 800cb26:	bf00      	nop
 800cb28:	be8838d4 	.word	0xbe8838d4
 800cb2c:	bda8fae9 	.word	0xbda8fae9
 800cb30:	bdb4b1c4 	.word	0xbdb4b1c4
 800cb34:	3e21ee9e 	.word	0x3e21ee9e
 800cb38:	809c52ad 	.word	0x809c52ad
 800cb3c:	3e927e4f 	.word	0x3e927e4f
 800cb40:	19cb1590 	.word	0x19cb1590
 800cb44:	3efa01a0 	.word	0x3efa01a0
 800cb48:	16c15177 	.word	0x16c15177
 800cb4c:	3f56c16c 	.word	0x3f56c16c
 800cb50:	5555554c 	.word	0x5555554c
 800cb54:	3fa55555 	.word	0x3fa55555
 800cb58:	3fe00000 	.word	0x3fe00000
 800cb5c:	3fd33332 	.word	0x3fd33332
 800cb60:	3ff00000 	.word	0x3ff00000
 800cb64:	3fe90000 	.word	0x3fe90000
 800cb68:	3fd20000 	.word	0x3fd20000
 800cb6c:	00000000 	.word	0x00000000

0800cb70 <__kernel_rem_pio2>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	ed2d 8b02 	vpush	{d8}
 800cb78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800cb7c:	1ed4      	subs	r4, r2, #3
 800cb7e:	9308      	str	r3, [sp, #32]
 800cb80:	9101      	str	r1, [sp, #4]
 800cb82:	4bc5      	ldr	r3, [pc, #788]	; (800ce98 <__kernel_rem_pio2+0x328>)
 800cb84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800cb86:	9009      	str	r0, [sp, #36]	; 0x24
 800cb88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	9b08      	ldr	r3, [sp, #32]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	9307      	str	r3, [sp, #28]
 800cb94:	2318      	movs	r3, #24
 800cb96:	fb94 f4f3 	sdiv	r4, r4, r3
 800cb9a:	f06f 0317 	mvn.w	r3, #23
 800cb9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800cba2:	fb04 3303 	mla	r3, r4, r3, r3
 800cba6:	eb03 0a02 	add.w	sl, r3, r2
 800cbaa:	9b04      	ldr	r3, [sp, #16]
 800cbac:	9a07      	ldr	r2, [sp, #28]
 800cbae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ce88 <__kernel_rem_pio2+0x318>
 800cbb2:	eb03 0802 	add.w	r8, r3, r2
 800cbb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cbb8:	1aa7      	subs	r7, r4, r2
 800cbba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cbbe:	ae22      	add	r6, sp, #136	; 0x88
 800cbc0:	2500      	movs	r5, #0
 800cbc2:	4545      	cmp	r5, r8
 800cbc4:	dd13      	ble.n	800cbee <__kernel_rem_pio2+0x7e>
 800cbc6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800ce88 <__kernel_rem_pio2+0x318>
 800cbca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800cbce:	2600      	movs	r6, #0
 800cbd0:	9b04      	ldr	r3, [sp, #16]
 800cbd2:	429e      	cmp	r6, r3
 800cbd4:	dc32      	bgt.n	800cc3c <__kernel_rem_pio2+0xcc>
 800cbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd8:	9302      	str	r3, [sp, #8]
 800cbda:	9b08      	ldr	r3, [sp, #32]
 800cbdc:	199d      	adds	r5, r3, r6
 800cbde:	ab22      	add	r3, sp, #136	; 0x88
 800cbe0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cbe4:	9306      	str	r3, [sp, #24]
 800cbe6:	ec59 8b18 	vmov	r8, r9, d8
 800cbea:	2700      	movs	r7, #0
 800cbec:	e01f      	b.n	800cc2e <__kernel_rem_pio2+0xbe>
 800cbee:	42ef      	cmn	r7, r5
 800cbf0:	d407      	bmi.n	800cc02 <__kernel_rem_pio2+0x92>
 800cbf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cbf6:	f7f3 fcbd 	bl	8000574 <__aeabi_i2d>
 800cbfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cbfe:	3501      	adds	r5, #1
 800cc00:	e7df      	b.n	800cbc2 <__kernel_rem_pio2+0x52>
 800cc02:	ec51 0b18 	vmov	r0, r1, d8
 800cc06:	e7f8      	b.n	800cbfa <__kernel_rem_pio2+0x8a>
 800cc08:	9906      	ldr	r1, [sp, #24]
 800cc0a:	9d02      	ldr	r5, [sp, #8]
 800cc0c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cc10:	9106      	str	r1, [sp, #24]
 800cc12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800cc16:	9502      	str	r5, [sp, #8]
 800cc18:	f7f3 fd16 	bl	8000648 <__aeabi_dmul>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4640      	mov	r0, r8
 800cc22:	4649      	mov	r1, r9
 800cc24:	f7f3 fb5a 	bl	80002dc <__adddf3>
 800cc28:	3701      	adds	r7, #1
 800cc2a:	4680      	mov	r8, r0
 800cc2c:	4689      	mov	r9, r1
 800cc2e:	9b07      	ldr	r3, [sp, #28]
 800cc30:	429f      	cmp	r7, r3
 800cc32:	dde9      	ble.n	800cc08 <__kernel_rem_pio2+0x98>
 800cc34:	e8eb 8902 	strd	r8, r9, [fp], #8
 800cc38:	3601      	adds	r6, #1
 800cc3a:	e7c9      	b.n	800cbd0 <__kernel_rem_pio2+0x60>
 800cc3c:	9b04      	ldr	r3, [sp, #16]
 800cc3e:	aa0e      	add	r2, sp, #56	; 0x38
 800cc40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc44:	930c      	str	r3, [sp, #48]	; 0x30
 800cc46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cc48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cc4c:	9c04      	ldr	r4, [sp, #16]
 800cc4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc50:	ab9a      	add	r3, sp, #616	; 0x268
 800cc52:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800cc56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc5e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800cc62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800cc66:	ab9a      	add	r3, sp, #616	; 0x268
 800cc68:	445b      	add	r3, fp
 800cc6a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800cc6e:	2500      	movs	r5, #0
 800cc70:	1b63      	subs	r3, r4, r5
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	dc78      	bgt.n	800cd68 <__kernel_rem_pio2+0x1f8>
 800cc76:	4650      	mov	r0, sl
 800cc78:	ec49 8b10 	vmov	d0, r8, r9
 800cc7c:	f000 fe3c 	bl	800d8f8 <scalbn>
 800cc80:	ec57 6b10 	vmov	r6, r7, d0
 800cc84:	2200      	movs	r2, #0
 800cc86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cc8a:	ee10 0a10 	vmov	r0, s0
 800cc8e:	4639      	mov	r1, r7
 800cc90:	f7f3 fcda 	bl	8000648 <__aeabi_dmul>
 800cc94:	ec41 0b10 	vmov	d0, r0, r1
 800cc98:	f000 fd1a 	bl	800d6d0 <floor>
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	ec51 0b10 	vmov	r0, r1, d0
 800cca2:	4b7e      	ldr	r3, [pc, #504]	; (800ce9c <__kernel_rem_pio2+0x32c>)
 800cca4:	f7f3 fcd0 	bl	8000648 <__aeabi_dmul>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4630      	mov	r0, r6
 800ccae:	4639      	mov	r1, r7
 800ccb0:	f7f3 fb12 	bl	80002d8 <__aeabi_dsub>
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	f7f3 ff76 	bl	8000ba8 <__aeabi_d2iz>
 800ccbc:	9006      	str	r0, [sp, #24]
 800ccbe:	f7f3 fc59 	bl	8000574 <__aeabi_i2d>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	f7f3 fb05 	bl	80002d8 <__aeabi_dsub>
 800ccce:	f1ba 0f00 	cmp.w	sl, #0
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	460f      	mov	r7, r1
 800ccd6:	dd6c      	ble.n	800cdb2 <__kernel_rem_pio2+0x242>
 800ccd8:	1e62      	subs	r2, r4, #1
 800ccda:	ab0e      	add	r3, sp, #56	; 0x38
 800ccdc:	f1ca 0118 	rsb	r1, sl, #24
 800cce0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cce4:	9d06      	ldr	r5, [sp, #24]
 800cce6:	fa40 f301 	asr.w	r3, r0, r1
 800ccea:	441d      	add	r5, r3
 800ccec:	408b      	lsls	r3, r1
 800ccee:	1ac0      	subs	r0, r0, r3
 800ccf0:	ab0e      	add	r3, sp, #56	; 0x38
 800ccf2:	9506      	str	r5, [sp, #24]
 800ccf4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ccf8:	f1ca 0317 	rsb	r3, sl, #23
 800ccfc:	fa40 f303 	asr.w	r3, r0, r3
 800cd00:	9302      	str	r3, [sp, #8]
 800cd02:	9b02      	ldr	r3, [sp, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dd62      	ble.n	800cdce <__kernel_rem_pio2+0x25e>
 800cd08:	9b06      	ldr	r3, [sp, #24]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	9306      	str	r3, [sp, #24]
 800cd10:	4615      	mov	r5, r2
 800cd12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cd16:	4294      	cmp	r4, r2
 800cd18:	f300 8095 	bgt.w	800ce46 <__kernel_rem_pio2+0x2d6>
 800cd1c:	f1ba 0f00 	cmp.w	sl, #0
 800cd20:	dd07      	ble.n	800cd32 <__kernel_rem_pio2+0x1c2>
 800cd22:	f1ba 0f01 	cmp.w	sl, #1
 800cd26:	f000 80a2 	beq.w	800ce6e <__kernel_rem_pio2+0x2fe>
 800cd2a:	f1ba 0f02 	cmp.w	sl, #2
 800cd2e:	f000 80c1 	beq.w	800ceb4 <__kernel_rem_pio2+0x344>
 800cd32:	9b02      	ldr	r3, [sp, #8]
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d14a      	bne.n	800cdce <__kernel_rem_pio2+0x25e>
 800cd38:	4632      	mov	r2, r6
 800cd3a:	463b      	mov	r3, r7
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	4958      	ldr	r1, [pc, #352]	; (800cea0 <__kernel_rem_pio2+0x330>)
 800cd40:	f7f3 faca 	bl	80002d8 <__aeabi_dsub>
 800cd44:	4606      	mov	r6, r0
 800cd46:	460f      	mov	r7, r1
 800cd48:	2d00      	cmp	r5, #0
 800cd4a:	d040      	beq.n	800cdce <__kernel_rem_pio2+0x25e>
 800cd4c:	4650      	mov	r0, sl
 800cd4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ce90 <__kernel_rem_pio2+0x320>
 800cd52:	f000 fdd1 	bl	800d8f8 <scalbn>
 800cd56:	4630      	mov	r0, r6
 800cd58:	4639      	mov	r1, r7
 800cd5a:	ec53 2b10 	vmov	r2, r3, d0
 800cd5e:	f7f3 fabb 	bl	80002d8 <__aeabi_dsub>
 800cd62:	4606      	mov	r6, r0
 800cd64:	460f      	mov	r7, r1
 800cd66:	e032      	b.n	800cdce <__kernel_rem_pio2+0x25e>
 800cd68:	2200      	movs	r2, #0
 800cd6a:	4b4e      	ldr	r3, [pc, #312]	; (800cea4 <__kernel_rem_pio2+0x334>)
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	4649      	mov	r1, r9
 800cd70:	f7f3 fc6a 	bl	8000648 <__aeabi_dmul>
 800cd74:	f7f3 ff18 	bl	8000ba8 <__aeabi_d2iz>
 800cd78:	f7f3 fbfc 	bl	8000574 <__aeabi_i2d>
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	4b4a      	ldr	r3, [pc, #296]	; (800cea8 <__kernel_rem_pio2+0x338>)
 800cd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd84:	f7f3 fc60 	bl	8000648 <__aeabi_dmul>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	4649      	mov	r1, r9
 800cd90:	f7f3 faa2 	bl	80002d8 <__aeabi_dsub>
 800cd94:	f7f3 ff08 	bl	8000ba8 <__aeabi_d2iz>
 800cd98:	ab0e      	add	r3, sp, #56	; 0x38
 800cd9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800cd9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda6:	f7f3 fa99 	bl	80002dc <__adddf3>
 800cdaa:	3501      	adds	r5, #1
 800cdac:	4680      	mov	r8, r0
 800cdae:	4689      	mov	r9, r1
 800cdb0:	e75e      	b.n	800cc70 <__kernel_rem_pio2+0x100>
 800cdb2:	d105      	bne.n	800cdc0 <__kernel_rem_pio2+0x250>
 800cdb4:	1e63      	subs	r3, r4, #1
 800cdb6:	aa0e      	add	r2, sp, #56	; 0x38
 800cdb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cdbc:	15c3      	asrs	r3, r0, #23
 800cdbe:	e79f      	b.n	800cd00 <__kernel_rem_pio2+0x190>
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	4b3a      	ldr	r3, [pc, #232]	; (800ceac <__kernel_rem_pio2+0x33c>)
 800cdc4:	f7f3 fec6 	bl	8000b54 <__aeabi_dcmpge>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d139      	bne.n	800ce40 <__kernel_rem_pio2+0x2d0>
 800cdcc:	9002      	str	r0, [sp, #8]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f7f3 fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f000 80c7 	beq.w	800cf6e <__kernel_rem_pio2+0x3fe>
 800cde0:	1e65      	subs	r5, r4, #1
 800cde2:	462b      	mov	r3, r5
 800cde4:	2200      	movs	r2, #0
 800cde6:	9904      	ldr	r1, [sp, #16]
 800cde8:	428b      	cmp	r3, r1
 800cdea:	da6a      	bge.n	800cec2 <__kernel_rem_pio2+0x352>
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	f000 8088 	beq.w	800cf02 <__kernel_rem_pio2+0x392>
 800cdf2:	ab0e      	add	r3, sp, #56	; 0x38
 800cdf4:	f1aa 0a18 	sub.w	sl, sl, #24
 800cdf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f000 80b4 	beq.w	800cf6a <__kernel_rem_pio2+0x3fa>
 800ce02:	4650      	mov	r0, sl
 800ce04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800ce90 <__kernel_rem_pio2+0x320>
 800ce08:	f000 fd76 	bl	800d8f8 <scalbn>
 800ce0c:	00ec      	lsls	r4, r5, #3
 800ce0e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ce10:	191e      	adds	r6, r3, r4
 800ce12:	ec59 8b10 	vmov	r8, r9, d0
 800ce16:	f106 0a08 	add.w	sl, r6, #8
 800ce1a:	462f      	mov	r7, r5
 800ce1c:	2f00      	cmp	r7, #0
 800ce1e:	f280 80df 	bge.w	800cfe0 <__kernel_rem_pio2+0x470>
 800ce22:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800ce88 <__kernel_rem_pio2+0x318>
 800ce26:	f04f 0a00 	mov.w	sl, #0
 800ce2a:	eba5 030a 	sub.w	r3, r5, sl
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f2c0 810a 	blt.w	800d048 <__kernel_rem_pio2+0x4d8>
 800ce34:	f8df b078 	ldr.w	fp, [pc, #120]	; 800ceb0 <__kernel_rem_pio2+0x340>
 800ce38:	ec59 8b18 	vmov	r8, r9, d8
 800ce3c:	2700      	movs	r7, #0
 800ce3e:	e0f5      	b.n	800d02c <__kernel_rem_pio2+0x4bc>
 800ce40:	2302      	movs	r3, #2
 800ce42:	9302      	str	r3, [sp, #8]
 800ce44:	e760      	b.n	800cd08 <__kernel_rem_pio2+0x198>
 800ce46:	ab0e      	add	r3, sp, #56	; 0x38
 800ce48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4c:	b94d      	cbnz	r5, 800ce62 <__kernel_rem_pio2+0x2f2>
 800ce4e:	b12b      	cbz	r3, 800ce5c <__kernel_rem_pio2+0x2ec>
 800ce50:	a80e      	add	r0, sp, #56	; 0x38
 800ce52:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ce56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	3201      	adds	r2, #1
 800ce5e:	461d      	mov	r5, r3
 800ce60:	e759      	b.n	800cd16 <__kernel_rem_pio2+0x1a6>
 800ce62:	a80e      	add	r0, sp, #56	; 0x38
 800ce64:	1acb      	subs	r3, r1, r3
 800ce66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ce6a:	462b      	mov	r3, r5
 800ce6c:	e7f6      	b.n	800ce5c <__kernel_rem_pio2+0x2ec>
 800ce6e:	1e62      	subs	r2, r4, #1
 800ce70:	ab0e      	add	r3, sp, #56	; 0x38
 800ce72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ce7a:	a90e      	add	r1, sp, #56	; 0x38
 800ce7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ce80:	e757      	b.n	800cd32 <__kernel_rem_pio2+0x1c2>
 800ce82:	bf00      	nop
 800ce84:	f3af 8000 	nop.w
	...
 800ce94:	3ff00000 	.word	0x3ff00000
 800ce98:	0800df88 	.word	0x0800df88
 800ce9c:	40200000 	.word	0x40200000
 800cea0:	3ff00000 	.word	0x3ff00000
 800cea4:	3e700000 	.word	0x3e700000
 800cea8:	41700000 	.word	0x41700000
 800ceac:	3fe00000 	.word	0x3fe00000
 800ceb0:	0800df48 	.word	0x0800df48
 800ceb4:	1e62      	subs	r2, r4, #1
 800ceb6:	ab0e      	add	r3, sp, #56	; 0x38
 800ceb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cebc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cec0:	e7db      	b.n	800ce7a <__kernel_rem_pio2+0x30a>
 800cec2:	a90e      	add	r1, sp, #56	; 0x38
 800cec4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	430a      	orrs	r2, r1
 800cecc:	e78b      	b.n	800cde6 <__kernel_rem_pio2+0x276>
 800cece:	3301      	adds	r3, #1
 800ced0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ced4:	2900      	cmp	r1, #0
 800ced6:	d0fa      	beq.n	800cece <__kernel_rem_pio2+0x35e>
 800ced8:	9a08      	ldr	r2, [sp, #32]
 800ceda:	4422      	add	r2, r4
 800cedc:	00d2      	lsls	r2, r2, #3
 800cede:	a922      	add	r1, sp, #136	; 0x88
 800cee0:	18e3      	adds	r3, r4, r3
 800cee2:	9206      	str	r2, [sp, #24]
 800cee4:	440a      	add	r2, r1
 800cee6:	9302      	str	r3, [sp, #8]
 800cee8:	f10b 0108 	add.w	r1, fp, #8
 800ceec:	f102 0308 	add.w	r3, r2, #8
 800cef0:	1c66      	adds	r6, r4, #1
 800cef2:	910a      	str	r1, [sp, #40]	; 0x28
 800cef4:	2500      	movs	r5, #0
 800cef6:	930d      	str	r3, [sp, #52]	; 0x34
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	42b3      	cmp	r3, r6
 800cefc:	da04      	bge.n	800cf08 <__kernel_rem_pio2+0x398>
 800cefe:	461c      	mov	r4, r3
 800cf00:	e6a6      	b.n	800cc50 <__kernel_rem_pio2+0xe0>
 800cf02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf04:	2301      	movs	r3, #1
 800cf06:	e7e3      	b.n	800ced0 <__kernel_rem_pio2+0x360>
 800cf08:	9b06      	ldr	r3, [sp, #24]
 800cf0a:	18ef      	adds	r7, r5, r3
 800cf0c:	ab22      	add	r3, sp, #136	; 0x88
 800cf0e:	441f      	add	r7, r3
 800cf10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cf16:	f7f3 fb2d 	bl	8000574 <__aeabi_i2d>
 800cf1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf1c:	461c      	mov	r4, r3
 800cf1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf20:	e9c7 0100 	strd	r0, r1, [r7]
 800cf24:	eb03 0b05 	add.w	fp, r3, r5
 800cf28:	2700      	movs	r7, #0
 800cf2a:	f04f 0800 	mov.w	r8, #0
 800cf2e:	f04f 0900 	mov.w	r9, #0
 800cf32:	9b07      	ldr	r3, [sp, #28]
 800cf34:	429f      	cmp	r7, r3
 800cf36:	dd08      	ble.n	800cf4a <__kernel_rem_pio2+0x3da>
 800cf38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf3a:	aa72      	add	r2, sp, #456	; 0x1c8
 800cf3c:	18eb      	adds	r3, r5, r3
 800cf3e:	4413      	add	r3, r2
 800cf40:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800cf44:	3601      	adds	r6, #1
 800cf46:	3508      	adds	r5, #8
 800cf48:	e7d6      	b.n	800cef8 <__kernel_rem_pio2+0x388>
 800cf4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cf4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cf52:	f7f3 fb79 	bl	8000648 <__aeabi_dmul>
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	4649      	mov	r1, r9
 800cf5e:	f7f3 f9bd 	bl	80002dc <__adddf3>
 800cf62:	3701      	adds	r7, #1
 800cf64:	4680      	mov	r8, r0
 800cf66:	4689      	mov	r9, r1
 800cf68:	e7e3      	b.n	800cf32 <__kernel_rem_pio2+0x3c2>
 800cf6a:	3d01      	subs	r5, #1
 800cf6c:	e741      	b.n	800cdf2 <__kernel_rem_pio2+0x282>
 800cf6e:	f1ca 0000 	rsb	r0, sl, #0
 800cf72:	ec47 6b10 	vmov	d0, r6, r7
 800cf76:	f000 fcbf 	bl	800d8f8 <scalbn>
 800cf7a:	ec57 6b10 	vmov	r6, r7, d0
 800cf7e:	2200      	movs	r2, #0
 800cf80:	4b99      	ldr	r3, [pc, #612]	; (800d1e8 <__kernel_rem_pio2+0x678>)
 800cf82:	ee10 0a10 	vmov	r0, s0
 800cf86:	4639      	mov	r1, r7
 800cf88:	f7f3 fde4 	bl	8000b54 <__aeabi_dcmpge>
 800cf8c:	b1f8      	cbz	r0, 800cfce <__kernel_rem_pio2+0x45e>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	4b96      	ldr	r3, [pc, #600]	; (800d1ec <__kernel_rem_pio2+0x67c>)
 800cf92:	4630      	mov	r0, r6
 800cf94:	4639      	mov	r1, r7
 800cf96:	f7f3 fb57 	bl	8000648 <__aeabi_dmul>
 800cf9a:	f7f3 fe05 	bl	8000ba8 <__aeabi_d2iz>
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	f7f3 fae8 	bl	8000574 <__aeabi_i2d>
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	4b90      	ldr	r3, [pc, #576]	; (800d1e8 <__kernel_rem_pio2+0x678>)
 800cfa8:	f7f3 fb4e 	bl	8000648 <__aeabi_dmul>
 800cfac:	460b      	mov	r3, r1
 800cfae:	4602      	mov	r2, r0
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f7f3 f990 	bl	80002d8 <__aeabi_dsub>
 800cfb8:	f7f3 fdf6 	bl	8000ba8 <__aeabi_d2iz>
 800cfbc:	1c65      	adds	r5, r4, #1
 800cfbe:	ab0e      	add	r3, sp, #56	; 0x38
 800cfc0:	f10a 0a18 	add.w	sl, sl, #24
 800cfc4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cfc8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cfcc:	e719      	b.n	800ce02 <__kernel_rem_pio2+0x292>
 800cfce:	4630      	mov	r0, r6
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	f7f3 fde9 	bl	8000ba8 <__aeabi_d2iz>
 800cfd6:	ab0e      	add	r3, sp, #56	; 0x38
 800cfd8:	4625      	mov	r5, r4
 800cfda:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cfde:	e710      	b.n	800ce02 <__kernel_rem_pio2+0x292>
 800cfe0:	ab0e      	add	r3, sp, #56	; 0x38
 800cfe2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cfe6:	f7f3 fac5 	bl	8000574 <__aeabi_i2d>
 800cfea:	4642      	mov	r2, r8
 800cfec:	464b      	mov	r3, r9
 800cfee:	f7f3 fb2b 	bl	8000648 <__aeabi_dmul>
 800cff2:	2200      	movs	r2, #0
 800cff4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800cff8:	4b7c      	ldr	r3, [pc, #496]	; (800d1ec <__kernel_rem_pio2+0x67c>)
 800cffa:	4640      	mov	r0, r8
 800cffc:	4649      	mov	r1, r9
 800cffe:	f7f3 fb23 	bl	8000648 <__aeabi_dmul>
 800d002:	3f01      	subs	r7, #1
 800d004:	4680      	mov	r8, r0
 800d006:	4689      	mov	r9, r1
 800d008:	e708      	b.n	800ce1c <__kernel_rem_pio2+0x2ac>
 800d00a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800d016:	f7f3 fb17 	bl	8000648 <__aeabi_dmul>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	4640      	mov	r0, r8
 800d020:	4649      	mov	r1, r9
 800d022:	f7f3 f95b 	bl	80002dc <__adddf3>
 800d026:	3701      	adds	r7, #1
 800d028:	4680      	mov	r8, r0
 800d02a:	4689      	mov	r9, r1
 800d02c:	9b04      	ldr	r3, [sp, #16]
 800d02e:	429f      	cmp	r7, r3
 800d030:	dc01      	bgt.n	800d036 <__kernel_rem_pio2+0x4c6>
 800d032:	45ba      	cmp	sl, r7
 800d034:	dae9      	bge.n	800d00a <__kernel_rem_pio2+0x49a>
 800d036:	ab4a      	add	r3, sp, #296	; 0x128
 800d038:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d03c:	e9c3 8900 	strd	r8, r9, [r3]
 800d040:	f10a 0a01 	add.w	sl, sl, #1
 800d044:	3e08      	subs	r6, #8
 800d046:	e6f0      	b.n	800ce2a <__kernel_rem_pio2+0x2ba>
 800d048:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d85b      	bhi.n	800d106 <__kernel_rem_pio2+0x596>
 800d04e:	e8df f003 	tbb	[pc, r3]
 800d052:	264a      	.short	0x264a
 800d054:	0226      	.short	0x0226
 800d056:	ab9a      	add	r3, sp, #616	; 0x268
 800d058:	441c      	add	r4, r3
 800d05a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d05e:	46a2      	mov	sl, r4
 800d060:	46ab      	mov	fp, r5
 800d062:	f1bb 0f00 	cmp.w	fp, #0
 800d066:	dc6c      	bgt.n	800d142 <__kernel_rem_pio2+0x5d2>
 800d068:	46a2      	mov	sl, r4
 800d06a:	46ab      	mov	fp, r5
 800d06c:	f1bb 0f01 	cmp.w	fp, #1
 800d070:	f300 8086 	bgt.w	800d180 <__kernel_rem_pio2+0x610>
 800d074:	2000      	movs	r0, #0
 800d076:	2100      	movs	r1, #0
 800d078:	2d01      	cmp	r5, #1
 800d07a:	f300 80a0 	bgt.w	800d1be <__kernel_rem_pio2+0x64e>
 800d07e:	9b02      	ldr	r3, [sp, #8]
 800d080:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d084:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f040 809e 	bne.w	800d1ca <__kernel_rem_pio2+0x65a>
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	e9c3 7800 	strd	r7, r8, [r3]
 800d094:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d098:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d09c:	e033      	b.n	800d106 <__kernel_rem_pio2+0x596>
 800d09e:	3408      	adds	r4, #8
 800d0a0:	ab4a      	add	r3, sp, #296	; 0x128
 800d0a2:	441c      	add	r4, r3
 800d0a4:	462e      	mov	r6, r5
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	da3a      	bge.n	800d124 <__kernel_rem_pio2+0x5b4>
 800d0ae:	9b02      	ldr	r3, [sp, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d03d      	beq.n	800d130 <__kernel_rem_pio2+0x5c0>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0ba:	9c01      	ldr	r4, [sp, #4]
 800d0bc:	e9c4 2300 	strd	r2, r3, [r4]
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d0c8:	f7f3 f906 	bl	80002d8 <__aeabi_dsub>
 800d0cc:	ae4c      	add	r6, sp, #304	; 0x130
 800d0ce:	2401      	movs	r4, #1
 800d0d0:	42a5      	cmp	r5, r4
 800d0d2:	da30      	bge.n	800d136 <__kernel_rem_pio2+0x5c6>
 800d0d4:	9b02      	ldr	r3, [sp, #8]
 800d0d6:	b113      	cbz	r3, 800d0de <__kernel_rem_pio2+0x56e>
 800d0d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0dc:	4619      	mov	r1, r3
 800d0de:	9b01      	ldr	r3, [sp, #4]
 800d0e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d0e4:	e00f      	b.n	800d106 <__kernel_rem_pio2+0x596>
 800d0e6:	ab9a      	add	r3, sp, #616	; 0x268
 800d0e8:	441c      	add	r4, r3
 800d0ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	2d00      	cmp	r5, #0
 800d0f4:	da10      	bge.n	800d118 <__kernel_rem_pio2+0x5a8>
 800d0f6:	9b02      	ldr	r3, [sp, #8]
 800d0f8:	b113      	cbz	r3, 800d100 <__kernel_rem_pio2+0x590>
 800d0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0fe:	4619      	mov	r1, r3
 800d100:	9b01      	ldr	r3, [sp, #4]
 800d102:	e9c3 0100 	strd	r0, r1, [r3]
 800d106:	9b06      	ldr	r3, [sp, #24]
 800d108:	f003 0007 	and.w	r0, r3, #7
 800d10c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d110:	ecbd 8b02 	vpop	{d8}
 800d114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d118:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d11c:	f7f3 f8de 	bl	80002dc <__adddf3>
 800d120:	3d01      	subs	r5, #1
 800d122:	e7e6      	b.n	800d0f2 <__kernel_rem_pio2+0x582>
 800d124:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d128:	f7f3 f8d8 	bl	80002dc <__adddf3>
 800d12c:	3e01      	subs	r6, #1
 800d12e:	e7bc      	b.n	800d0aa <__kernel_rem_pio2+0x53a>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	e7c1      	b.n	800d0ba <__kernel_rem_pio2+0x54a>
 800d136:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d13a:	f7f3 f8cf 	bl	80002dc <__adddf3>
 800d13e:	3401      	adds	r4, #1
 800d140:	e7c6      	b.n	800d0d0 <__kernel_rem_pio2+0x560>
 800d142:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800d146:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d14a:	4640      	mov	r0, r8
 800d14c:	ec53 2b17 	vmov	r2, r3, d7
 800d150:	4649      	mov	r1, r9
 800d152:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d156:	f7f3 f8c1 	bl	80002dc <__adddf3>
 800d15a:	4602      	mov	r2, r0
 800d15c:	460b      	mov	r3, r1
 800d15e:	4606      	mov	r6, r0
 800d160:	460f      	mov	r7, r1
 800d162:	4640      	mov	r0, r8
 800d164:	4649      	mov	r1, r9
 800d166:	f7f3 f8b7 	bl	80002d8 <__aeabi_dsub>
 800d16a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d16e:	f7f3 f8b5 	bl	80002dc <__adddf3>
 800d172:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d176:	e9ca 0100 	strd	r0, r1, [sl]
 800d17a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800d17e:	e770      	b.n	800d062 <__kernel_rem_pio2+0x4f2>
 800d180:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800d184:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d188:	4630      	mov	r0, r6
 800d18a:	ec53 2b17 	vmov	r2, r3, d7
 800d18e:	4639      	mov	r1, r7
 800d190:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d194:	f7f3 f8a2 	bl	80002dc <__adddf3>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4680      	mov	r8, r0
 800d19e:	4689      	mov	r9, r1
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	f7f3 f898 	bl	80002d8 <__aeabi_dsub>
 800d1a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1ac:	f7f3 f896 	bl	80002dc <__adddf3>
 800d1b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1b4:	e9ca 0100 	strd	r0, r1, [sl]
 800d1b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d1bc:	e756      	b.n	800d06c <__kernel_rem_pio2+0x4fc>
 800d1be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d1c2:	f7f3 f88b 	bl	80002dc <__adddf3>
 800d1c6:	3d01      	subs	r5, #1
 800d1c8:	e756      	b.n	800d078 <__kernel_rem_pio2+0x508>
 800d1ca:	9b01      	ldr	r3, [sp, #4]
 800d1cc:	9a01      	ldr	r2, [sp, #4]
 800d1ce:	601f      	str	r7, [r3, #0]
 800d1d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d1d4:	605c      	str	r4, [r3, #4]
 800d1d6:	609d      	str	r5, [r3, #8]
 800d1d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d1dc:	60d3      	str	r3, [r2, #12]
 800d1de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1e2:	6110      	str	r0, [r2, #16]
 800d1e4:	6153      	str	r3, [r2, #20]
 800d1e6:	e78e      	b.n	800d106 <__kernel_rem_pio2+0x596>
 800d1e8:	41700000 	.word	0x41700000
 800d1ec:	3e700000 	.word	0x3e700000

0800d1f0 <__kernel_sin>:
 800d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	ec55 4b10 	vmov	r4, r5, d0
 800d1f8:	b085      	sub	sp, #20
 800d1fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d1fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d202:	ed8d 1b00 	vstr	d1, [sp]
 800d206:	9002      	str	r0, [sp, #8]
 800d208:	da06      	bge.n	800d218 <__kernel_sin+0x28>
 800d20a:	ee10 0a10 	vmov	r0, s0
 800d20e:	4629      	mov	r1, r5
 800d210:	f7f3 fcca 	bl	8000ba8 <__aeabi_d2iz>
 800d214:	2800      	cmp	r0, #0
 800d216:	d051      	beq.n	800d2bc <__kernel_sin+0xcc>
 800d218:	4622      	mov	r2, r4
 800d21a:	462b      	mov	r3, r5
 800d21c:	4620      	mov	r0, r4
 800d21e:	4629      	mov	r1, r5
 800d220:	f7f3 fa12 	bl	8000648 <__aeabi_dmul>
 800d224:	4682      	mov	sl, r0
 800d226:	468b      	mov	fp, r1
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4620      	mov	r0, r4
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 fa0a 	bl	8000648 <__aeabi_dmul>
 800d234:	a341      	add	r3, pc, #260	; (adr r3, 800d33c <__kernel_sin+0x14c>)
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	4680      	mov	r8, r0
 800d23c:	4689      	mov	r9, r1
 800d23e:	4650      	mov	r0, sl
 800d240:	4659      	mov	r1, fp
 800d242:	f7f3 fa01 	bl	8000648 <__aeabi_dmul>
 800d246:	a33f      	add	r3, pc, #252	; (adr r3, 800d344 <__kernel_sin+0x154>)
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	f7f3 f844 	bl	80002d8 <__aeabi_dsub>
 800d250:	4652      	mov	r2, sl
 800d252:	465b      	mov	r3, fp
 800d254:	f7f3 f9f8 	bl	8000648 <__aeabi_dmul>
 800d258:	a33c      	add	r3, pc, #240	; (adr r3, 800d34c <__kernel_sin+0x15c>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f3 f83d 	bl	80002dc <__adddf3>
 800d262:	4652      	mov	r2, sl
 800d264:	465b      	mov	r3, fp
 800d266:	f7f3 f9ef 	bl	8000648 <__aeabi_dmul>
 800d26a:	a33a      	add	r3, pc, #232	; (adr r3, 800d354 <__kernel_sin+0x164>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	f7f3 f832 	bl	80002d8 <__aeabi_dsub>
 800d274:	4652      	mov	r2, sl
 800d276:	465b      	mov	r3, fp
 800d278:	f7f3 f9e6 	bl	8000648 <__aeabi_dmul>
 800d27c:	a337      	add	r3, pc, #220	; (adr r3, 800d35c <__kernel_sin+0x16c>)
 800d27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d282:	f7f3 f82b 	bl	80002dc <__adddf3>
 800d286:	9b02      	ldr	r3, [sp, #8]
 800d288:	4606      	mov	r6, r0
 800d28a:	460f      	mov	r7, r1
 800d28c:	b9db      	cbnz	r3, 800d2c6 <__kernel_sin+0xd6>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4650      	mov	r0, sl
 800d294:	4659      	mov	r1, fp
 800d296:	f7f3 f9d7 	bl	8000648 <__aeabi_dmul>
 800d29a:	a325      	add	r3, pc, #148	; (adr r3, 800d330 <__kernel_sin+0x140>)
 800d29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a0:	f7f3 f81a 	bl	80002d8 <__aeabi_dsub>
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	f7f3 f9ce 	bl	8000648 <__aeabi_dmul>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	f7f3 f812 	bl	80002dc <__adddf3>
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	460d      	mov	r5, r1
 800d2bc:	ec45 4b10 	vmov	d0, r4, r5
 800d2c0:	b005      	add	sp, #20
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	4b1b      	ldr	r3, [pc, #108]	; (800d338 <__kernel_sin+0x148>)
 800d2ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2ce:	f7f3 f9bb 	bl	8000648 <__aeabi_dmul>
 800d2d2:	4632      	mov	r2, r6
 800d2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2d8:	463b      	mov	r3, r7
 800d2da:	4640      	mov	r0, r8
 800d2dc:	4649      	mov	r1, r9
 800d2de:	f7f3 f9b3 	bl	8000648 <__aeabi_dmul>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ea:	f7f2 fff5 	bl	80002d8 <__aeabi_dsub>
 800d2ee:	4652      	mov	r2, sl
 800d2f0:	465b      	mov	r3, fp
 800d2f2:	f7f3 f9a9 	bl	8000648 <__aeabi_dmul>
 800d2f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2fa:	f7f2 ffed 	bl	80002d8 <__aeabi_dsub>
 800d2fe:	a30c      	add	r3, pc, #48	; (adr r3, 800d330 <__kernel_sin+0x140>)
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	4606      	mov	r6, r0
 800d306:	460f      	mov	r7, r1
 800d308:	4640      	mov	r0, r8
 800d30a:	4649      	mov	r1, r9
 800d30c:	f7f3 f99c 	bl	8000648 <__aeabi_dmul>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4630      	mov	r0, r6
 800d316:	4639      	mov	r1, r7
 800d318:	f7f2 ffe0 	bl	80002dc <__adddf3>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f2 ffd8 	bl	80002d8 <__aeabi_dsub>
 800d328:	e7c6      	b.n	800d2b8 <__kernel_sin+0xc8>
 800d32a:	bf00      	nop
 800d32c:	f3af 8000 	nop.w
 800d330:	55555549 	.word	0x55555549
 800d334:	3fc55555 	.word	0x3fc55555
 800d338:	3fe00000 	.word	0x3fe00000
 800d33c:	5acfd57c 	.word	0x5acfd57c
 800d340:	3de5d93a 	.word	0x3de5d93a
 800d344:	8a2b9ceb 	.word	0x8a2b9ceb
 800d348:	3e5ae5e6 	.word	0x3e5ae5e6
 800d34c:	57b1fe7d 	.word	0x57b1fe7d
 800d350:	3ec71de3 	.word	0x3ec71de3
 800d354:	19c161d5 	.word	0x19c161d5
 800d358:	3f2a01a0 	.word	0x3f2a01a0
 800d35c:	1110f8a6 	.word	0x1110f8a6
 800d360:	3f811111 	.word	0x3f811111
 800d364:	00000000 	.word	0x00000000

0800d368 <atan>:
 800d368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	ec55 4b10 	vmov	r4, r5, d0
 800d370:	4bc3      	ldr	r3, [pc, #780]	; (800d680 <atan+0x318>)
 800d372:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d376:	429e      	cmp	r6, r3
 800d378:	46ab      	mov	fp, r5
 800d37a:	dd18      	ble.n	800d3ae <atan+0x46>
 800d37c:	4bc1      	ldr	r3, [pc, #772]	; (800d684 <atan+0x31c>)
 800d37e:	429e      	cmp	r6, r3
 800d380:	dc01      	bgt.n	800d386 <atan+0x1e>
 800d382:	d109      	bne.n	800d398 <atan+0x30>
 800d384:	b144      	cbz	r4, 800d398 <atan+0x30>
 800d386:	4622      	mov	r2, r4
 800d388:	462b      	mov	r3, r5
 800d38a:	4620      	mov	r0, r4
 800d38c:	4629      	mov	r1, r5
 800d38e:	f7f2 ffa5 	bl	80002dc <__adddf3>
 800d392:	4604      	mov	r4, r0
 800d394:	460d      	mov	r5, r1
 800d396:	e006      	b.n	800d3a6 <atan+0x3e>
 800d398:	f1bb 0f00 	cmp.w	fp, #0
 800d39c:	f340 8131 	ble.w	800d602 <atan+0x29a>
 800d3a0:	a59b      	add	r5, pc, #620	; (adr r5, 800d610 <atan+0x2a8>)
 800d3a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d3a6:	ec45 4b10 	vmov	d0, r4, r5
 800d3aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	4bb6      	ldr	r3, [pc, #728]	; (800d688 <atan+0x320>)
 800d3b0:	429e      	cmp	r6, r3
 800d3b2:	dc14      	bgt.n	800d3de <atan+0x76>
 800d3b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d3b8:	429e      	cmp	r6, r3
 800d3ba:	dc0d      	bgt.n	800d3d8 <atan+0x70>
 800d3bc:	a396      	add	r3, pc, #600	; (adr r3, 800d618 <atan+0x2b0>)
 800d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c2:	ee10 0a10 	vmov	r0, s0
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	f7f2 ff88 	bl	80002dc <__adddf3>
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	4baf      	ldr	r3, [pc, #700]	; (800d68c <atan+0x324>)
 800d3d0:	f7f3 fbca 	bl	8000b68 <__aeabi_dcmpgt>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d1e6      	bne.n	800d3a6 <atan+0x3e>
 800d3d8:	f04f 3aff 	mov.w	sl, #4294967295
 800d3dc:	e02b      	b.n	800d436 <atan+0xce>
 800d3de:	f000 f963 	bl	800d6a8 <fabs>
 800d3e2:	4bab      	ldr	r3, [pc, #684]	; (800d690 <atan+0x328>)
 800d3e4:	429e      	cmp	r6, r3
 800d3e6:	ec55 4b10 	vmov	r4, r5, d0
 800d3ea:	f300 80bf 	bgt.w	800d56c <atan+0x204>
 800d3ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d3f2:	429e      	cmp	r6, r3
 800d3f4:	f300 80a0 	bgt.w	800d538 <atan+0x1d0>
 800d3f8:	ee10 2a10 	vmov	r2, s0
 800d3fc:	ee10 0a10 	vmov	r0, s0
 800d400:	462b      	mov	r3, r5
 800d402:	4629      	mov	r1, r5
 800d404:	f7f2 ff6a 	bl	80002dc <__adddf3>
 800d408:	2200      	movs	r2, #0
 800d40a:	4ba0      	ldr	r3, [pc, #640]	; (800d68c <atan+0x324>)
 800d40c:	f7f2 ff64 	bl	80002d8 <__aeabi_dsub>
 800d410:	2200      	movs	r2, #0
 800d412:	4606      	mov	r6, r0
 800d414:	460f      	mov	r7, r1
 800d416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d41a:	4620      	mov	r0, r4
 800d41c:	4629      	mov	r1, r5
 800d41e:	f7f2 ff5d 	bl	80002dc <__adddf3>
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	4630      	mov	r0, r6
 800d428:	4639      	mov	r1, r7
 800d42a:	f7f3 fa37 	bl	800089c <__aeabi_ddiv>
 800d42e:	f04f 0a00 	mov.w	sl, #0
 800d432:	4604      	mov	r4, r0
 800d434:	460d      	mov	r5, r1
 800d436:	4622      	mov	r2, r4
 800d438:	462b      	mov	r3, r5
 800d43a:	4620      	mov	r0, r4
 800d43c:	4629      	mov	r1, r5
 800d43e:	f7f3 f903 	bl	8000648 <__aeabi_dmul>
 800d442:	4602      	mov	r2, r0
 800d444:	460b      	mov	r3, r1
 800d446:	4680      	mov	r8, r0
 800d448:	4689      	mov	r9, r1
 800d44a:	f7f3 f8fd 	bl	8000648 <__aeabi_dmul>
 800d44e:	a374      	add	r3, pc, #464	; (adr r3, 800d620 <atan+0x2b8>)
 800d450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d454:	4606      	mov	r6, r0
 800d456:	460f      	mov	r7, r1
 800d458:	f7f3 f8f6 	bl	8000648 <__aeabi_dmul>
 800d45c:	a372      	add	r3, pc, #456	; (adr r3, 800d628 <atan+0x2c0>)
 800d45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d462:	f7f2 ff3b 	bl	80002dc <__adddf3>
 800d466:	4632      	mov	r2, r6
 800d468:	463b      	mov	r3, r7
 800d46a:	f7f3 f8ed 	bl	8000648 <__aeabi_dmul>
 800d46e:	a370      	add	r3, pc, #448	; (adr r3, 800d630 <atan+0x2c8>)
 800d470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d474:	f7f2 ff32 	bl	80002dc <__adddf3>
 800d478:	4632      	mov	r2, r6
 800d47a:	463b      	mov	r3, r7
 800d47c:	f7f3 f8e4 	bl	8000648 <__aeabi_dmul>
 800d480:	a36d      	add	r3, pc, #436	; (adr r3, 800d638 <atan+0x2d0>)
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	f7f2 ff29 	bl	80002dc <__adddf3>
 800d48a:	4632      	mov	r2, r6
 800d48c:	463b      	mov	r3, r7
 800d48e:	f7f3 f8db 	bl	8000648 <__aeabi_dmul>
 800d492:	a36b      	add	r3, pc, #428	; (adr r3, 800d640 <atan+0x2d8>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	f7f2 ff20 	bl	80002dc <__adddf3>
 800d49c:	4632      	mov	r2, r6
 800d49e:	463b      	mov	r3, r7
 800d4a0:	f7f3 f8d2 	bl	8000648 <__aeabi_dmul>
 800d4a4:	a368      	add	r3, pc, #416	; (adr r3, 800d648 <atan+0x2e0>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f2 ff17 	bl	80002dc <__adddf3>
 800d4ae:	4642      	mov	r2, r8
 800d4b0:	464b      	mov	r3, r9
 800d4b2:	f7f3 f8c9 	bl	8000648 <__aeabi_dmul>
 800d4b6:	a366      	add	r3, pc, #408	; (adr r3, 800d650 <atan+0x2e8>)
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	4680      	mov	r8, r0
 800d4be:	4689      	mov	r9, r1
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	f7f3 f8c0 	bl	8000648 <__aeabi_dmul>
 800d4c8:	a363      	add	r3, pc, #396	; (adr r3, 800d658 <atan+0x2f0>)
 800d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ce:	f7f2 ff03 	bl	80002d8 <__aeabi_dsub>
 800d4d2:	4632      	mov	r2, r6
 800d4d4:	463b      	mov	r3, r7
 800d4d6:	f7f3 f8b7 	bl	8000648 <__aeabi_dmul>
 800d4da:	a361      	add	r3, pc, #388	; (adr r3, 800d660 <atan+0x2f8>)
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	f7f2 fefa 	bl	80002d8 <__aeabi_dsub>
 800d4e4:	4632      	mov	r2, r6
 800d4e6:	463b      	mov	r3, r7
 800d4e8:	f7f3 f8ae 	bl	8000648 <__aeabi_dmul>
 800d4ec:	a35e      	add	r3, pc, #376	; (adr r3, 800d668 <atan+0x300>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	f7f2 fef1 	bl	80002d8 <__aeabi_dsub>
 800d4f6:	4632      	mov	r2, r6
 800d4f8:	463b      	mov	r3, r7
 800d4fa:	f7f3 f8a5 	bl	8000648 <__aeabi_dmul>
 800d4fe:	a35c      	add	r3, pc, #368	; (adr r3, 800d670 <atan+0x308>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f2 fee8 	bl	80002d8 <__aeabi_dsub>
 800d508:	4632      	mov	r2, r6
 800d50a:	463b      	mov	r3, r7
 800d50c:	f7f3 f89c 	bl	8000648 <__aeabi_dmul>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4640      	mov	r0, r8
 800d516:	4649      	mov	r1, r9
 800d518:	f7f2 fee0 	bl	80002dc <__adddf3>
 800d51c:	4622      	mov	r2, r4
 800d51e:	462b      	mov	r3, r5
 800d520:	f7f3 f892 	bl	8000648 <__aeabi_dmul>
 800d524:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d528:	4602      	mov	r2, r0
 800d52a:	460b      	mov	r3, r1
 800d52c:	d14b      	bne.n	800d5c6 <atan+0x25e>
 800d52e:	4620      	mov	r0, r4
 800d530:	4629      	mov	r1, r5
 800d532:	f7f2 fed1 	bl	80002d8 <__aeabi_dsub>
 800d536:	e72c      	b.n	800d392 <atan+0x2a>
 800d538:	ee10 0a10 	vmov	r0, s0
 800d53c:	2200      	movs	r2, #0
 800d53e:	4b53      	ldr	r3, [pc, #332]	; (800d68c <atan+0x324>)
 800d540:	4629      	mov	r1, r5
 800d542:	f7f2 fec9 	bl	80002d8 <__aeabi_dsub>
 800d546:	2200      	movs	r2, #0
 800d548:	4606      	mov	r6, r0
 800d54a:	460f      	mov	r7, r1
 800d54c:	4b4f      	ldr	r3, [pc, #316]	; (800d68c <atan+0x324>)
 800d54e:	4620      	mov	r0, r4
 800d550:	4629      	mov	r1, r5
 800d552:	f7f2 fec3 	bl	80002dc <__adddf3>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	4630      	mov	r0, r6
 800d55c:	4639      	mov	r1, r7
 800d55e:	f7f3 f99d 	bl	800089c <__aeabi_ddiv>
 800d562:	f04f 0a01 	mov.w	sl, #1
 800d566:	4604      	mov	r4, r0
 800d568:	460d      	mov	r5, r1
 800d56a:	e764      	b.n	800d436 <atan+0xce>
 800d56c:	4b49      	ldr	r3, [pc, #292]	; (800d694 <atan+0x32c>)
 800d56e:	429e      	cmp	r6, r3
 800d570:	dc1d      	bgt.n	800d5ae <atan+0x246>
 800d572:	ee10 0a10 	vmov	r0, s0
 800d576:	2200      	movs	r2, #0
 800d578:	4b47      	ldr	r3, [pc, #284]	; (800d698 <atan+0x330>)
 800d57a:	4629      	mov	r1, r5
 800d57c:	f7f2 feac 	bl	80002d8 <__aeabi_dsub>
 800d580:	2200      	movs	r2, #0
 800d582:	4606      	mov	r6, r0
 800d584:	460f      	mov	r7, r1
 800d586:	4b44      	ldr	r3, [pc, #272]	; (800d698 <atan+0x330>)
 800d588:	4620      	mov	r0, r4
 800d58a:	4629      	mov	r1, r5
 800d58c:	f7f3 f85c 	bl	8000648 <__aeabi_dmul>
 800d590:	2200      	movs	r2, #0
 800d592:	4b3e      	ldr	r3, [pc, #248]	; (800d68c <atan+0x324>)
 800d594:	f7f2 fea2 	bl	80002dc <__adddf3>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	4630      	mov	r0, r6
 800d59e:	4639      	mov	r1, r7
 800d5a0:	f7f3 f97c 	bl	800089c <__aeabi_ddiv>
 800d5a4:	f04f 0a02 	mov.w	sl, #2
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	e743      	b.n	800d436 <atan+0xce>
 800d5ae:	462b      	mov	r3, r5
 800d5b0:	ee10 2a10 	vmov	r2, s0
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	4939      	ldr	r1, [pc, #228]	; (800d69c <atan+0x334>)
 800d5b8:	f7f3 f970 	bl	800089c <__aeabi_ddiv>
 800d5bc:	f04f 0a03 	mov.w	sl, #3
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	460d      	mov	r5, r1
 800d5c4:	e737      	b.n	800d436 <atan+0xce>
 800d5c6:	4b36      	ldr	r3, [pc, #216]	; (800d6a0 <atan+0x338>)
 800d5c8:	4e36      	ldr	r6, [pc, #216]	; (800d6a4 <atan+0x33c>)
 800d5ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d5ce:	4456      	add	r6, sl
 800d5d0:	449a      	add	sl, r3
 800d5d2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d5d6:	f7f2 fe7f 	bl	80002d8 <__aeabi_dsub>
 800d5da:	4622      	mov	r2, r4
 800d5dc:	462b      	mov	r3, r5
 800d5de:	f7f2 fe7b 	bl	80002d8 <__aeabi_dsub>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d5ea:	f7f2 fe75 	bl	80002d8 <__aeabi_dsub>
 800d5ee:	f1bb 0f00 	cmp.w	fp, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	460d      	mov	r5, r1
 800d5f6:	f6bf aed6 	bge.w	800d3a6 <atan+0x3e>
 800d5fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5fe:	461d      	mov	r5, r3
 800d600:	e6d1      	b.n	800d3a6 <atan+0x3e>
 800d602:	a51d      	add	r5, pc, #116	; (adr r5, 800d678 <atan+0x310>)
 800d604:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d608:	e6cd      	b.n	800d3a6 <atan+0x3e>
 800d60a:	bf00      	nop
 800d60c:	f3af 8000 	nop.w
 800d610:	54442d18 	.word	0x54442d18
 800d614:	3ff921fb 	.word	0x3ff921fb
 800d618:	8800759c 	.word	0x8800759c
 800d61c:	7e37e43c 	.word	0x7e37e43c
 800d620:	e322da11 	.word	0xe322da11
 800d624:	3f90ad3a 	.word	0x3f90ad3a
 800d628:	24760deb 	.word	0x24760deb
 800d62c:	3fa97b4b 	.word	0x3fa97b4b
 800d630:	a0d03d51 	.word	0xa0d03d51
 800d634:	3fb10d66 	.word	0x3fb10d66
 800d638:	c54c206e 	.word	0xc54c206e
 800d63c:	3fb745cd 	.word	0x3fb745cd
 800d640:	920083ff 	.word	0x920083ff
 800d644:	3fc24924 	.word	0x3fc24924
 800d648:	5555550d 	.word	0x5555550d
 800d64c:	3fd55555 	.word	0x3fd55555
 800d650:	2c6a6c2f 	.word	0x2c6a6c2f
 800d654:	bfa2b444 	.word	0xbfa2b444
 800d658:	52defd9a 	.word	0x52defd9a
 800d65c:	3fadde2d 	.word	0x3fadde2d
 800d660:	af749a6d 	.word	0xaf749a6d
 800d664:	3fb3b0f2 	.word	0x3fb3b0f2
 800d668:	fe231671 	.word	0xfe231671
 800d66c:	3fbc71c6 	.word	0x3fbc71c6
 800d670:	9998ebc4 	.word	0x9998ebc4
 800d674:	3fc99999 	.word	0x3fc99999
 800d678:	54442d18 	.word	0x54442d18
 800d67c:	bff921fb 	.word	0xbff921fb
 800d680:	440fffff 	.word	0x440fffff
 800d684:	7ff00000 	.word	0x7ff00000
 800d688:	3fdbffff 	.word	0x3fdbffff
 800d68c:	3ff00000 	.word	0x3ff00000
 800d690:	3ff2ffff 	.word	0x3ff2ffff
 800d694:	40037fff 	.word	0x40037fff
 800d698:	3ff80000 	.word	0x3ff80000
 800d69c:	bff00000 	.word	0xbff00000
 800d6a0:	0800dfb8 	.word	0x0800dfb8
 800d6a4:	0800df98 	.word	0x0800df98

0800d6a8 <fabs>:
 800d6a8:	ec51 0b10 	vmov	r0, r1, d0
 800d6ac:	ee10 2a10 	vmov	r2, s0
 800d6b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6b4:	ec43 2b10 	vmov	d0, r2, r3
 800d6b8:	4770      	bx	lr

0800d6ba <finite>:
 800d6ba:	ee10 3a90 	vmov	r3, s1
 800d6be:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d6c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d6c6:	0fc0      	lsrs	r0, r0, #31
 800d6c8:	4770      	bx	lr
 800d6ca:	0000      	movs	r0, r0
 800d6cc:	0000      	movs	r0, r0
	...

0800d6d0 <floor>:
 800d6d0:	ec51 0b10 	vmov	r0, r1, d0
 800d6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d6dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d6e0:	2e13      	cmp	r6, #19
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	ee10 5a10 	vmov	r5, s0
 800d6e8:	4680      	mov	r8, r0
 800d6ea:	dc34      	bgt.n	800d756 <floor+0x86>
 800d6ec:	2e00      	cmp	r6, #0
 800d6ee:	da16      	bge.n	800d71e <floor+0x4e>
 800d6f0:	a335      	add	r3, pc, #212	; (adr r3, 800d7c8 <floor+0xf8>)
 800d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f6:	f7f2 fdf1 	bl	80002dc <__adddf3>
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f7f3 fa33 	bl	8000b68 <__aeabi_dcmpgt>
 800d702:	b148      	cbz	r0, 800d718 <floor+0x48>
 800d704:	2c00      	cmp	r4, #0
 800d706:	da59      	bge.n	800d7bc <floor+0xec>
 800d708:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d70c:	4a30      	ldr	r2, [pc, #192]	; (800d7d0 <floor+0x100>)
 800d70e:	432b      	orrs	r3, r5
 800d710:	2500      	movs	r5, #0
 800d712:	42ab      	cmp	r3, r5
 800d714:	bf18      	it	ne
 800d716:	4614      	movne	r4, r2
 800d718:	4621      	mov	r1, r4
 800d71a:	4628      	mov	r0, r5
 800d71c:	e025      	b.n	800d76a <floor+0x9a>
 800d71e:	4f2d      	ldr	r7, [pc, #180]	; (800d7d4 <floor+0x104>)
 800d720:	4137      	asrs	r7, r6
 800d722:	ea01 0307 	and.w	r3, r1, r7
 800d726:	4303      	orrs	r3, r0
 800d728:	d01f      	beq.n	800d76a <floor+0x9a>
 800d72a:	a327      	add	r3, pc, #156	; (adr r3, 800d7c8 <floor+0xf8>)
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	f7f2 fdd4 	bl	80002dc <__adddf3>
 800d734:	2200      	movs	r2, #0
 800d736:	2300      	movs	r3, #0
 800d738:	f7f3 fa16 	bl	8000b68 <__aeabi_dcmpgt>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d0eb      	beq.n	800d718 <floor+0x48>
 800d740:	2c00      	cmp	r4, #0
 800d742:	bfbe      	ittt	lt
 800d744:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d748:	fa43 f606 	asrlt.w	r6, r3, r6
 800d74c:	19a4      	addlt	r4, r4, r6
 800d74e:	ea24 0407 	bic.w	r4, r4, r7
 800d752:	2500      	movs	r5, #0
 800d754:	e7e0      	b.n	800d718 <floor+0x48>
 800d756:	2e33      	cmp	r6, #51	; 0x33
 800d758:	dd0b      	ble.n	800d772 <floor+0xa2>
 800d75a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d75e:	d104      	bne.n	800d76a <floor+0x9a>
 800d760:	ee10 2a10 	vmov	r2, s0
 800d764:	460b      	mov	r3, r1
 800d766:	f7f2 fdb9 	bl	80002dc <__adddf3>
 800d76a:	ec41 0b10 	vmov	d0, r0, r1
 800d76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d772:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d776:	f04f 33ff 	mov.w	r3, #4294967295
 800d77a:	fa23 f707 	lsr.w	r7, r3, r7
 800d77e:	4207      	tst	r7, r0
 800d780:	d0f3      	beq.n	800d76a <floor+0x9a>
 800d782:	a311      	add	r3, pc, #68	; (adr r3, 800d7c8 <floor+0xf8>)
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f7f2 fda8 	bl	80002dc <__adddf3>
 800d78c:	2200      	movs	r2, #0
 800d78e:	2300      	movs	r3, #0
 800d790:	f7f3 f9ea 	bl	8000b68 <__aeabi_dcmpgt>
 800d794:	2800      	cmp	r0, #0
 800d796:	d0bf      	beq.n	800d718 <floor+0x48>
 800d798:	2c00      	cmp	r4, #0
 800d79a:	da02      	bge.n	800d7a2 <floor+0xd2>
 800d79c:	2e14      	cmp	r6, #20
 800d79e:	d103      	bne.n	800d7a8 <floor+0xd8>
 800d7a0:	3401      	adds	r4, #1
 800d7a2:	ea25 0507 	bic.w	r5, r5, r7
 800d7a6:	e7b7      	b.n	800d718 <floor+0x48>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d7ae:	fa03 f606 	lsl.w	r6, r3, r6
 800d7b2:	4435      	add	r5, r6
 800d7b4:	4545      	cmp	r5, r8
 800d7b6:	bf38      	it	cc
 800d7b8:	18e4      	addcc	r4, r4, r3
 800d7ba:	e7f2      	b.n	800d7a2 <floor+0xd2>
 800d7bc:	2500      	movs	r5, #0
 800d7be:	462c      	mov	r4, r5
 800d7c0:	e7aa      	b.n	800d718 <floor+0x48>
 800d7c2:	bf00      	nop
 800d7c4:	f3af 8000 	nop.w
 800d7c8:	8800759c 	.word	0x8800759c
 800d7cc:	7e37e43c 	.word	0x7e37e43c
 800d7d0:	bff00000 	.word	0xbff00000
 800d7d4:	000fffff 	.word	0x000fffff

0800d7d8 <matherr>:
 800d7d8:	2000      	movs	r0, #0
 800d7da:	4770      	bx	lr
 800d7dc:	0000      	movs	r0, r0
	...

0800d7e0 <nan>:
 800d7e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d7e8 <nan+0x8>
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	00000000 	.word	0x00000000
 800d7ec:	7ff80000 	.word	0x7ff80000

0800d7f0 <rint>:
 800d7f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7f2:	ec51 0b10 	vmov	r0, r1, d0
 800d7f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d7fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d7fe:	2e13      	cmp	r6, #19
 800d800:	460b      	mov	r3, r1
 800d802:	ee10 4a10 	vmov	r4, s0
 800d806:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d80a:	dc56      	bgt.n	800d8ba <rint+0xca>
 800d80c:	2e00      	cmp	r6, #0
 800d80e:	da2b      	bge.n	800d868 <rint+0x78>
 800d810:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d814:	4302      	orrs	r2, r0
 800d816:	d023      	beq.n	800d860 <rint+0x70>
 800d818:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d81c:	4302      	orrs	r2, r0
 800d81e:	4254      	negs	r4, r2
 800d820:	4314      	orrs	r4, r2
 800d822:	0c4b      	lsrs	r3, r1, #17
 800d824:	0b24      	lsrs	r4, r4, #12
 800d826:	045b      	lsls	r3, r3, #17
 800d828:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d82c:	ea44 0103 	orr.w	r1, r4, r3
 800d830:	460b      	mov	r3, r1
 800d832:	492f      	ldr	r1, [pc, #188]	; (800d8f0 <rint+0x100>)
 800d834:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800d838:	e9d1 6700 	ldrd	r6, r7, [r1]
 800d83c:	4602      	mov	r2, r0
 800d83e:	4639      	mov	r1, r7
 800d840:	4630      	mov	r0, r6
 800d842:	f7f2 fd4b 	bl	80002dc <__adddf3>
 800d846:	e9cd 0100 	strd	r0, r1, [sp]
 800d84a:	463b      	mov	r3, r7
 800d84c:	4632      	mov	r2, r6
 800d84e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d852:	f7f2 fd41 	bl	80002d8 <__aeabi_dsub>
 800d856:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d85a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d85e:	4639      	mov	r1, r7
 800d860:	ec41 0b10 	vmov	d0, r0, r1
 800d864:	b003      	add	sp, #12
 800d866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d868:	4a22      	ldr	r2, [pc, #136]	; (800d8f4 <rint+0x104>)
 800d86a:	4132      	asrs	r2, r6
 800d86c:	ea01 0702 	and.w	r7, r1, r2
 800d870:	4307      	orrs	r7, r0
 800d872:	d0f5      	beq.n	800d860 <rint+0x70>
 800d874:	0852      	lsrs	r2, r2, #1
 800d876:	4011      	ands	r1, r2
 800d878:	430c      	orrs	r4, r1
 800d87a:	d00b      	beq.n	800d894 <rint+0xa4>
 800d87c:	ea23 0202 	bic.w	r2, r3, r2
 800d880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d884:	2e13      	cmp	r6, #19
 800d886:	fa43 f306 	asr.w	r3, r3, r6
 800d88a:	bf0c      	ite	eq
 800d88c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d890:	2400      	movne	r4, #0
 800d892:	4313      	orrs	r3, r2
 800d894:	4916      	ldr	r1, [pc, #88]	; (800d8f0 <rint+0x100>)
 800d896:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d89a:	4622      	mov	r2, r4
 800d89c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	f7f2 fd1a 	bl	80002dc <__adddf3>
 800d8a8:	e9cd 0100 	strd	r0, r1, [sp]
 800d8ac:	4622      	mov	r2, r4
 800d8ae:	462b      	mov	r3, r5
 800d8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8b4:	f7f2 fd10 	bl	80002d8 <__aeabi_dsub>
 800d8b8:	e7d2      	b.n	800d860 <rint+0x70>
 800d8ba:	2e33      	cmp	r6, #51	; 0x33
 800d8bc:	dd07      	ble.n	800d8ce <rint+0xde>
 800d8be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d8c2:	d1cd      	bne.n	800d860 <rint+0x70>
 800d8c4:	ee10 2a10 	vmov	r2, s0
 800d8c8:	f7f2 fd08 	bl	80002dc <__adddf3>
 800d8cc:	e7c8      	b.n	800d860 <rint+0x70>
 800d8ce:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800d8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d6:	40f2      	lsrs	r2, r6
 800d8d8:	4210      	tst	r0, r2
 800d8da:	d0c1      	beq.n	800d860 <rint+0x70>
 800d8dc:	0852      	lsrs	r2, r2, #1
 800d8de:	4210      	tst	r0, r2
 800d8e0:	bf1f      	itttt	ne
 800d8e2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d8e6:	ea20 0202 	bicne.w	r2, r0, r2
 800d8ea:	4134      	asrne	r4, r6
 800d8ec:	4314      	orrne	r4, r2
 800d8ee:	e7d1      	b.n	800d894 <rint+0xa4>
 800d8f0:	0800dfd8 	.word	0x0800dfd8
 800d8f4:	000fffff 	.word	0x000fffff

0800d8f8 <scalbn>:
 800d8f8:	b570      	push	{r4, r5, r6, lr}
 800d8fa:	ec55 4b10 	vmov	r4, r5, d0
 800d8fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d902:	4606      	mov	r6, r0
 800d904:	462b      	mov	r3, r5
 800d906:	b9aa      	cbnz	r2, 800d934 <scalbn+0x3c>
 800d908:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d90c:	4323      	orrs	r3, r4
 800d90e:	d03b      	beq.n	800d988 <scalbn+0x90>
 800d910:	4b31      	ldr	r3, [pc, #196]	; (800d9d8 <scalbn+0xe0>)
 800d912:	4629      	mov	r1, r5
 800d914:	2200      	movs	r2, #0
 800d916:	ee10 0a10 	vmov	r0, s0
 800d91a:	f7f2 fe95 	bl	8000648 <__aeabi_dmul>
 800d91e:	4b2f      	ldr	r3, [pc, #188]	; (800d9dc <scalbn+0xe4>)
 800d920:	429e      	cmp	r6, r3
 800d922:	4604      	mov	r4, r0
 800d924:	460d      	mov	r5, r1
 800d926:	da12      	bge.n	800d94e <scalbn+0x56>
 800d928:	a327      	add	r3, pc, #156	; (adr r3, 800d9c8 <scalbn+0xd0>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fe8b 	bl	8000648 <__aeabi_dmul>
 800d932:	e009      	b.n	800d948 <scalbn+0x50>
 800d934:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d938:	428a      	cmp	r2, r1
 800d93a:	d10c      	bne.n	800d956 <scalbn+0x5e>
 800d93c:	ee10 2a10 	vmov	r2, s0
 800d940:	4620      	mov	r0, r4
 800d942:	4629      	mov	r1, r5
 800d944:	f7f2 fcca 	bl	80002dc <__adddf3>
 800d948:	4604      	mov	r4, r0
 800d94a:	460d      	mov	r5, r1
 800d94c:	e01c      	b.n	800d988 <scalbn+0x90>
 800d94e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d952:	460b      	mov	r3, r1
 800d954:	3a36      	subs	r2, #54	; 0x36
 800d956:	4432      	add	r2, r6
 800d958:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d95c:	428a      	cmp	r2, r1
 800d95e:	dd0b      	ble.n	800d978 <scalbn+0x80>
 800d960:	ec45 4b11 	vmov	d1, r4, r5
 800d964:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d9d0 <scalbn+0xd8>
 800d968:	f000 f83c 	bl	800d9e4 <copysign>
 800d96c:	a318      	add	r3, pc, #96	; (adr r3, 800d9d0 <scalbn+0xd8>)
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	ec51 0b10 	vmov	r0, r1, d0
 800d976:	e7da      	b.n	800d92e <scalbn+0x36>
 800d978:	2a00      	cmp	r2, #0
 800d97a:	dd08      	ble.n	800d98e <scalbn+0x96>
 800d97c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d980:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d984:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d988:	ec45 4b10 	vmov	d0, r4, r5
 800d98c:	bd70      	pop	{r4, r5, r6, pc}
 800d98e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d992:	da0d      	bge.n	800d9b0 <scalbn+0xb8>
 800d994:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d998:	429e      	cmp	r6, r3
 800d99a:	ec45 4b11 	vmov	d1, r4, r5
 800d99e:	dce1      	bgt.n	800d964 <scalbn+0x6c>
 800d9a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d9c8 <scalbn+0xd0>
 800d9a4:	f000 f81e 	bl	800d9e4 <copysign>
 800d9a8:	a307      	add	r3, pc, #28	; (adr r3, 800d9c8 <scalbn+0xd0>)
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	e7e0      	b.n	800d972 <scalbn+0x7a>
 800d9b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9b4:	3236      	adds	r2, #54	; 0x36
 800d9b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9be:	4620      	mov	r0, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <scalbn+0xe8>)
 800d9c6:	e7b2      	b.n	800d92e <scalbn+0x36>
 800d9c8:	c2f8f359 	.word	0xc2f8f359
 800d9cc:	01a56e1f 	.word	0x01a56e1f
 800d9d0:	8800759c 	.word	0x8800759c
 800d9d4:	7e37e43c 	.word	0x7e37e43c
 800d9d8:	43500000 	.word	0x43500000
 800d9dc:	ffff3cb0 	.word	0xffff3cb0
 800d9e0:	3c900000 	.word	0x3c900000

0800d9e4 <copysign>:
 800d9e4:	ec51 0b10 	vmov	r0, r1, d0
 800d9e8:	ee11 0a90 	vmov	r0, s3
 800d9ec:	ee10 2a10 	vmov	r2, s0
 800d9f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d9f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d9f8:	ea41 0300 	orr.w	r3, r1, r0
 800d9fc:	ec43 2b10 	vmov	d0, r2, r3
 800da00:	4770      	bx	lr
	...

0800da04 <_init>:
 800da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da06:	bf00      	nop
 800da08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0a:	bc08      	pop	{r3}
 800da0c:	469e      	mov	lr, r3
 800da0e:	4770      	bx	lr

0800da10 <_fini>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	bf00      	nop
 800da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da16:	bc08      	pop	{r3}
 800da18:	469e      	mov	lr, r3
 800da1a:	4770      	bx	lr
